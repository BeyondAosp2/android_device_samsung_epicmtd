diff -wrp Epic-Froyo/arch/arm/mach-s5pv210/aries-rfkill.c froyo-i9000/arch/arm/mach-s5pv210/aries-rfkill.c
*** Epic-Froyo/arch/arm/mach-s5pv210/aries-rfkill.c	Fri Nov  5 04:38:28 2010
--- froyo-i9000/arch/arm/mach-s5pv210/aries-rfkill.c	Tue Oct  5 05:13:33 2010
***************
*** 33,39 ****
  //#include <plat/regs-gpio.h>
  #define BT_SLEEP_ENABLER
  
! #define IRQ_BT_HOST_WAKE      IRQ_EINT4//IRQ_EINT(4) //shiks_DK05
  
  static struct wake_lock rfkill_wake_lock;
  #ifdef BT_SLEEP_ENABLER
--- 33,39 ----
  //#include <plat/regs-gpio.h>
  #define BT_SLEEP_ENABLER
  
! #define IRQ_BT_HOST_WAKE      IRQ_EINT(21)
  
  static struct wake_lock rfkill_wake_lock;
  #ifdef BT_SLEEP_ENABLER
*************** extern void s3c_setup_uart_cfg_gpio(unsi
*** 52,69 ****
  //extern void s3c_reset_uart_cfg_gpio(unsigned char port);
  
  static struct rfkill *bt_rfk;
! static const char bt_name[] = "bt_rfkill";
  
  static int bluetooth_set_power(void *data, enum rfkill_user_states state)
  {
  	unsigned int ret = 0;
- 	static int on_off = 0;
  	switch (state) {
  
  		case RFKILL_USER_STATE_UNBLOCKED:
  			printk(KERN_DEBUG "[BT] Device Powering ON \n");
  			s3c_setup_uart_cfg_gpio(0);
- 			if(on_off) return; //shiks_DF03 temp for AP sleep issue //just 1 time //FROYO MERGE
  
  			if (gpio_is_valid(GPIO_WLAN_BT_EN))
  			{
--- 52,67 ----
  //extern void s3c_reset_uart_cfg_gpio(unsigned char port);
  
  static struct rfkill *bt_rfk;
! static const char bt_name[] = "bcm4329";
  
  static int bluetooth_set_power(void *data, enum rfkill_user_states state)
  {
  	unsigned int ret = 0; 
  	switch (state) {
  
  		case RFKILL_USER_STATE_UNBLOCKED:
  			printk(KERN_DEBUG "[BT] Device Powering ON \n");
  			s3c_setup_uart_cfg_gpio(0);
  
  			if (gpio_is_valid(GPIO_WLAN_BT_EN))
  			{
*************** static int bluetooth_set_power(void *dat
*** 74,82 ****
  				}
  				gpio_direction_output(GPIO_WLAN_BT_EN, GPIO_LEVEL_HIGH);
  			}
! 			//SecFeature shiks_DJ18 start
! 			enable_irq(IRQ_BT_HOST_WAKE);//for sleep surrent when wifi goes to sleep mode
! 			//SecFeature shiks_DJ18 end
  			if (gpio_is_valid(GPIO_BT_nRST))
  			{
  				ret = gpio_request(GPIO_BT_nRST, "GPB");
--- 72,78 ----
  				}
  				gpio_direction_output(GPIO_WLAN_BT_EN, GPIO_LEVEL_HIGH);
  			}
! 
  			if (gpio_is_valid(GPIO_BT_nRST))
  			{
  				ret = gpio_request(GPIO_BT_nRST, "GPB");
*************** static int bluetooth_set_power(void *dat
*** 93,105 ****
  			s3c_gpio_setpull(GPIO_WLAN_BT_EN, S3C_GPIO_PULL_NONE);
  			gpio_set_value(GPIO_WLAN_BT_EN, GPIO_LEVEL_HIGH);
  
! 			s3c_gpio_slp_cfgpin(GPIO_WLAN_BT_EN, S3C_GPIO_SLP_PREV);
  			s3c_gpio_slp_setpull_updown(GPIO_WLAN_BT_EN, S3C_GPIO_PULL_NONE);
  
  			printk( "[BT] GPIO_WLAN_BT_EN = %d\n", gpio_get_value(GPIO_WLAN_BT_EN));
  			/*FIXME sleep should be enabled disabled since the device is not booting
  			 * 			if its enabled*/
! 			msleep(150);  // 100msec, delay  between reg_on & rst. (bcm4329 powerup sequence)
  
  			/* Set GPIO_BT_nRST high */
  			s3c_gpio_setpull(GPIO_BT_nRST, S3C_GPIO_PULL_NONE);
--- 89,101 ----
  			s3c_gpio_setpull(GPIO_WLAN_BT_EN, S3C_GPIO_PULL_NONE);
  			gpio_set_value(GPIO_WLAN_BT_EN, GPIO_LEVEL_HIGH);
  
! 			s3c_gpio_slp_cfgpin(GPIO_WLAN_BT_EN, S3C_GPIO_SLP_OUT1);  
  			s3c_gpio_slp_setpull_updown(GPIO_WLAN_BT_EN, S3C_GPIO_PULL_NONE);
  
  			printk( "[BT] GPIO_WLAN_BT_EN = %d\n", gpio_get_value(GPIO_WLAN_BT_EN));		
  			/*FIXME sleep should be enabled disabled since the device is not booting 
  			 * 			if its enabled*/
! 			msleep(100);  // 100msec, delay  between reg_on & rst. (bcm4329 powerup sequence)
  
  			/* Set GPIO_BT_nRST high */
  			s3c_gpio_setpull(GPIO_BT_nRST, S3C_GPIO_PULL_NONE);
*************** static int bluetooth_set_power(void *dat
*** 110,116 ****
  
  			printk("[BT] GPIO_BT_nRST = %d\n", gpio_get_value(GPIO_BT_nRST));
  
-             on_off =1;
  			gpio_free(GPIO_BT_nRST);
  			gpio_free(GPIO_WLAN_BT_EN);
  
--- 106,111 ----
*************** static int bluetooth_set_power(void *dat
*** 123,146 ****
  			s3c_gpio_setpull(GPIO_BT_nRST, S3C_GPIO_PULL_NONE);
  			gpio_set_value(GPIO_BT_nRST, GPIO_LEVEL_LOW);
  
! 			s3c_gpio_slp_cfgpin(GPIO_BT_nRST, S3C_GPIO_SLP_PREV);
  			s3c_gpio_slp_setpull_updown(GPIO_BT_nRST, S3C_GPIO_PULL_NONE);
  
  			printk("[BT] GPIO_BT_nRST = %d\n",gpio_get_value(GPIO_BT_nRST));
! 			//SecFeature shiks_DJ18 start
! 			disable_irq(IRQ_BT_HOST_WAKE);//for sleep surrent when wifi goes to sleep mode
! 			//SecFeature shiks_DJ18 end
  			if(gpio_get_value(GPIO_WLAN_nRST) == 0)
  			{
  				s3c_gpio_setpull(GPIO_WLAN_BT_EN, S3C_GPIO_PULL_NONE);
  				gpio_set_value(GPIO_WLAN_BT_EN, GPIO_LEVEL_LOW);
  
! 				s3c_gpio_slp_cfgpin(GPIO_WLAN_BT_EN, S3C_GPIO_SLP_PREV);
  				s3c_gpio_slp_setpull_updown(GPIO_WLAN_BT_EN, S3C_GPIO_PULL_NONE);
  
  				printk("[BT] GPIO_WLAN_BT_EN = %d\n", gpio_get_value(GPIO_WLAN_BT_EN));
  			}
!             on_off = 0;
  			gpio_free(GPIO_BT_nRST);
  			gpio_free(GPIO_WLAN_BT_EN);
  
--- 118,139 ----
  			s3c_gpio_setpull(GPIO_BT_nRST, S3C_GPIO_PULL_NONE);
  			gpio_set_value(GPIO_BT_nRST, GPIO_LEVEL_LOW);
  
! 			s3c_gpio_slp_cfgpin(GPIO_BT_nRST, S3C_GPIO_SLP_OUT0);
  			s3c_gpio_slp_setpull_updown(GPIO_BT_nRST, S3C_GPIO_PULL_NONE);
  
  			printk("[BT] GPIO_BT_nRST = %d\n",gpio_get_value(GPIO_BT_nRST));
! 
  			if(gpio_get_value(GPIO_WLAN_nRST) == 0)
  			{		
  				s3c_gpio_setpull(GPIO_WLAN_BT_EN, S3C_GPIO_PULL_NONE);
  				gpio_set_value(GPIO_WLAN_BT_EN, GPIO_LEVEL_LOW);
  
! 				s3c_gpio_slp_cfgpin(GPIO_WLAN_BT_EN, S3C_GPIO_SLP_OUT0);
  				s3c_gpio_slp_setpull_updown(GPIO_WLAN_BT_EN, S3C_GPIO_PULL_NONE);
  
  				printk("[BT] GPIO_WLAN_BT_EN = %d\n", gpio_get_value(GPIO_WLAN_BT_EN));
  			}
! 
  			gpio_free(GPIO_BT_nRST);
  			gpio_free(GPIO_WLAN_BT_EN);
  
*************** static int bluetooth_set_power(void *dat
*** 156,190 ****
  
  static void bt_host_wake_work_func(struct work_struct *ignored)
  {
! /* //shiks_DK05
! 		int gpio_val;
! 
! 		gpio_val = gpio_get_value(GPIO_BT_HOST_WAKE);
! 		printk(KERN_DEBUG "[BT] GPIO_BT_HOST_WAKE = %d\n", gpio_val);
! 
! 		if(gpio_val == GPIO_LEVEL_LOW)
! 		{
! 			//wake_unlock^M
! 			printk("[BT]:wake_unlock \n");
! 			wake_unlock(&rfkill_wake_lock);
! 		}
! 		else
! 		{
! 			//wake_lock
! 			printk("[BT]:wake_lock \n");
! 			wake_lock(&rfkill_wake_lock);
! 		}
! 
! 
! 		if(gpio_val == GPIO_LEVEL_HIGH)
! *///shiks_DK05
! 		{
! 			printk(KERN_DEBUG "[BT] wake_lock timeout = 5 sec\n");
  			wake_lock_timeout(&rfkill_wake_lock, 5*HZ);
- 		}
- 
  	enable_irq(IRQ_BT_HOST_WAKE);
- 
  }
  static DECLARE_WORK(bt_host_wake_work, bt_host_wake_work_func);
  
--- 149,157 ----
  
  static void bt_host_wake_work_func(struct work_struct *ignored)
  {
! 	//printk(KERN_DEBUG "[BT] wake_lock timeout = 5 sec\n");
  	wake_lock_timeout(&rfkill_wake_lock, 5*HZ);
  	enable_irq(IRQ_BT_HOST_WAKE);
  }
  static DECLARE_WORK(bt_host_wake_work, bt_host_wake_work_func);
  
*************** static int __init jupiter_rfkill_probe(s
*** 227,239 ****
  	//BT Host Wake IRQ
  	irq = IRQ_BT_HOST_WAKE;
  
! 		set_irq_type(irq, IRQ_TYPE_EDGE_BOTH);//shiks_DK05 set_irq_type(irq, IRQ_TYPE_EDGE_RISING);
  	ret = request_irq(irq, bt_host_wake_irq_handler, 0, "bt_host_wake_irq_handler", NULL);
  	if(ret < 0)
  		printk(KERN_ERR "[BT] Request_irq failed \n");
  
- //shiks_DK05		set_irq_type(irq, IRQ_TYPE_EDGE_BOTH);
- 
  //	enable_irq(IRQ_BT_HOST_WAKE);
  
  	//RFKILL init - default to bluetooth off
--- 194,204 ----
  	//BT Host Wake IRQ
  	irq = IRQ_BT_HOST_WAKE;
  
! 	set_irq_type(irq, IRQ_TYPE_EDGE_RISING);
  	ret = request_irq(irq, bt_host_wake_irq_handler, 0, "bt_host_wake_irq_handler", NULL);
  	if(ret < 0)
  		printk(KERN_ERR "[BT] Request_irq failed \n");
  
  //	enable_irq(IRQ_BT_HOST_WAKE);
  
  	//RFKILL init - default to bluetooth off
*************** static int __init jupiter_rfkill_probe(s
*** 256,262 ****
  
  	rfkill_set_sw_state(bt_rfk, 1);
  	bluetooth_set_power(NULL, RFKILL_USER_STATE_SOFT_BLOCKED);
- 	// rfkill_force_state(bt_rfk, RFKILL_STATE_SOFT_BLOCKED); froyo_merge_change
  
  	return rc;
  }
--- 221,226 ----
diff -wrp Epic-Froyo/arch/arm/mach-s5pv210/cpu-freq.c froyo-i9000/arch/arm/mach-s5pv210/cpu-freq.c
*** Epic-Froyo/arch/arm/mach-s5pv210/cpu-freq.c	Wed Oct 27 21:24:43 2010
--- froyo-i9000/arch/arm/mach-s5pv210/cpu-freq.c	Tue Oct  5 05:13:33 2010
*************** int dvfs_change_quick = 0;
*** 202,215 ****
  // jump to the given performance level
  static void set_dvfs_perf_level(unsigned int perf_level) 
  {
! 	unsigned long irqflags;
  
! 	spin_lock_irqsave(&g_dvfslock,irqflags);
  	if(s5pc11x_cpufreq_index > perf_level) {
  		s5pc11x_cpufreq_index = perf_level; // jump to specified level 
  		dvfs_change_quick = 1;
  	}
! 	spin_unlock_irqrestore(&g_dvfslock,irqflags);
  	return;
  }
  
--- 202,215 ----
  // jump to the given performance level
  static void set_dvfs_perf_level(unsigned int perf_level) 
  {
! 	//unsigned long irqflags;
  
! 	spin_lock(&g_dvfslock);
  	if(s5pc11x_cpufreq_index > perf_level) {
  		s5pc11x_cpufreq_index = perf_level; // jump to specified level 
  		dvfs_change_quick = 1;
  	}
! 	spin_unlock(&g_dvfslock);
  	return;
  }
Only in Epic-Froyo/arch/arm/mach-s5pv210/include/mach: dsim.h
diff -wrp Epic-Froyo/arch/arm/mach-s5pv210/include/mach/gpio-aries-setting.h froyo-i9000/arch/arm/mach-s5pv210/include/mach/gpio-aries-setting.h
*** Epic-Froyo/arch/arm/mach-s5pv210/include/mach/gpio-aries-setting.h	Tue Jan 11 03:55:49 2011
--- froyo-i9000/arch/arm/mach-s5pv210/include/mach/gpio-aries-setting.h	Tue Oct  5 05:13:33 2010
***************
*** 5,63 ****
  #define S3C_GPIO_SETPIN_ONE 	1
  #define S3C_GPIO_SETPIN_NONE	2
  
! static unsigned int jupiter_gpio_table[][6] = {
! 	/* Off part */
! 	// GPA0 ~ GPA1 : is done by UART driver early, so not modifying.
! #if 0
  	{S5PV210_GPA0(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  	{S5PV210_GPA0(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  	{S5PV210_GPA0(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  	{S5PV210_GPA0(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  	{S5PV210_GPA0(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  	{S5PV210_GPA0(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  	{S5PV210_GPA0(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  	{S5PV210_GPA0(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 
! 	// uart2 rx and tx..  done by uboot. So not modifying
! 	//{S5PV210_GPA1(0), 2, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,
! 	//		 S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST, S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 	//{S5PV210_GPA1(1), 2, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,
! 	//		 S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST, S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 
  	{S5PV210_GPA1(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  	{S5PV210_GPA1(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  #endif
  	{S5PV210_GPB(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
!         {S5PV210_GPB(1), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPB(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
- #ifdef CONFIG_ARIES_VER_B2
-         {S5PV210_GPB(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
- #else
          {S5PV210_GPB(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
- #endif
          {S5PV210_GPB(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPB(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPB(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPB(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_GPC0(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPC0(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPC0(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 	//cky 20100503 WIMAX_I2C_CON
!         {S5PV210_GPC0(3), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ONE, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPC0(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_GPC1(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPC1(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPC1(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPC1(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPC1(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_GPD0(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
!  	    { S5PV210_GPD0(1), GPIO_OUTPUT, GPIO_LEVEL_LOW, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, //jihyon82.kim
          {S5PV210_GPD0(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPD0(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_GPD1(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPD1(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPD1(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
--- 5,66 ----
  #define S3C_GPIO_SETPIN_ONE 	1
  #define S3C_GPIO_SETPIN_NONE	2
  
! //	GPIO Initialization table
! //	{pin number,	  pin conf, 	   pin value,			 pullup/down config, driver strength,	 slew rate}
! static unsigned int jupiter_gpio_table[][6] =
! {
! #if 0 // UART interface is already set
! 	// GPA0 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPA0(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPA0(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPA0(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPA0(3), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
+ #endif	
+ #if defined(CONFIG_ARIES_NTT) // Modify NTT S1	
  	{S5PV210_GPA0(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPA0(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPA0(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPA0(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! #endif
! #if 0// UART interface is already set
! 	// GPA1 ----------------------------------------------------------------------------------------------------------------
! 	{S5PV210_GPA1(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPA1(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPA1(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPA1(3), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  #endif
+ 
+ 	// GPB -----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPB(0),  S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPB(1),  S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPB(2),  S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPB(3),  S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPB(4),  S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPB(5),  S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPB(6),  S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPB(7),  S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPC0 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPC0(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPC0(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPC0(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPC0(3), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPC0(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPC1 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPC1(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPC1(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPC1(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPC1(3), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPC1(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPD0 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPD0(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPD0(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPD0(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPD0(3), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPD1 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPD1(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPD1(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPD1(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 65,70 ****
--- 68,74 ----
  	{S5PV210_GPD1(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPD1(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPE0 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPE0(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPE0(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPE0(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 74,85 ****
          {S5PV210_GPE0(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPE0(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_GPE1(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPE1(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPE1(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
!         {S5PV210_GPE1(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_2X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPE1(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! #if 0
  	{S5PV210_GPF0(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPF0(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPF0(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
--- 78,92 ----
  	{S5PV210_GPE0(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPE0(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPE1 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPE1(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPE1(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPE1(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPE1(3), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPE1(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 
! #if 0 // LCD interface is already set
! 	// GPF0 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPF0(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPF0(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPF0(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 89,94 ****
--- 96,102 ----
  	{S5PV210_GPF0(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPF0(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPF1 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPF1(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPF1(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPF1(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 98,103 ****
--- 106,112 ----
  	{S5PV210_GPF1(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPF1(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPF2 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPF2(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPF2(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPF2(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 105,112 ****
          {S5PV210_GPF2(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPF2(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPF2(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
!         {S5PV210_GPF2(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST,
  
  	{S5PV210_GPF3(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPF3(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPF3(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
--- 114,122 ----
  	{S5PV210_GPF2(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPF2(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPF2(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPF2(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPF3 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPF3(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPF3(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPF3(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 115,120 ****
--- 125,131 ----
  	{S5PV210_GPF3(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPF3(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPG0 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPG0(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPG0(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPG0(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 123,145 ****
          {S5PV210_GPG0(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPG0(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
! 	//cky 20100507 WIMAX SDIO
! 	{S5PV210_GPG1(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
!         {S5PV210_GPG1(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPG1(2), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
!         {S5PV210_GPG1(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
!         {S5PV210_GPG1(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
!         {S5PV210_GPG1(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
!         {S5PV210_GPG1(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_GPG2(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPG2(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
!         {S5PV210_GPG2(2), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPG2(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPG2(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPG2(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPG2(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_GPG3(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPG3(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPG3(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
--- 134,158 ----
  	{S5PV210_GPG0(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPG0(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
! 	// GPG1 ----------------------------------------------------------------------------------------------------------------
! 	{S5PV210_GPG1(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPG1(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPG1(2), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPG1(3), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPG1(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPG1(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPG1(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPG2 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPG2(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPG2(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPG2(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPG2(3), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPG2(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPG2(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPG2(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPG3 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPG3(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPG3(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPG3(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 148,154 ****
          {S5PV210_GPG3(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPG3(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
! 	/* Alive part */
          {S5PV210_GPH0(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPH0(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPH0(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
--- 161,167 ----
  	{S5PV210_GPG3(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPG3(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
! 	// GPH0 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPH0(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPH0(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPH0(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 158,180 ****
          {S5PV210_GPH0(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPH0(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
          {S5PV210_GPH1(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 	//cky 20100503 WIMAX_RESET_N
!         {S5PV210_GPH1(1), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPH1(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPH1(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 	//cky 20100503 WIMAX_EN
!         {S5PV210_GPH1(4), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 
! #if 1 //FROYO MERGE
          {S5PV210_GPH1(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! #else
!         {S5PV210_GPH1(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! #endif
! 	//cky 20100503 WIMAX_INT
!         {S5PV210_GPH1(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPH1(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
          {S5PV210_GPH2(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPH2(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPH2(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
--- 171,187 ----
  	{S5PV210_GPH0(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPH0(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPH1 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPH1(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPH1(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPH1(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPH1(3), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPH1(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPH1(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPH1(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPH1(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPH2 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPH2(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPH2(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPH2(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 184,189 ****
--- 191,197 ----
  	{S5PV210_GPH2(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPH2(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPH3 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPH3(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPH3(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPH3(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 193,200 ****
          {S5PV210_GPH3(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPH3(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
! 
! 	/* Alive part ending and off part start*/
  	{S5PV210_GPI(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPI(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPI(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
--- 201,207 ----
  	{S5PV210_GPH3(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPH3(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
! 	// GPI -----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPI(0),  S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPI(1),  S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPI(2),  S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 203,208 ****
--- 210,216 ----
  	{S5PV210_GPI(5),  S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPI(6),  S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPJ0 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPJ0(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ0(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ0(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 212,217 ****
--- 220,226 ----
  	{S5PV210_GPJ0(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ0(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPJ1 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPJ1(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ1(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ1(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 219,234 ****
          {S5PV210_GPJ1(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPJ1(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_GPJ2(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPJ2(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPJ2(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPJ2(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
!         {S5PV210_GPJ2(4), GPIO_OUTPUT, GPIO_LEVEL_LOW, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, //jihyon82.kim
          {S5PV210_GPJ2(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 	{S5PV210_GPJ2(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, //hojun_kim //hojun_kim S3C_GPIO_PULL_DOWN->S3C_GPIO_PULL_UP
! 			 S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPJ2(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_GPJ3(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPJ3(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPJ3(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
--- 228,244 ----
  	{S5PV210_GPJ1(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ1(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPJ2 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPJ2(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ2(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ2(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ2(3), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPJ2(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ2(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_GPJ2(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ2(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPJ3 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPJ3(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ3(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ3(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 238,249 ****
          {S5PV210_GPJ3(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPJ3(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_GPJ4(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPJ4(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPJ4(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPJ4(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_GPJ4(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 	/* memory part */
  	{S5PV210_MP01(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP01(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP01(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
--- 248,261 ----
  	{S5PV210_GPJ3(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ3(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// GPJ4 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_GPJ4(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ4(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ4(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ4(3), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_GPJ4(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 
! 	// MP01 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_MP01(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP01(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP01(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 253,299 ****
          {S5PV210_MP01(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP01(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_MP02(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP02(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP02(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP02(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_MP03(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP03(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP03(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
!         {S5PV210_MP03(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP03(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP03(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP03(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP03(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_MP04(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP04(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP04(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP04(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 	//cky 20100503 WIMAX_CON2
!         {S5PV210_MP04(4), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 	//cky 20100503 WIMAX_WAKEUP
!         {S5PV210_MP04(5), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 	//cky 20100503 WIMAX_CON0
!         {S5PV210_MP04(6), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 	//cky 20100503 WIMAX_CON1
!         {S5PV210_MP04(7), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_MP05(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 	//cky 20100503 WIMAX_IF_MODE0
!         {S5PV210_MP05(1), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 	//cky 20100503 WIMAX_IF_MODE1
!         {S5PV210_MP05(2), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP05(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP05(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 
!         //victory.boot GPIO_MLCD_RST
!         {S5PV210_MP05(5), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
! 
          {S5PV210_MP05(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP05(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
  
  	{S5PV210_MP06(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP06(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP06(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
--- 265,311 ----
  	{S5PV210_MP01(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP01(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// MP02 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_MP02(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP02(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP02(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP02(3), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// MP03 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_MP03(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP03(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP03(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_MP03(3), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP03(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
+ #if defined(CONFIG_ARIES_NTT)
  	{S5PV210_MP03(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
+ #else
+ 	{S5PV210_MP03(5), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
+ #endif
  	{S5PV210_MP03(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP03(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// MP04 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_MP04(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP04(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP04(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP04(3), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_MP04(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_MP04(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_MP04(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_MP04(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// MP05 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_MP05(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_MP05(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_MP05(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP05(3), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP05(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
! 	{S5PV210_MP05(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP05(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP05(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// MP06 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_MP06(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP06(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP06(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 303,308 ****
--- 315,321 ----
  	{S5PV210_MP06(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP06(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  
+ 	// MP07 ----------------------------------------------------------------------------------------------------------------
  	{S5PV210_MP07(0), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP07(1), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP07(2), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
*************** static unsigned int jupiter_gpio_table[]
*** 311,691 ****
          {S5PV210_MP07(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP07(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
          {S5PV210_MP07(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN,S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST},
- 
- 	/* Memory part ending and off part ending */
- 
  };
  
  
! static unsigned int jupiter_sleep_gpio_table[][3] = {
! 
! 	{S5PV210_GPA0(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
! 	{S5PV210_GPA0(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, //20100503_inchul.im... input pull none in sleep mode(for victory)
! 	{S5PV210_GPA0(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
! 	{S5PV210_GPA0(3),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},//shiks_DK05	{S5PV210_GPA0(3),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! 	{S5PV210_GPA0(4),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! 	{S5PV210_GPA0(5),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! 	{S5PV210_GPA0(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! 	{S5PV210_GPA0(7),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! 
! 	{S5PV210_GPA1(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100611_inchul... input pull down(from HW)
! 	{S5PV210_GPA1(1),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, //20100611_inchul... output low pull none(from HW)
! 	{S5PV210_GPA1(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! 	{S5PV210_GPA1(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! 
  	{S5PV210_GPB(0),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!     {S5PV210_GPB(1),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
      {S5PV210_GPB(2),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
-         {S5PV210_GPB(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100430_inchul... BUCK_1_EN_B : input pull down in sleep mode(for victory)
-         {S5PV210_GPB(4),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100722_inchul... input pull down(from HW)
-         {S5PV210_GPB(5),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
-         {S5PV210_GPB(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
- #if 1 //FROYO MERGE
-         {S5PV210_GPB(7),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
- #else
- 		{S5PV210_GPB(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
  #endif
! 
! 	{S5PV210_GPC0(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
!         {S5PV210_GPC0(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPC0(2),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE},  //20100506_inchul... GPIO_WIMAX_PM_SDA : Input & Pull-None in Sleep Mode(for victory)
! 	//cky 20100503 WIMAX_I2C_CON
!         {S5PV210_GPC0(3),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, //hojun_kim from HW req
!         {S5PV210_GPC0(4),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE}, //20100506_inchul... GPIO_WIMAX_PM_SCL : Input & Pull-None in Sleep Mode(for victory)
! #if 1 //FROYO MERGE
! 	{S5PV210_GPC1(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
  #else
! 	{S5PV210_GPC1(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! #endif
!         {S5PV210_GPC1(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! #if 1 //FROYO MERGE
!         {S5PV210_GPC1(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
!         {S5PV210_GPC1(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
!         {S5PV210_GPC1(4),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! #else
! 		{S5PV210_GPC1(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 		{S5PV210_GPC1(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 		{S5PV210_GPC1(4),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! #endif
! 
! 	{S5PV210_GPD0(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! #if 1 //FROYO MERGE
!         {S5PV210_GPD0(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, //20100503_inchul.im... Input Pull-None in Sleep Mode(for victory)
!         {S5PV210_GPD0(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! #else
! 		{S5PV210_GPD0(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPD0(2),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #endif
!         {S5PV210_GPD0(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 
! 	{S5PV210_GPD1(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},   //20100426_inchul... GPIO_CAM_SDA_29V : Input & Pull-Down in Sleep Mode(for victory)
!         {S5PV210_GPD1(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},   //20100426_inchul... GPIO_CAM_SCL_29V : Input & Pull-Down in Sleep Mode(for victory)
!         {S5PV210_GPD1(2),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE},   //20100506_inchul... AP_SDA_30V : output high & Pull-None in Sleep Mode(for victory)
!         {S5PV210_GPD1(3),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE},   //20100506_inchul... AP_SCL_30V : output high & Pull-None in Sleep Mode(for victory)
!         {S5PV210_GPD1(4),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},  //20100506_inchul... GPIO_TSP_SDA_28V : Input & Pull-Down in Sleep Mode(for victory)
!         {S5PV210_GPD1(5),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},  //20100506_inchul... GPIO_TSP_SCL_28V : Input & Pull-Down in Sleep Mode(for victory)
! 
! 	{S5PV210_GPE0(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPE0(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPE0(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPE0(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPE0(4),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPE0(5),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPE0(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPE0(7),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 
! 	{S5PV210_GPE1(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPE1(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPE1(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPE1(3),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #if 1 //FROYO MERGE
!         {S5PV210_GPE1(4),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! #else
!         {S5PV210_GPE1(4),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #endif
! 	{S5PV210_GPF0(0),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF0(1),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF0(2),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF0(3),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF0(4),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF0(5),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF0(6),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF0(7),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! 
! 	{S5PV210_GPF1(0),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF1(1),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF1(2),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF1(3),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF1(4),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF1(5),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF1(6),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF1(7),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! 	{S5PV210_GPF2(0),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF2(1),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF2(2),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF2(3),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF2(4),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF2(5),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF2(6),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF2(7),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! 
! 	{S5PV210_GPF3(0),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF3(1),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF3(2),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPF3(3),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! 	{S5PV210_GPF3(4),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, //sridhar-sleep conf donewhileentering sleep and not during boot time20100426_inchul... CODEC_LDO_EN is Low in Sleep Mode(for victory)
!         {S5PV210_GPF3(5),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 
! 
! 	{S5PV210_GPG0(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
!         {S5PV210_GPG0(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! #if 1 //FROYO MERGE
!         {S5PV210_GPG0(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! #else
!         {S5PV210_GPG0(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! #endif
!         {S5PV210_GPG0(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
!         {S5PV210_GPG0(4),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
!         {S5PV210_GPG0(5),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
!         {S5PV210_GPG0(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! 
! 	{S5PV210_GPG1(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100611_inchul.im... input/ pull-down in sleep mode(from HW)
!         {S5PV210_GPG1(1),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE}, //20100505_inchul.im... output high/ pull-none  in sleep mode(for victory)
!         {S5PV210_GPG1(2),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, //20100505_inchul.im... output low/ pull-none  in sleep mode(for victory)
!         {S5PV210_GPG1(3),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE}, //20100505_inchul.im... output high/ pull-none in sleep mode(for victory)
!         {S5PV210_GPG1(4),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE}, //20100505_inchul.im... output high/ pull-none  in sleep mode(for victory)
!         {S5PV210_GPG1(5),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE}, //20100505_inchul.im... output high/ pull-none  in sleep mode(for victory)
!         {S5PV210_GPG1(6),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE}, //20100505_inchul.im... output high/ pull-none  in sleep mode(for victory)
! 
! 	{S5PV210_GPG2(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
!         {S5PV210_GPG2(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! #if 1 //FROYO MERGE
!         {S5PV210_GPG2(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
! #else
!         {S5PV210_GPG2(2),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #endif
!         {S5PV210_GPG2(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
!         {S5PV210_GPG2(4),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
!         {S5PV210_GPG2(5),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
!         {S5PV210_GPG2(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! 
! 	{S5PV210_GPG3(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100506_inchul... _3_TOUCH_SDA_28V : Input & Pull-Down in Sleep Mode(for victory)
!         {S5PV210_GPG3(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! #if 1 //FROYO MERGE
!         {S5PV210_GPG3(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100506_inchul... _3_TOUCH_SCL_28V : Input & Pull-Down in Sleep Mode(for victory)
! #else
!         {S5PV210_GPG3(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
! #endif
!         {S5PV210_GPG3(3),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, //20100426_inchul... GPIO_MICBIAS_EN : Output Low & Pull-None in Sleep Mode(for victory)
!         {S5PV210_GPG3(4),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPG3(5),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #if 1 //FROYO MERGE
!         {S5PV210_GPG3(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! #else
! 		{S5PV210_GPG3(6),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE},
! #endif
! 
! 
! 	/* Alive part ending and off part start*/
! #if 1
! 	{S5PV210_GPI(0),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPI(1),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPI(2),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPI(3),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPI(4),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPI(5),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPI(6),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
! #else
! 
! 
! 	{S5PV210_GPI(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPI(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPI(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPI(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPI(4),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPI(5),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPI(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 
! 
! #endif
! #if 1 //FROYO MERGE
! 	{S5PV210_GPJ0(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, //20100722_inchul... input pull up(from HW)
!         {S5PV210_GPJ0(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
! #else
! 	{S5PV210_GPJ0(0),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! 			{S5PV210_GPJ0(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! #endif
! 	{S5PV210_GPJ0(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
! 	{S5PV210_GPJ0(3),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, //Keep previous setting for WLAN_BT_EN pin while going to sleep HERE
!         {S5PV210_GPJ0(4),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, //Keep previous setting for BT_RST pin while going to sleep HERE
! 
!         {S5PV210_GPJ0(5),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_GPJ0(6),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #if 1 //FROYO MERGE
!         {S5PV210_GPJ0(7),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! #else
! 		{S5PV210_GPJ0(7),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #endif
! 
! 	{S5PV210_GPJ1(0),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPJ1(1),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPJ1(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! #if !defined ( CONFIG_ARIES_VER_B1 ) || CONFIG_ARIES_VER_B4
!         {S5PV210_GPJ1(3),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #else
!         {S5PV210_GPJ1(3),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, //20100426_inchul... TOUCH_EN is Low in Sleep Mode(for victory)
! #endif
!         {S5PV210_GPJ1(4),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100611_inchul... input pull down(from HW)
!         {S5PV210_GPJ1(5),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! 
! 	{S5PV210_GPJ2(0),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPJ2(1),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE}, //20100507_inchul... output high/pull-none in sleep mode(for victory)
!         {S5PV210_GPJ2(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
!         {S5PV210_GPJ2(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},  //20100517_inchul... input pull down(from HW)
!         {S5PV210_GPJ2(4),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE},  //jihyon82.kim for proximity sensor
!         {S5PV210_GPJ2(5),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #if 1 //FROYO MERGE
! 		{S5PV210_GPJ2(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //hojun_kim S3C_GPIO_PULL_NONE ->S3C_GPIO_PULL_DOWN
!         {S5PV210_GPJ2(7),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100430_inchul... CAM_FLASH_SET : Input & Pull-Down in Sleep Mode(for victory)
! #else
! 		{S5PV210_GPJ2(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 		{S5PV210_GPJ2(7),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! #endif
! 
! 
! #if 1 //FROYO MERGE
! 	{S5PV210_GPJ3(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100611_inchul... input pull down(from HW)
!         {S5PV210_GPJ3(1),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPJ3(2),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPJ3(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100426_inchul... _3_GPIO_TOUCH_INT : Input & Pull-None in Sleep Mode(for victory)
! 		{S5PV210_GPJ3(4),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, //20100510_inchul... GPIO_FM_SCL_28V : input & Pull-None in Sleep Mode(for victory)
!         {S5PV210_GPJ3(5),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, //20100510_inchul... GPIO_FM_SDA_28V : input & Pull-None in Sleep Mode(for victory)
! #else
! 	{S5PV210_GPJ3(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 		{S5PV210_GPJ3(1),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! 		{S5PV210_GPJ3(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 		{S5PV210_GPJ3(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 		{S5PV210_GPJ3(4),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPJ3(5),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #endif
! 
! #if 1 //FROYO MERGE
!         {S5PV210_GPJ3(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, //20100510_inchul... GPIO_AP_PMIC_SCL : input & Pull-None in Sleep Mode(for victory)
!         {S5PV210_GPJ3(7),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, //20100510_inchul... GPIO_AP_PMIC_SDA : input & Pull-None in Sleep Mode(for victory)
! 
! 
! 	    {S5PV210_GPJ4(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, //20100510_inchul... input/pull none in sleep mode(for victory)
! 
!         {S5PV210_GPJ4(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, //20100510_inchul... input/pull none in sleep mode(for victory)
! 
! 	    {S5PV210_GPJ4(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, //20100510_inchul... input/pull none in sleep mode(for victory)
!         {S5PV210_GPJ4(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, //20100510_inchul... input/pull none in sleep mode(for victory)
!         {S5PV210_GPJ4(4),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! 
! 
! #else
!         {S5PV210_GPJ3(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPJ3(7),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
! 
! 	{S5PV210_GPJ4(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
! #if 1 //FROYO MERGE
!         {S5PV210_GPJ4(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
! #else
!         {S5PV210_GPJ4(1),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #endif
! 	{S5PV210_GPJ4(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, //20100510_inchul... input/pull none in sleep mode(for victory)
!         {S5PV210_GPJ4(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
!         {S5PV210_GPJ4(4),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! 
! #endif
! 
! 	/* memory part */
! 
! 	{S5PV210_MP01(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_MP01(1),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #if 1 //FROYO MERGE
!         {S5PV210_MP01(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! #else
!         {S5PV210_MP01(2),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #endif
!         {S5PV210_MP01(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100510_inchul... pull none in sleep mode(for victory) //20100718_hyunjooakim down
!         {S5PV210_MP01(4),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE},
!         {S5PV210_MP01(5),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! #if 1 //FROYO MERGE
!         {S5PV210_MP01(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_MP01(7),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! #else
! 		{S5PV210_MP01(6),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! 		{S5PV210_MP01(7),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #endif
! 
! 
! 	{S5PV210_MP02(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_MP02(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_MP02(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
!         {S5PV210_MP02(3),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 
! #if 1 //FROYO MERGE
! 	{S5PV210_MP03(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_MP03(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_MP03(2),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE}, //20100429_inchul.im... OneNand RP(Reset) : Output Low/Pull-None in Sleep Mode(for victory)
  #else
- 	{S5PV210_MP03(0),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
-         {S5PV210_MP03(1),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
-         {S5PV210_MP03(2),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE},
- #endif
-         {S5PV210_MP03(3),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_DOWN}, //20100504_inchul... out low in sleep mode(for victory)
-         {S5PV210_MP03(4),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
          {S5PV210_MP03(5),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE},
- #if 1 //FROYO MERGE
-         {S5PV210_MP03(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
- #else
-         {S5PV210_MP03(6),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
  #endif
!         {S5PV210_MP03(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
  
! #if 1 //FROYO MERGE
! 	{S5PV210_MP04(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, //20100510_inchul... input & Pull-None in Sleep Mode(for victory)
  #else
- 	{S5PV210_MP04(0),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- #endif
-         {S5PV210_MP04(1),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
-         {S5PV210_MP04(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, //20100510_inchul... input & Pull-None in Sleep Mode(for victory)
-         {S5PV210_MP04(3),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 	//cky 20100503 WIMAX_CON2
-         {S5PV210_MP04(4),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- #if 1 //FROYO MERGE
- 	//cky 20100503 WIMAX_WAKEUP
-         {S5PV210_MP04(5),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, // tshpark 20101020
- #else
- 		{S5PV210_MP04(5),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- #endif
- 	//cky 20100503 WIMAX_CON0
          {S5PV210_MP04(6),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #if 1 //FROYO MERGE
! 	//cky 20100503 WIMAX_CON1
!         {S5PV210_MP04(7),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #else
! 		{S5PV210_MP04(7),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #endif
! 
! #if 1 //FROYO MERGE
! 	{S5PV210_MP05(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
! 	//cky 20100503 WIMAX_IF_MODE0
!         {S5PV210_MP05(1),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
! #else
! 	{S5PV210_MP05(0),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! 		{S5PV210_MP05(1),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
! #endif
! 	//cky 20100503 WIMAX_IF_MODE1
!         {S5PV210_MP05(2),S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
!         {S5PV210_MP05(3),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE},  //20100506_inchul... AP_I2C_SCL : output high & Pull-None in Sleep Mode(for victory)
!         {S5PV210_MP05(4),S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE},  //20100506_inchul... AP_I2C_SDA : output high & Pull-None in Sleep Mode(for victory)
!         {S5PV210_MP05(5),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
!         {S5PV210_MP05(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
!         {S5PV210_MP05(7),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, //20100517_inchul... input pull down(from HW)
  
! #if 1 //FROYO MERGE
  	{S5PV210_MP06(0),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
          {S5PV210_MP06(1),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
          {S5PV210_MP06(2),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
--- 324,643 ----
  	{S5PV210_MP07(5), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP07(6), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  	{S5PV210_MP07(7), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S3C_GPIO_DRVSTR_1X, S3C_GPIO_SLEWRATE_FAST}, 
  };
  
  
! //	off part GPIO Sleep Control table
! //	{pin number,	  sleep mode conf,	  sleep pullup/down config}
! static unsigned int jupiter_sleep_gpio_table[][3] =
! {
! 	// GPA0 -------------------------------------------------
! 	{S5PV210_GPA0(0), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},	//GPIO_BT_UART_RXD
! 	{S5PV210_GPA0(1), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},	//GPIO_BT_UART_TXD
! 	{S5PV210_GPA0(2), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},	//GPIO_BT_UART_CTS
! 	{S5PV210_GPA0(3), S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},	//GPIO_BT_UART_RTS
! #if defined(CONFIG_ARIES_NTT)
! 	{S5PV210_GPA0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPA04
! 	{S5PV210_GPA0(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPA05
! 	{S5PV210_GPA0(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPA06
! 	{S5PV210_GPA0(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPA07
! #else
! 	{S5PV210_GPA0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 	{S5PV210_GPA0(5), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
! 	{S5PV210_GPA0(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 	{S5PV210_GPA0(7), S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},
! #endif
! 
! 	// GPA1 -------------------------------------------------
! 	{S5PV210_GPA1(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_AP_RXD
! 	{S5PV210_GPA1(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_AP_TXD
! 	{S5PV210_GPA1(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_AP_FLM_RXD
! 	{S5PV210_GPA1(3), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_AP_FLM_TXD
! 
! #if defined(CONFIG_ARIES_NTT)
! 	// GPB	-------------------------------------------------
! 	{S5PV210_GPB(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, 	//GPIO_CAM_VGA_nSTBY
! 	{S5PV210_GPB(1),  S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},	//GPIO_MSENSE_nRST
! 	{S5PV210_GPB(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_CAM_VGA_nRST
! #else
  	{S5PV210_GPB(0),  S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
! 	{S5PV210_GPB(1),  S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},
  	{S5PV210_GPB(2),  S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
  #endif
! 	{S5PV210_GPB(3),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},	//GPIO_BT_nRST
! 	{S5PV210_GPB(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_BOOT_MODE
! 	{S5PV210_GPB(5),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},	//GPIO_WLAN_BT_EN
! 	{S5PV210_GPB(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPB6
! 	{S5PV210_GPB(7),  S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_GPB7 (CAM_IO_EN)
! 
! 	// GPC0 -------------------------------------------------
! #if defined(CONFIG_ARIES_NTT)
! 	{S5PV210_GPC0(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPC00
! 	{S5PV210_GPC0(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPC01
! 	{S5PV210_GPC0(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPC02
! 	{S5PV210_GPC0(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPC03
! 	{S5PV210_GPC0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPC04
  #else
! 	{S5PV210_GPC0(0), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
! 	{S5PV210_GPC0(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! 	{S5PV210_GPC0(2), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
! 	{S5PV210_GPC0(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
! 	{S5PV210_GPC0(4), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
! #endif
! 
! 	// GPC1 -------------------------------------------------
! 	{S5PV210_GPC1(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPC10
! 	{S5PV210_GPC1(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPC11
! 	{S5PV210_GPC1(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPC12
! 	{S5PV210_GPC1(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPC13
! 	{S5PV210_GPC1(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPC14
! 
! 	// GPD0 -------------------------------------------------
! 	{S5PV210_GPD0(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPD00
! 	{S5PV210_GPD0(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_VIBTONE_PWM
! 	{S5PV210_GPD0(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPD02
! 	{S5PV210_GPD0(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPD03
! 
! 	// GPD1 -------------------------------------------------
! 	{S5PV210_GPD1(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_CAM_SDA_29V
! 	{S5PV210_GPD1(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_CAM_SCL_29V
! #if defined(CONFIG_ARIES_NTT)
! 	{S5PV210_GPD1(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPD12
! 	{S5PV210_GPD1(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPD13
! #else
! 	{S5PV210_GPD1(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
! 	{S5PV210_GPD1(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
! #endif
! 	{S5PV210_GPD1(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_TSP_SDA_28V
! 	{S5PV210_GPD1(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_TSP_SCL_28V
! 
! 	// GPE0 -------------------------------------------------
! 	{S5PV210_GPE0(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_CAM_PCLK
! 	{S5PV210_GPE0(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_CAM_VSYNC
! 	{S5PV210_GPE0(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_CAM_HSYNC
! 	{S5PV210_GPE0(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_CAM_D0
! 	{S5PV210_GPE0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_CAM_D1
! 	{S5PV210_GPE0(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_CAM_D2
! 	{S5PV210_GPE0(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_CAM_D3
! 	{S5PV210_GPE0(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_CAM_D4
! 
! 	// GPE1 -------------------------------------------------
! 	{S5PV210_GPE1(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_CAM_D5
! 	{S5PV210_GPE1(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_CAM_D6
! 	{S5PV210_GPE1(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_CAM_D7
! 	{S5PV210_GPE1(3), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_CAM_MCLK
! 	{S5PV210_GPE1(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPE14
! 
! 	// GPF0 -------------------------------------------------
! 	{S5PV210_GPF0(0), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_DISPLAY_HSYNC
! 	{S5PV210_GPF0(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_DISPLAY_VSYNC
! 	{S5PV210_GPF0(2), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_DISPLAY_DE
! 	{S5PV210_GPF0(3), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_DISPLAY_PCLK
! 	{S5PV210_GPF0(4), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D0
! 	{S5PV210_GPF0(5), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D1
! 	{S5PV210_GPF0(6), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D2
! 	{S5PV210_GPF0(7), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D3
! 
! 	// GPF1 -------------------------------------------------
! 	{S5PV210_GPF1(0), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D4
! 	{S5PV210_GPF1(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D5
! 	{S5PV210_GPF1(2), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D6
! 	{S5PV210_GPF1(3), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D7
! 	{S5PV210_GPF1(4), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D8
! 	{S5PV210_GPF1(5), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D9
! 	{S5PV210_GPF1(6), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D10
! 	{S5PV210_GPF1(7), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D11
! 
! 	// GPF2 -------------------------------------------------
! 	{S5PV210_GPF2(0), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D12
! 	{S5PV210_GPF2(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D13
! 	{S5PV210_GPF2(2), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D14
! 	{S5PV210_GPF2(3), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D15
! 	{S5PV210_GPF2(4), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D16
! 	{S5PV210_GPF2(5), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D17
! 	{S5PV210_GPF2(6), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D18
! 	{S5PV210_GPF2(7), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D19
! 
! 	// GPF3 -------------------------------------------------
! 	{S5PV210_GPF3(0), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D20
! 	{S5PV210_GPF3(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D21
! 	{S5PV210_GPF3(2), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D22
! 	{S5PV210_GPF3(3), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_LCD_D23
! 	{S5PV210_GPF3(4), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},	//GPIO_CODEC_LDO_EN
! 	{S5PV210_GPF3(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPF35
! 
! 	// GPG0 -------------------------------------------------
! 	{S5PV210_GPG0(0), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_NAND_CLK
! 	{S5PV210_GPG0(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_NAND_CMD
! #if defined(CONFIG_ARIES_NTT)	
! 	{S5PV210_GPG0(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_ALS_SCL_28V
! #else
! 	{S5PV210_GPG0(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	// GPIO_ALS_SCL_28V
! #endif	
! 	{S5PV210_GPG0(3), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_NAND_D0
! 	{S5PV210_GPG0(4), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_NAND_D1
! 	{S5PV210_GPG0(5), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_NAND_D2
! 	{S5PV210_GPG0(6), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_NAND_D3
! 
! 	// GPG1 -------------------------------------------------
! 	{S5PV210_GPG1(0), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_WLAN_SDIO_CLK
! 	{S5PV210_GPG1(1), S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},	//GPIO_WLAN_SDIO_CMD
! 	{S5PV210_GPG1(2), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},	//GPIO_WLAN_nRST
! 	{S5PV210_GPG1(3), S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},	//GPIO_WLAN_SDIO_D0
! 	{S5PV210_GPG1(4), S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},	//GPIO_WLAN_SDIO_D1
! 	{S5PV210_GPG1(5), S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},	//GPIO_WLAN_SDIO_D2
! 	{S5PV210_GPG1(6), S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},	//GPIO_WLAN_SDIO_D3
! 
! 	// GPG2 -------------------------------------------------
! 	{S5PV210_GPG2(0), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_T_FLASH_CLK
! 	{S5PV210_GPG2(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_T_FLASH_CMD
! #if defined(CONFIG_ARIES_NTT)	
! 	{S5PV210_GPG2(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_ALS_SDA_28V
! #else
! 	{S5PV210_GPG2(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_ALS_SDA_28V
! #endif
! 	{S5PV210_GPG2(3), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_T_FLASH_D0
! 	{S5PV210_GPG2(4), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_T_FLASH_D1
! 	{S5PV210_GPG2(5), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_T_FLASH_D2
! 	{S5PV210_GPG2(6), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_T_FLASH_D3
! 
! 	// GPG3 -------------------------------------------------
! #if defined(CONFIG_ARIES_NTT)
! 	{S5PV210_GPG3(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPG30
! 	{S5PV210_GPG3(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPG31
! 	{S5PV210_GPG3(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_FLM_SEL
! #else
! 	{S5PV210_GPG3(0), S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},
! 	{S5PV210_GPG3(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
! 	{S5PV210_GPG3(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! #endif
! 	{S5PV210_GPG3(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},		//GPIO_TA_CURRENT_SEL_AP
! 	{S5PV210_GPG3(4), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_BT_WAKE
! 	{S5PV210_GPG3(5), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_WLAN_WAKE
! 	{S5PV210_GPG3(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPG36
! 
! 
! 	// GPI --------------------------------------------------
! 	{S5PV210_GPI(0),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},		//GPIO_CODEC_I2S_CLK
! 	{S5PV210_GPI(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPI1
! 	{S5PV210_GPI(2),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},		//GPIO_CODEC_I2S_WS
! 	{S5PV210_GPI(3),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},		//GPIO_CODEC_I3S_DI
! 	{S5PV210_GPI(4),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},		//GPIO_CODEC_I3S_DO
! 	{S5PV210_GPI(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPI5
! 	{S5PV210_GPI(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPI6
! 
! 	// GPJ0 -------------------------------------------------
! 	{S5PV210_GPJ0(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_MSENSE_SCL_28V
! 	{S5PV210_GPJ0(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_MSENSE_SDA_28V
! 	{S5PV210_GPJ0(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_HWREV_MODE0
! 	{S5PV210_GPJ0(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_HWREV_MODE1
! 	{S5PV210_GPJ0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_HWREV_MODE2
! 	{S5PV210_GPJ0(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_TOUCH_INT
! 	{S5PV210_GPJ0(6), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_CAM_MEGA_EN
! 	{S5PV210_GPJ0(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_HWREV_MODE3
! 
! 	// GPJ1 -------------------------------------------------
! #if defined(CONFIG_ARIES_NTT)
! 	{S5PV210_GPJ1(0), S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},	//GPIO_PHONE_ON
! #else
! 	{S5PV210_GPJ1(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
! #endif
! 	{S5PV210_GPJ1(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_VIBTONE_EN1
! 	{S5PV210_GPJ1(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPJ12
! 	{S5PV210_GPJ1(3), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_TOUCH_EN
! #if defined(CONFIG_ARIES_NTT)
! 	{S5PV210_GPJ1(4), S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},	//GPIO_PS_ON
! #else
! 	{S5PV210_GPJ1(4), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
! #endif
! 	{S5PV210_GPJ1(5), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_CAM_MEGA_nRST
! 
! 	// GPJ2 -------------------------------------------------
! 	{S5PV210_GPJ2(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPJ20
! 	{S5PV210_GPJ2(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPJ21
! 	{S5PV210_GPJ2(2), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_OLED_DET
! 	{S5PV210_GPJ2(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPJ23
! #if defined(CONFIG_ARIES_NTT)
! 	{S5PV210_GPJ2(4), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_USIM_BOOT
! #else
! 	{S5PV210_GPJ2(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
! #endif
! 	{S5PV210_GPJ2(5), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},	//GPIO_SUB_MICBIAS_EN
! 	{S5PV210_GPJ2(6), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},	//GPIO_EARPATH_SEL
! 	{S5PV210_GPJ2(7), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_MASSMEMORY_EN
! 
! 	// GPJ3 -------------------------------------------------
! 	{S5PV210_GPJ3(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//_3_TOUCH_SDA_28V
! 	{S5PV210_GPJ3(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//_3_TOUCH_SCL_28V
! 	{S5PV210_GPJ3(2), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//_3_GPIO_TOUCH_EN
! 	{S5PV210_GPJ3(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPJ33
! 	{S5PV210_GPJ3(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_USB_SDA_28V
! 	{S5PV210_GPJ3(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_USB_SCL_28V
! 	{S5PV210_GPJ3(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_AP_SDA_28V
! 	{S5PV210_GPJ3(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_AP_SCL_28V
! 
! 	// GPJ4 -------------------------------------------------
! 	{S5PV210_GPJ4(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_AP_PMIC_SDA
! 	{S5PV210_GPJ4(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//_3_GPIO_TOUCH_INT
! 	{S5PV210_GPJ4(2), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},	//GPIO_MICBIAS_EN
! 	{S5PV210_GPJ4(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_AP_PMIC_SCL
! 	{S5PV210_GPJ4(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_GPJ44
! 
! 	// MP01 -------------------------------------------------
! 	{S5PV210_MP01(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP010
! 	{S5PV210_MP01(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_DISPLAY_CS
! 	{S5PV210_MP01(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP012
! 	{S5PV210_MP01(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_OLED_ID
! 	{S5PV210_MP01(4), S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},	//GPIO_AP_NANDCS
! 	{S5PV210_MP01(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_DIC_ID
! 	{S5PV210_MP01(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP016
! 	{S5PV210_MP01(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP017
! 
! 	// MP02 -------------------------------------------------
! 	{S5PV210_MP02(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP020
! 	{S5PV210_MP02(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP021
! 	{S5PV210_MP02(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_MP022
! 	{S5PV210_MP02(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP023
! 
! 	// MP03 -------------------------------------------------
! 	{S5PV210_MP03(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP030
! 	{S5PV210_MP03(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP031
! 	{S5PV210_MP03(2), S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},	//GPIO_MP032
! 	{S5PV210_MP03(3), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_PDA_ACTIVE
! 	{S5PV210_MP03(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_MP04
! #if defined(CONFIG_ARIES_NTT)
! 	{S5PV210_MP03(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP035
  #else
  	{S5PV210_MP03(5), S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},
  #endif
! 	{S5PV210_MP03(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP036
! 	{S5PV210_MP03(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP037
  
! 	// MP04 -------------------------------------------------
! 	{S5PV210_MP04(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP040
! 	{S5PV210_MP04(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_DISPLAY_CLK
! 	{S5PV210_MP04(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP042
! 	{S5PV210_MP04(3), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_DISPLAY_SI
! 	{S5PV210_MP04(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP044
! 	{S5PV210_MP04(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP045
! #if defined(CONFIG_ARIES_NTT)
! 	{S5PV210_MP04(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP046
  #else
  	{S5PV210_MP04(6), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
! #endif
! 	{S5PV210_MP04(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP047
  
! 	// MP05 -------------------------------------------------
! 	{S5PV210_MP05(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//FUEL_SCL_18V
! 	{S5PV210_MP05(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//FUEL_SDA_18V
! 	{S5PV210_MP05(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_AP_SCL_18V
! 	{S5PV210_MP05(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},	//GPIO_AP_SDA_18V
! 	{S5PV210_MP05(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP054
! 	{S5PV210_MP05(5), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},	//GPIO_MLCD_RST
! 	{S5PV210_MP05(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	//GPIO_MP056
! 	{S5PV210_MP05(7), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},	//GPIO_UART_SEL
! 
! 	// MP06 -------------------------------------------------
  	{S5PV210_MP06(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
  	{S5PV210_MP06(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
  	{S5PV210_MP06(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
*************** static unsigned int jupiter_sleep_gpio_t
*** 694,699 ****
--- 646,653 ----
  	{S5PV210_MP06(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
  	{S5PV210_MP06(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
  	{S5PV210_MP06(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+ 
+ 	// MP07 -------------------------------------------------
  	{S5PV210_MP07(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
  	{S5PV210_MP07(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
  	{S5PV210_MP07(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
*************** static unsigned int jupiter_sleep_gpio_t
*** 702,757 ****
          {S5PV210_MP07(5),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
          {S5PV210_MP07(6),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
          {S5PV210_MP07(7),S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
- #else
- 	{S5PV210_MP06(0),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 		{S5PV210_MP06(1),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 		{S5PV210_MP06(2),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 		{S5PV210_MP06(3),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 		{S5PV210_MP06(4),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 		{S5PV210_MP06(5),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 		{S5PV210_MP06(6),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 		{S5PV210_MP06(7),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 
- 	{S5PV210_MP07(0),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 		{S5PV210_MP07(1),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 		{S5PV210_MP07(2),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 		{S5PV210_MP07(3),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 		{S5PV210_MP07(4),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 		{S5PV210_MP07(5),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 		{S5PV210_MP07(6),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
- 		{S5PV210_MP07(7),S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}
- #endif
  };
  
  
- 
- 
- 
  //	alive part GPIO Sleep Control table
  //	{pin number,	  sleep mode conf,	sleep pin value,	  sleep pullup/down config}
- 
  static unsigned int jupiter_sleep_alive_gpio_table[][4] =
  {
! 		{S5PV210_GPB(3), S3C_GPIO_OUTPUT,S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE},
! 		//if(system_rev < 0x0A) //proximity sensor disable in rev 10
! 		//{
! 		    {S5PV210_GPH0(1), S3C_GPIO_INPUT,S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN},
! 		//}
! 	//	{S5PV210_GPH0(5), S3C_GPIO_OUTPUT,S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE},
! 		{S5PV210_GPH1(2), S3C_GPIO_INPUT,S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE},
  		{S5PV210_GPH1(7), S3C_GPIO_INPUT,S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE},
! 		{S5PV210_GPH2(0), S3C_GPIO_OUTPUT,S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE},
! 		{S5PV210_GPH2(1), S3C_GPIO_OUTPUT,S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE},
! 	  	{S5PV210_GPH2(2), S3C_GPIO_OUTPUT,S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE},
! 		{S5PV210_GPH2(3), S3C_GPIO_OUTPUT,S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE},
! 		{S5PV210_GPH2(4), S3C_GPIO_OUTPUT,S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE},
! 		{S5PV210_GPH2(5), S3C_GPIO_OUTPUT,S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE},
! 		{S5PV210_GPH3(2), S3C_GPIO_INPUT,S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE},
! 		{S5PV210_GPH3(3), S3C_GPIO_INPUT,S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE},
! 		{S5PV210_GPH3(4), S3C_GPIO_INPUT,S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE},
! 		{S5PV210_GPH3(5), S3C_GPIO_INPUT,S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE},
! 		{S5PV210_GPH3(7), S3C_GPIO_OUTPUT,S3C_GPIO_SETPIN_ONE, S3C_GPIO_PULL_NONE},
  
  };
  
  #endif
--- 656,718 ----
  	{S5PV210_MP07(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
  	{S5PV210_MP07(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
  	{S5PV210_MP07(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
  };
  
  
  //	alive part GPIO Sleep Control table
  //	{pin number,	  sleep mode conf,	sleep pin value,	  sleep pullup/down config}
  static unsigned int jupiter_sleep_alive_gpio_table[][4] =
  {
! //	{S5PV210_GPH0(0), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN}, //pwr hold
! #if defined(CONFIG_ARIES_NTT)
! 	{S5PV210_GPH0(1), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN},//GPIO_ACC_INT
! #else
! 	{S5PV210_GPH0(1), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE},
! #endif
! //	{S5PV210_GPH0(2), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN}, //GPIO_PS_VOUT
! 	{S5PV210_GPH0(3), S3C_GPIO_OUTPUT,	S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE},	//GPIO_BUCK_1_EN_A
! 	{S5PV210_GPH0(4), S3C_GPIO_OUTPUT,	S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE},	//GPIO_BUCK_1_EN_B
! 	{S5PV210_GPH0(5), S3C_GPIO_OUTPUT,	S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE},	//GPIO_BUCK_2_EN
! //	{S5PV210_GPH0(6), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN}, //GPIO_DET_35
! //	{S5PV210_GPH0(7), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN}, //GPIO_AP_PMIC_IRQ
! #if defined(CONFIG_ARIES_NTT)
! 	{S5PV210_GPH1(0), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE}, //GPIO_FUEL_INT_N
! #else
! 	{S5PV210_GPH1(0), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN},
! #endif
! 	{S5PV210_GPH1(1), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN},	//GPIO_GPH11
! 	{S5PV210_GPH1(2), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN},	//GPIO_GPH11
! //	{S5PV210_GPH1(3), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN}, //GPIO_nINT_ONEDRAM_AP
! 	{S5PV210_GPH1(4), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN},	//GPIO_GPH14
! 	{S5PV210_GPH1(5), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN},	//GPIO_GPH15
! 	{S5PV210_GPH1(6), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN},	//GPIO_GPH16
! #if defined(CONFIG_ARIES_NTT)
! 	{S5PV210_GPH1(7), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN},	//GPIO_GPH17
! #else
  	{S5PV210_GPH1(7), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE},
! #endif
  
+ 	{S5PV210_GPH2(0), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN},	//GPIO_GPH20
+ 	{S5PV210_GPH2(1), S3C_GPIO_OUTPUT,	S3C_GPIO_SETPIN_ZERO, S3C_GPIO_PULL_NONE},	//GPIO_KBC1
+ 	{S5PV210_GPH2(2), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN},	//GPIO_KBC2
+ #if defined(CONFIG_ARIES_NTT)
+ 	{S5PV210_GPH2(3), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE},	//GPIO_PHONE_ACTIVE
+ #else
+ 	{S5PV210_GPH2(3), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN},
+ #endif
+ //	{S5PV210_GPH2(4), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN}, //GPIO_BT_HOST_WAKE
+ //	{S5PV210_GPH2(5), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN}, //GPIO_BT_HOST_WAKE
+ //	{S5PV210_GPH2(6), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN}, //GPIO_nPOWER
+ //	{S5PV210_GPH2(7), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN}, //GPIO_JACK_nINT
+ 
+ 	{S5PV210_GPH3(0), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN},	//GPIO_KBR0
+ //	{S5PV210_GPH3(1), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN}, //GPIO_KBR1
+ //	{S5PV210_GPH3(2), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN}, //GPIO_KBR2
+ 	{S5PV210_GPH3(3), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN},	//GPIO_KBR3
+ //	{S5PV210_GPH3(4), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN}, //GPIO_T_FLASH_DETECT
+ //	{S5PV210_GPH3(5), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN}, //GPIO_OK_KEY
+ //	{S5PV210_GPH3(6), S3C_GPIO_INPUT,	S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN}, //GPIO_EAR_SEND_END
+ 	{S5PV210_GPH3(7), S3C_GPIO_OUTPUT,	S3C_GPIO_SETPIN_ONE,  S3C_GPIO_PULL_NONE},	//GPIO_CP_RST
  };
  
  #endif
diff -wrp Epic-Froyo/arch/arm/mach-s5pv210/include/mach/gpio-aries.h froyo-i9000/arch/arm/mach-s5pv210/include/mach/gpio-aries.h
*** Epic-Froyo/arch/arm/mach-s5pv210/include/mach/gpio-aries.h	Fri Oct  1 03:22:38 2010
--- froyo-i9000/arch/arm/mach-s5pv210/include/mach/gpio-aries.h	Tue Oct  5 05:13:33 2010
***************
*** 3,16 ****
  
  //#include <mach/gpio.h>
  
- //victory.boot
- 
- #define GPIO_WLAN_nRST_AF	1
- #define GPIO_WLAN_HOST_WAKE_AF		0xF
- #define GPIO_WLAN_WAKE_AF		1
- #define GPIO_PS_ON			S5PV210_GPJ1(4)
- #define GPIO_PS_VOUT			S5PV210_GPH0(2)
- #define GPIO_PS_VOUT_AF			0xFF
  #define GPIO_LEVEL_LOW      	0 
  #define GPIO_LEVEL_HIGH     	1
  #define GPIO_LEVEL_NONE     	2
--- 3,8 ----
***************
*** 29,43 ****
  #define GPIO_BT_UART_RTS		S5PV210_GPA0(3)
  #define GPIO_BT_UART_RTS_AF		2
  
! #define GPIO_ATSC_UART_RXD		S5PV210_GPA0(4)
! #define GPIO_ATSC_UART_RXD_AF	2
  
! #define GPIO_ATSC_UART_TXD		S5PV210_GPA0(5)
! #define GPIO_ATSC_UART_TXD_AF	2
  
! #define GPIO_GPA06		        S5PV210_GPA0(6)
  
! #define GPIO_GPA07	        	S5PV210_GPA0(7)
  
  #define GPIO_AP_RXD				S5PV210_GPA1(0)
  #define GPIO_AP_RXD_AF			2
--- 21,37 ----
  #define GPIO_BT_UART_RTS		S5PV210_GPA0(3)
  #define GPIO_BT_UART_RTS_AF		2
  
! #define GPIO_GPS_UART_RXD		S5PV210_GPA0(4)
! #define GPIO_GPS_UART_RXD_AF	2
  
! #define GPIO_GPS_UART_TXD		S5PV210_GPA0(5)
! #define GPIO_GPS_UART_TXD_AF	2
  
! #define GPIO_GPS_UART_CTS		S5PV210_GPA0(6)
! #define GPIO_GPS_UART_CTS_AF	2
  
! #define GPIO_GPS_UART_RTS		S5PV210_GPA0(7)
! #define GPIO_GPS_UART_RTS_AF	2
  
  #define GPIO_AP_RXD				S5PV210_GPA1(0)
  #define GPIO_AP_RXD_AF			2
***************
*** 45,117 ****
  #define GPIO_AP_TXD				S5PV210_GPA1(1)
  #define GPIO_AP_TXD_AF			2
  
! #define GPIO_GPA12	    		S5PV210_GPA1(2)
  
! #define GPIO_GPA13			    S5PV210_GPA1(3)
  
! #define GPIO_OJ_SPI_CLK         S5PV210_GPIO_END
  
! #define GPIO_OJ_CS      		S5PV210_GPIO_END //skylove7.lim change for victory
! #define GPIO_EAR_MIC_BIAS               S5PV210_GPB(1)//skylove7.lim change for victory
  
! #define GPIO_OJ_SPI_MISO		S5PV210_GPIO_END
  
! #define GPIO_OJ_SPI_MOSI		S5PV210_GPB(3)
  
! #define GPIO_ATSC_SPI_CLK		S5PV210_GPB(4)
  
! #define GPIO_ATSC_CS		    S5PV210_GPB(5)
  
! ////SecFeature.Victory #define GPIO_ATSC_SPI_MISO		S5PC11X_GPB(6)
! #define GPIO_BUCK_1_EN_A		S5PV210_GPB(6)//SecFeature.Victory
! #define GPIO_BUCK_1_EN_A_AF		1
  
! #define GPIO_ATSC_SPI_MOSI		S5PV210_GPB(7)
! 
! #define GPIO_HPD        		S5PV210_GPC0(0)
! #define GPIO_HPD_AF       		1
  
  #define GPIO_REC_PCM_CLK_AF		3
  
! #define GPIO_MHL_INT			S5PV210_GPC0(1)
! #define GPIO_MHL_INT_AF			0
! #define GPIO_nINT_ONEDRAM_AP_AF		0xF
! #if 1//CONFIG_ARIES_VER_B1... pfe
! #define GPIO_WIMAX_PM_SDA			S5PV210_GPC0(2)
! #define GPIO_WIMAX_PM_SDA_AF			2
! #else
! #define GPIO_MHL_RST			S5PV210_GPC0(2)
! #define GPIO_MHL_RST_AF			1
! #endif
  
! //#define GPIO_GPC03			S5PV210_GPC0(3)
! #define GPIO_WIMAX_I2C_CON		S5PV210_GPC0(3)	// Yongha for Victory WiMAX 20100208
  
! #define GPIO_WIMAX_PM_SCL			S5PV210_GPC0(4)
! #define GPIO_WIMAX_PM_SCL_AF			2
  
- #define GPIO_GPC10				S5PV210_GPC1(0)
  #define GPIO_GPC11				S5PV210_GPC1(1)
- #define GPIO_GPC12				S5PV210_GPC1(2)
- #define GPIO_GPC13				S5PV210_GPC1(3)
- #define GPIO_GPC14				S5PV210_GPC1(4)
  
  
! // MIC Configuratin
! #define GPIO_MICBIAS_EN                   S5PV210_GPG3(3)
  
  
! #define GPIO_MONOHEAD_DET		S5PV210_GPD0(0)
! #define GPIO_MONOHEAD_DET_AF	0
  
! #define GPIO_MSENSE_RST         S5PV210_GPD0(1)
! #define GPIO_MSENSE_RST_AF      1
  
! #define GPIO_VIBTONE_PWM		S5PV210_GPD0(2)
! #define GPIO_VIBTONE_PWM_AF		1
  
! #define GPIO_MSENSE_IRQ			S5PV210_GPD0(3)
! #define GPIO_MSENSE_IRQ_AF		0
  
  #define GPIO_CAM_SDA_29V		S5PV210_GPD1(0)
  #define GPIO_CAM_SDA_29V_AF		2
--- 39,97 ----
  #define GPIO_AP_TXD				S5PV210_GPA1(1)
  #define GPIO_AP_TXD_AF			2
  
! #define GPIO_AP_FLM_RXD			S5PV210_GPA1(2)
! #define GPIO_AP_FLM_RXD_AF		2
  
! #define GPIO_AP_FLM_TXD			S5PV210_GPA1(3)
! #define GPIO_AP_FLM_TXD_AF		2
  
! #define GPIO_CAM_VGA_nSTBY		S5PV210_GPB(0)
  
! #define GPIO_MSENSE_nRST		S5PV210_GPB(1)
  
! #define GPIO_CAM_VGA_nRST		S5PV210_GPB(2)
  
! #define GPIO_BT_nRST			S5PV210_GPB(3)
  
! #define GPIO_BOOT_MODE			S5PV210_GPB(4)
  
! #define GPIO_WLAN_BT_EN			S5PV210_GPB(5)
  
! #define GPIO_GPB6				S5PV210_GPB(6)
  
! #define GPIO_GPB7				S5PV210_GPB(7)
  
+ #define GPIO_REC_PCM_CLK		S5PV210_GPC0(0)
  #define GPIO_REC_PCM_CLK_AF		3
  
! #define GPIO_GPC01				S5PV210_GPC0(1)
! 
! #define GPIO_REC_PCM_SYNC		S5PV210_GPC0(2)
! #define GPIO_REC_PCM_SYNC_AF	3
! 
! #define GPIO_REC_PCM_IN			S5PV210_GPC0(3)
! #define GPIO_REC_PCM_IN_AF		3
  
! #define GPIO_REC_PCM_OUT		S5PV210_GPC0(4)
! #define GPIO_REC_PCM_OUT_AF		3
  
! #define BLOW_PCM_CLK			S5PV210_GPC1(0)
  
  #define GPIO_GPC11				S5PV210_GPC1(1)
  
+ #define GPIO_GPC12				S5PV210_GPC1(2)
  
! #define GPIO_GPC13				S5PV210_GPC1(3)
  
+ #define GPIO_GPC14				S5PV210_GPC1(4)
  
! #define GPIO_GPD00				S5PV210_GPD0(0)
  
! #define GPIO_VIBTONE_PWM		S5PV210_GPD0(1)
  
! #define GPIO_VIBTONE_PWM1		S5PV210_GPD0(2)
  
! #define GPIO_GPD03				S5PV210_GPD0(3)
  
  #define GPIO_CAM_SDA_29V		S5PV210_GPD1(0)
  #define GPIO_CAM_SDA_29V_AF		2
***************
*** 119,131 ****
  #define GPIO_CAM_SCL_29V		S5PV210_GPD1(1)
  #define GPIO_CAM_SCL_29V_AF		2
  
  
! //etinum.victory.boot
! #define AP_SDA_30V			    S5PV210_GPD1(2)
! #define AP_SDA_30V_AF		    2
! #define AP_SCL_30V			    S5PV210_GPD1(3)
! #define AP_SCL_30V_AF		    2
! 
  
  #define GPIO_TSP_SDA_28V		S5PV210_GPD1(4)
  #define GPIO_TSP_SDA_28V_AF		2	
--- 99,109 ----
  #define GPIO_CAM_SCL_29V		S5PV210_GPD1(1)
  #define GPIO_CAM_SCL_29V_AF		2
  
+ #define GPIO_FM_SDA_28V			S5PV210_GPD1(2)
+ #define GPIO_FM_SDA_28V_AF		2
  
! #define GPIO_FM_SCL_28V			S5PV210_GPD1(3)
! #define GPIO_FM_SCL_28V_AF		2
  
  #define GPIO_TSP_SDA_28V		S5PV210_GPD1(4)
  #define GPIO_TSP_SDA_28V_AF		2	
***************
*** 169,284 ****
  #define GPIO_CAM_MCLK			S5PV210_GPE1(3)
  #define GPIO_CAM_MCLK_AF		2
  
! #define GPIO_TVOUT_SEL			S5PV210_GPE1(4)
! #define GPIO_TVOUT_SEL_AF		1
  
  #define GPIO_DISPLAY_HSYNC		S5PV210_GPF0(0)
! #define GPIO_DISPLAY_HSYNC_AF	2
  
  #define GPIO_DISPLAY_VSYNC		S5PV210_GPF0(1)
! #define GPIO_DISPLAY_VSYNC_AF	2
  
  #define GPIO_DISPLAY_DE			S5PV210_GPF0(2)
! #define GPIO_DISPLAY_DE_AF		2
  
  #define GPIO_DISPLAY_PCLK		S5PV210_GPF0(3)
! #define GPIO_DISPLAY_PCLK_AF	2
  
  #define GPIO_LCD_D0				S5PV210_GPF0(4)
! #define GPIO_LCD_D0_AF			2
  
  #define GPIO_LCD_D1				S5PV210_GPF0(5)
! #define GPIO_LCD_D1_AF			2
  
  #define GPIO_LCD_D2				S5PV210_GPF0(6)
! #define GPIO_LCD_D2_AF			2
  
  #define GPIO_LCD_D3				S5PV210_GPF0(7)
! #define GPIO_LCD_D3_AF			2
  
  #define GPIO_LCD_D4				S5PV210_GPF1(0)
! #define GPIO_LCD_D4_AF			2
  
  #define GPIO_LCD_D5				S5PV210_GPF1(1)
! #define GPIO_LCD_D5_AF			2
  
  #define GPIO_LCD_D6				S5PV210_GPF1(2)
! #define GPIO_LCD_D6_AF			2
  
  #define GPIO_LCD_D7				S5PV210_GPF1(3)
! #define GPIO_LCD_D7_AF			2
  
  #define GPIO_LCD_D8				S5PV210_GPF1(4)
! #define GPIO_LCD_D8_AF			2
  
  #define GPIO_LCD_D9				S5PV210_GPF1(5)
! #define GPIO_LCD_D9_AF			2
  
  #define GPIO_LCD_D10			S5PV210_GPF1(6)
! #define GPIO_LCD_D10_AF			2
  
  #define GPIO_LCD_D11			S5PV210_GPF1(7)
! #define GPIO_LCD_D11_AF			2
  
  #define GPIO_LCD_D12			S5PV210_GPF2(0)
! #define GPIO_LCD_D12_AF			2
  
  #define GPIO_LCD_D13			S5PV210_GPF2(1)
! #define GPIO_LCD_D13_AF			2
  
  #define GPIO_LCD_D14			S5PV210_GPF2(2)
! #define GPIO_LCD_D14_AF			2
  
  #define GPIO_LCD_D15			S5PV210_GPF2(3)
! #define GPIO_LCD_D15_AF			2
  
  #define GPIO_LCD_D16			S5PV210_GPF2(4)
! #define GPIO_LCD_D16_AF			2
  
  #define GPIO_LCD_D17			S5PV210_GPF2(5)
! #define GPIO_LCD_D17_AF			2
  
  #define GPIO_LCD_D18			S5PV210_GPF2(6)
! #define GPIO_LCD_D18_AF			2
  
  #define GPIO_LCD_D19			S5PV210_GPF2(7)
! #define GPIO_LCD_D19_AF			2
  
  #define GPIO_LCD_D20			S5PV210_GPF3(0)
! #define GPIO_LCD_D20_AF			2
  
  #define GPIO_LCD_D21			S5PV210_GPF3(1)
! #define GPIO_LCD_D21_AF			2
  
  #define GPIO_LCD_D22			S5PV210_GPF3(2)
! #define GPIO_LCD_D22_AF			2
  
  #define GPIO_LCD_D23			S5PV210_GPF3(3)
! #define GPIO_LCD_D23_AF			2
  
  #define GPIO_CODEC_LDO_EN		S5PV210_GPF3(4)
  
  #define GPIO_GPF35				S5PV210_GPF3(5)
  
! #define GPIO_WIMAX_SDIO_CLK		S5PV210_GPG0(0)
! #define GPIO_WIMAX_SDIO_CLK_AF	2
  
! #define GPIO_WIMAX_SDIO_CMD		S5PV210_GPG0(1)
! #define GPIO_WIMAX_SDIO_CMD_AF	2
  
! #define GPIO_GPG02				S5PV210_GPG0(2)
  
! #define GPIO_WIMAX_SDIO_D0		S5PV210_GPG0(3)
! #define GPIO_WIMAX_SDIO_D0_AF	2
  
! #define GPIO_WIMAX_SDIO_D1	    S5PV210_GPG0(4)
! #define GPIO_WIMAX_SDIO_D1_AF	2
  
! #define GPIO_WIMAX_SDIO_D2		S5PV210_GPG0(5)
! #define GPIO_WIMAX_SDIO_D2_AF	2
  
! #define GPIO_WIMAX_SDIO_D3		S5PV210_GPG0(6)
! #define GPIO_WIMAX_SDIO_D3_AF	2
  
  #define GPIO_WLAN_SDIO_CLK      S5PV210_GPG1(0)
  #define GPIO_WLAN_SDIO_CLK_AF   2
--- 147,261 ----
  #define GPIO_CAM_MCLK			S5PV210_GPE1(3)
  #define GPIO_CAM_MCLK_AF		2
  
! #define GPIO_GPE14				S5PV210_GPE1(4)
  
  #define GPIO_DISPLAY_HSYNC		S5PV210_GPF0(0)
! #define GPIO_DISPLAY_HSYNC_AF	S3C_GPIO_SFN(2)
  
  #define GPIO_DISPLAY_VSYNC		S5PV210_GPF0(1)
! #define GPIO_DISPLAY_VSYNC_AF	S3C_GPIO_SFN(2)
  
  #define GPIO_DISPLAY_DE			S5PV210_GPF0(2)
! #define GPIO_DISPLAY_DE_AF		S3C_GPIO_SFN(2)
  
  #define GPIO_DISPLAY_PCLK		S5PV210_GPF0(3)
! #define GPIO_DISPLAY_PCLK_AF	S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D0				S5PV210_GPF0(4)
! #define GPIO_LCD_D0_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D1				S5PV210_GPF0(5)
! #define GPIO_LCD_D1_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D2				S5PV210_GPF0(6)
! #define GPIO_LCD_D2_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D3				S5PV210_GPF0(7)
! #define GPIO_LCD_D3_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D4				S5PV210_GPF1(0)
! #define GPIO_LCD_D4_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D5				S5PV210_GPF1(1)
! #define GPIO_LCD_D5_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D6				S5PV210_GPF1(2)
! #define GPIO_LCD_D6_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D7				S5PV210_GPF1(3)
! #define GPIO_LCD_D7_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D8				S5PV210_GPF1(4)
! #define GPIO_LCD_D8_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D9				S5PV210_GPF1(5)
! #define GPIO_LCD_D9_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D10			S5PV210_GPF1(6)
! #define GPIO_LCD_D10_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D11			S5PV210_GPF1(7)
! #define GPIO_LCD_D11_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D12			S5PV210_GPF2(0)
! #define GPIO_LCD_D12_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D13			S5PV210_GPF2(1)
! #define GPIO_LCD_D13_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D14			S5PV210_GPF2(2)
! #define GPIO_LCD_D14_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D15			S5PV210_GPF2(3)
! #define GPIO_LCD_D15_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D16			S5PV210_GPF2(4)
! #define GPIO_LCD_D16_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D17			S5PV210_GPF2(5)
! #define GPIO_LCD_D17_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D18			S5PV210_GPF2(6)
! #define GPIO_LCD_D18_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D19			S5PV210_GPF2(7)
! #define GPIO_LCD_D19_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D20			S5PV210_GPF3(0)
! #define GPIO_LCD_D20_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D21			S5PV210_GPF3(1)
! #define GPIO_LCD_D21_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D22			S5PV210_GPF3(2)
! #define GPIO_LCD_D22_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_LCD_D23			S5PV210_GPF3(3)
! #define GPIO_LCD_D23_AF			S3C_GPIO_SFN(2)
  
  #define GPIO_CODEC_LDO_EN		S5PV210_GPF3(4)
  
  #define GPIO_GPF35				S5PV210_GPF3(5)
  
! #define GPIO_NAND_CLK			S5PV210_GPG0(0)
! #define GPIO_NAND_CLK_AF		2
  
! #define GPIO_NAND_CMD			S5PV210_GPG0(1)
! #define GPIO_NAND_CMD_AF		2
  
! #define GPIO_ALS_SCL_28V		S5PV210_GPG0(2)
  
! #define GPIO_NAND_D0			S5PV210_GPG0(3)
! #define GPIO_NAND_D0_AF			2
  
! #define GPIO_NAND_D1			S5PV210_GPG0(4)
! #define GPIO_NAND_D1_AF			2
  
! #define GPIO_NAND_D2			S5PV210_GPG0(5)
! #define GPIO_NAND_D2_AF			2
  
! #define GPIO_NAND_D3			S5PV210_GPG0(6)
! #define GPIO_NAND_D3_AF			2
  
  #define GPIO_WLAN_SDIO_CLK      S5PV210_GPG1(0)
  #define GPIO_WLAN_SDIO_CLK_AF   2
***************
*** 287,292 ****
--- 264,270 ----
  #define GPIO_WLAN_SDIO_CMD_AF   2
  
  #define GPIO_WLAN_nRST          S5PV210_GPG1(2)
+ #define GPIO_WLAN_nRST_AF	1
  
  #define GPIO_WLAN_SDIO_D0       S5PV210_GPG1(3)
  #define GPIO_WLAN_SDIO_D0_AF    2
***************
*** 306,312 ****
  #define GPIO_T_FLASH_CMD        S5PV210_GPG2(1)
  #define GPIO_T_FLASH_CMD_AF		2
  
! #define GPIO_GPG22              S5PV210_GPG2(2)
  
  #define GPIO_T_FLASH_D0         S5PV210_GPG2(3)
  #define GPIO_T_FLASH_D0_AF		2
--- 284,290 ----
  #define GPIO_T_FLASH_CMD        S5PV210_GPG2(1)
  #define GPIO_T_FLASH_CMD_AF		2
  
! #define GPIO_ALS_SDA_28V		S5PV210_GPG2(2)
  
  #define GPIO_T_FLASH_D0         S5PV210_GPG2(3)
  #define GPIO_T_FLASH_D0_AF		2
***************
*** 320,366 ****
  #define GPIO_T_FLASH_D3         S5PV210_GPG2(6)
  #define GPIO_T_FLASH_D3_AF		2
  
! #define GPIO_NAND_SDIO_CLK		S5PV210_GPG3(0)
! #define GPIO_NAND_SDIO_CLK_AF	2
  
! #define GPIO_NAND_SDIO_CMD		S5PV210_GPG3(1)
! #define GPIO_NAND_SDIO_CMD_AF	2
  
! #define GPIO_GPG32              S5PV210_GPG3(2)
  
! #if 0 //for victory
! #define GPIO_NAND_SDIO_D0   	S5PV210_GPG3(3)
! #define GPIO_NAND_SDIO_D0_AF   	2
! #else 
! #define GPIO_MICBIAS_EN			  S5PV210_GPG3(3)
! #endif 
  
! #define GPIO_NAND_SDIO_D1   	S5PV210_GPG3(4)
! #define GPIO_NAND_SDIO_D1_AF   	2
! #define GPIO_NAND_SDIO_D2   	S5PV210_GPG3(5)
! #define GPIO_NAND_SDIO_D2_AF   	2
! #define GPIO_NAND_SDIO_D3   	S5PV210_GPG3(6)
! #define GPIO_NAND_SDIO_D3_AF   	2
  
  
  #define GPIO_AP_PS_HOLD			S5PV210_GPH0(0)
  
! //#define GPIO_ACC_INT			S5PV210_GPH0(1)
! 
! //#define GPIO_T_FLASH_DETECT		S5PC11X_GPH0(2)
! //#define GPIO_T_FLASH_DETECT_AF  0
  
! #define GPIO_3P_SEND_END		S5PV210_GPH0(2)
! #define GPIO_3P_SEND_END_AF 	0
  
! #define GPIO_WLAN_HOST_WAKE		S5PV210_GPH0(3)//SecFeature.Victory
! //SecFeature.Victory #define GPIO_BUCK_1_EN_A		S5PC11X_GPH0(3)
  
  #define GPIO_BUCK_1_EN_B		S5PV210_GPH0(4)
- #define GPIO_BUCK_1_EN_B_AF		1
  
  #define GPIO_BUCK_2_EN			S5PV210_GPH0(5)
- #define GPIO_BUCK_2_EN_AF		1
  
  #define GPIO_DET_35				S5PV210_GPH0(6)
  #define GPIO_DET_35_AF			0xFF
--- 298,328 ----
  #define GPIO_T_FLASH_D3         S5PV210_GPG2(6)
  #define GPIO_T_FLASH_D3_AF		2
  
! #define GPIO_GPS_nRST			S5PV210_GPG3(0)
  
! #define GPIO_GPS_PWR_EN			S5PV210_GPG3(1)
  
! #define GPIO_GPS_CLK_INT		S5PV210_GPG3(2)
  
! #define GPIO_TA_CURRENT_SEL_AP	S5PV210_GPG3(3)
  
! #define GPIO_BT_WAKE			S5PV210_GPG3(4)
  
+ #define GPIO_WLAN_WAKE			S5PV210_GPG3(5)
+ #define GPIO_WLAN_WAKE_AF		1
  
  #define GPIO_AP_PS_HOLD			S5PV210_GPH0(0)
  
! #define GPIO_ACC_INT			S5PV210_GPH0(1)
  
! #define GPIO_PS_VOUT			S5PV210_GPH0(2)
! #define GPIO_PS_VOUT_AF			0xFF
  
! #define GPIO_BUCK_1_EN_A		S5PV210_GPH0(3)
  
  #define GPIO_BUCK_1_EN_B		S5PV210_GPH0(4)
  
  #define GPIO_BUCK_2_EN			S5PV210_GPH0(5)
  
  #define GPIO_DET_35				S5PV210_GPH0(6)
  #define GPIO_DET_35_AF			0xFF
***************
*** 368,403 ****
  #define GPIO_AP_PMIC_IRQ		S5PV210_GPH0(7)
  #define GPIO_AP_PMIC_IRQ_AF		0xFF
  
! //SecFeature.Victory #define GPIO_WLAN_HOST_WAKE		S5PC11X_GPH1(0)
! //#define BT_HOST_WAKE			S5PC11X_GPH1(1)
! #define GPIO_WIMAX_RESET_N		S5PV210_GPH1(1)	// Yongha for Victory WiMAX 20100208
  
  
! //#define GPIO_nPOWER				S5PV210_GPH1(2)
! #define GPIO_GAUGE_ALT			S5PV210_GPH1(2)	// hanapark (Victory Fuel Gauge: MAX17043)
! 
  
  #define GPIO_nINT_ONEDRAM_AP		S5PV210_GPH1(3)
  
  
! #if 1 //FROYO MERGE
! #define GPIO_WIMAX_EN			S5PV210_GPH1(4)
! #endif
! 
! #if 1 //FROYO MERGE
! #define GPIO_UART_SEL			S5PV210_GPH1(5)
! #else
! #define GPIO_JACK_nINT			S5PV210_GPH1(5)
! //#define GPIO_JACK_nINT			S5PV210_GPH2(7)
! #endif
  
! 
! #if 1 //FROYO MERGE
! #define GPIO_WIMAX_INT			S5PV210_GPH1(6)	// cky 20100414 only support rev02 or higher
! #else
! //#define GPIO_EAR_SEND_END		S5PV210_GPH1(6)
! #define GPIO_WIMAX_EN		S5PV210_GPH1(6)	// Yongha for Victory WiMAX 20100208
! #endif
  
  #define GPIO_PHONE_ACTIVE		S5PV210_GPH1(7)
  
--- 330,349 ----
  #define GPIO_AP_PMIC_IRQ		S5PV210_GPH0(7)
  #define GPIO_AP_PMIC_IRQ_AF		0xFF
  
! #define GPIO_GPH10				S5PV210_GPH1(0)
  
+ #define GPIO_GPH11				S5PV210_GPH1(1)
  
! #define GPIO_GPH12				S5PV210_GPH1(2)	
  
  #define GPIO_nINT_ONEDRAM_AP		S5PV210_GPH1(3)
+ #define GPIO_nINT_ONEDRAM_AP_AF	0xF
  
+ #define GPIO_GPH14				S5PV210_GPH1(4)
  
! #define GPIO_GPH15				S5PV210_GPH1(5)
  
! #define GPIO_GPH16				S5PV210_GPH1(6)
  
  #define GPIO_PHONE_ACTIVE		S5PV210_GPH1(7)
  
***************
*** 407,446 ****
  #define GPIO_KBC1				S5PV210_GPH2(1)
  #define GPIO_KBC1_AF			3
  
- 
- 
  #define GPIO_KBC2				S5PV210_GPH2(2)
  #define GPIO_KBC2_AF			3
  
! #define GPIO_KBC3				S5PV210_GPH2(3)
! #define GPIO_KBC3_AF			3
  
! #if 1 //FROYO MERGE
! #define GPIO_JACK_nINT			S5PV210_GPH2(7)
! #define GPIO_JACK_nINT_AF               (0xf << 28) // for victory change nandu
! #endif
  
  
  
  
! #define GPIO_JACK_NINT          S5PV210_GPH3(0)
! #define GPIO_SUB_ON             S5PV210_GPH3(1)
! #define GIO_FLM                 S5PV210_GPH3(2)
! 
! #define GPIO_KEY_INT            S5PV210_GPH3(3)
! #define GPIO_KEY_INT_AF         0xf
! #define GPIO_KEY_I2C_SCL        S5PV210_GPH3(4)
! #define GPIO_KEY_I2C_SCL_AF     1
! #define GPIO_KEY_I2C_SDA        S5PV210_GPH3(5)
! #define GPIO_KEY_I2C_SDA_AF     1
  
! #define GPIO_EAR_SEND_END_OPEN		S5PV210_GPH2(2)
! #define GPIO_EAR_SEND_END_OPEN_AF	0xFF
  
! #define GPIO_EAR_SEND_END_SHORT		S5PV210_GPH3(6)
! #define GPIO_EAR_SEND_END_SHORT_AF	0xFF
  
  
  #define GPIO_CP_RST				S5PV210_GPH3(7)
  
  #define GPIO_CODEC_I2S_CLK		S5PV210_GPI(0)
--- 353,392 ----
  #define GPIO_KBC1				S5PV210_GPH2(1)
  #define GPIO_KBC1_AF			3
  
  #define GPIO_KBC2				S5PV210_GPH2(2)
  #define GPIO_KBC2_AF			3
  
! #define GPIO_GPH23				S5PV210_GPH2(3)
  
! #define GPIO_WLAN_HOST_WAKE		S5PV210_GPH2(4)
! #define GPIO_WLAN_HOST_WAKE_AF		0xF
! 
! #define GPIO_BT_HOST_WAKE			S5PV210_GPH2(5)
! #define GPIO_BT_HOST_WAKE_AF		0xF
  
+ #define GPIO_nPOWER				S5PV210_GPH2(6)
+ 
+ #define GPIO_JACK_nINT			S5PV210_GPH2(7)
+ #define GPIO_JACK_nINT_AF			0xF
  
+ #define GPIO_KBR0				S5PV210_GPH3(0)
+ #define GPIO_KBR0_AF			3
  
+ #define GPIO_KBR1				S5PV210_GPH3(1)
+ #define GPIO_KBR1_AF			3
  
! #define GPIO_KBR2				S5PV210_GPH3(2)
! #define GPIO_KBR2_AF			3
  
! #define GPIO_KBR3				S5PV210_GPH3(3)
! #define GPIO_KBR3_AF			3
  
! #define GPIO_T_FLASH_DETECT		S5PV210_GPH3(4)
  
+ #define GPIO_MSENSE_IRQ			S5PV210_GPH3(5)
  
+ #define GPIO_EAR_SEND_END		S5PV210_GPH3(6)
+ #define GPIO_EAR_SEND_END_AF	0xFF
  #define GPIO_CP_RST				S5PV210_GPH3(7)
  
  #define GPIO_CODEC_I2S_CLK		S5PV210_GPI(0)
***************
*** 461,566 ****
  
  #define GPIO_GPI6				S5PV210_GPI(6)
  
! #define GPIO_TA_CURRNET_SEL		S5PV210_GPJ0(0)
  
! //#define GPIO_PS_VOUT			S5PV210_GPJ0(1)
! #define GPIO_PS_VOUT_AF			0xFF//0 //jihyon82.kim
  
! #define GPIO_BOOT               S5PV210_GPJ0(2)
  
! //#define	GPIO_WLAN_BT_EN		    S5PC11X_GPB(5)
! #define	GPIO_WLAN_BT_EN		    S5PV210_GPJ0(3)
! 
! #define GPIO_BT_nRST    		S5PV210_GPJ0(4)
  
  #define GPIO_TOUCH_INT			S5PV210_GPJ0(5)
  
  #define GPIO_CAM_MEGA_EN		S5PV210_GPJ0(6)
  
! //#define GPIO_EAR_MIC_BIAS   	S5PV210_GPJ0(7)////skylove7.lim change for victory
  
  #define GPIO_PHONE_ON			S5PV210_GPJ1(0)
  
  #define GPIO_VIBTONE_EN1		S5PV210_GPJ1(1)
  
! #define GPIO_OJ_MOTION			S5PV210_GPJ1(2)
  
  #define GPIO_TOUCH_EN			S5PV210_GPJ1(3)
  #define	GPIO_TOUCH_EN_AF		1
  
! 
! #define GPIO_HALL_SW            S5PV210_GPJ1(4)
  
  #define GPIO_CAM_MEGA_nRST		S5PV210_GPJ1(5)
  
! #define GPIO_USB_HS_SEL         S5PV210_GPJ2(0)
! #define GPIO_USB_HS_SW_EN_N		S5PV210_GPJ2(1)
! 
! #define GPIO_WIMAX_USB_EN        S5PV210_GPJ2(2)
  
! #define GPIO_MC_SEL             S5PV210_GPJ2(3)
! #define GPIO_ALS_EN             S5PV210_GPJ2(4)
  
! //#define GPIO_OLED_DET			S5PC11X_GPJ2(2)
! //#define GPIO_CODEC_XTAL_EN		S5PV210_GPJ2(3)
! //#define GPIO_FM_INT				S5PV210_GPJ2(4)
  
! //#define GPIO_SUB_KEY_LED_ON     S5PC11X_GPJ2(5)
! #define GPIO_SVC_LED_RED			S5PV210_GPJ2(5)	// hanapark SVC LED
  
! #define GPIO_KEY_LED_ON         S5PV210_GPJ2(6)
! #define GPIO_MAIN_KEY_LED_ON    S5PV210_GPJ2(6)
  
! //#define GPIO_CAM_FLASH_EN		S5PV210_GPJ2(0)
! //#define GPIO_CAM_FLASH_SET		S5PV210_GPJ2(1)
! #define GPIO_CAM_FLASH_EN		S5PV210_GPJ2(7)
! #define GPIO_CAM_FLASH_SET		S5PV210_GPJ3(0)
  
  
! #define GPIO_UART_SEL1			S5PV210_GPJ3(1)
  
! //#define GPIO_OJ_SHUTDOWN		S5PV210_GPJ3(2)
! #define GPIO_SVC_LED_BLUE		S5PV210_GPJ3(2)	// hanapark SVC LED
  
! #define GPIO_ATSC_SPI_IRQ		S5PV210_GPJ3(3)
  
! #define GPIO_FM_SCL_28V			S5PV210_GPJ3(4) //jihyon82.kim
! #define GPIO_FM_SCL_28V_AF		2
  
! #define GPIO_FM_SDA_28V			S5PV210_GPJ3(5)//jihyon82.kim
! #define GPIO_FM_SDA_28V_AF		2
  
! #if 1 //FROYO MERGE
! #define GPIO_AP_PMIC_SCL		S5PV210_GPJ3(6)
! #define GPIO_AP_PMIC_SDA	    S5PV210_GPJ3(7)
! #else
! #define GPIO_DMB_EN			    S5PV210_GPJ3(6)
! #define GPIO_DMB_RST		    S5PV210_GPJ3(7)
! #endif
  
  
! #define GPIO_NWLAN_WAKE			S5PV210_GPJ4(0)
! //#define GPIO_AP_PMIC_SDA		S5PV210_GPJ4(0)
  
! #if 1 //FROYO MERGE
! #else
! #define GPIO_AP_PMIC_SDA		S5PV210_GPJ4(1)
! #endif
  
- #if 1 //FROYO MERGE
- #else
  #define GPIO_AP_PMIC_SCL		S5PV210_GPJ4(3)
- #endif
- #define GPIO_BT_WAKE			S5PV210_GPG3(4)
- #define GPIO_WLAN_WAKE		S5PV210_GPG3(5)
  
! //#define GPIO_BT_WAKE			S5PV210_GPJ4(4)
! //#define GPIO_TV_EN				S5PV210_GPJ4(4)
  
  #define GPIO_MP010			    S5PV210_MP01(0)
  
  #define GPIO_DISPLAY_CS			S5PV210_MP01(1)
- 
  #define GPIO_DISPLAY_CS_AF		S3C_GPIO_SFN(1)
  
  #define GPIO_SUB_DISPLAY_CS		S5PV210_MP01(2)
--- 407,485 ----
  
  #define GPIO_GPI6				S5PV210_GPI(6)
  
! #define GPIO_MSENSE_SCL_28V				S5PV210_GPJ0(0)
! #define GPIO_MSENSE_SDA_28V				S5PV210_GPJ0(1)
  
! #define GPIO_HWREV_MODE0		S5PV210_GPJ0(2)
  
! #define GPIO_HWREV_MODE1		S5PV210_GPJ0(3)
  
! #define GPIO_HWREV_MODE2		S5PV210_GPJ0(4)
  
  #define GPIO_TOUCH_INT			S5PV210_GPJ0(5)
  
  #define GPIO_CAM_MEGA_EN		S5PV210_GPJ0(6)
  
! #define GPIO_HWREV_MODE3		S5PV210_GPJ0(7)
  
  #define GPIO_PHONE_ON			S5PV210_GPJ1(0)
  
  #define GPIO_VIBTONE_EN1		S5PV210_GPJ1(1)
  
! #define GPIO_GPJ30			S5PV210_GPJ1(2)
  
  #define GPIO_TOUCH_EN			S5PV210_GPJ1(3)
  #define	GPIO_TOUCH_EN_AF		1
  
! #define GPIO_PS_ON			S5PV210_GPJ1(4)
  
  #define GPIO_CAM_MEGA_nRST		S5PV210_GPJ1(5)
  
! #define GPIO_CAM_FLASH_EN		S5PV210_GPJ2(0)
  
! #define GPIO_CAM_FLASH_SET		S5PV210_GPJ2(1)
  
! #define GPIO_OLED_DET			S5PV210_GPJ2(2)
  
! #define GPIO_CODEC_XTAL_EN		S5PV210_GPJ2(3)
  
! #define GPIO_FM_INT				S5PV210_GPJ2(4)
  
! #define GPIO_FM_RST				S5PV210_GPJ2(5)
  
+ #define GPIO_EARPATH_SEL		S5PV210_GPJ2(6)
  
! #define GPIO_MASSMEMORY_EN		S5PV210_GPJ2(7)
  
! #define _3_TOUCH_SDA_28V				S5PV210_GPJ3(0)
! #define _3_TOUCH_SCL_28V				S5PV210_GPJ3(1)
! #define _3_GPIO_TOUCH_EN			S5PV210_GPJ3(2)
! #define _3_GPIO_TOUCH_EN_AF		1
! #define _3_GPIO_TOUCH_CE				S5PV210_GPJ3(3)
! #define _3_GPIO_TOUCH_ST_AF		1
  
! #define GPIO_USB_SDA_28V		S5PV210_GPJ3(4)
  
! #define GPIO_USB_SCL_28V		S5PV210_GPJ3(5)
  
! #define GPIO_AP_SDA_28V			S5PV210_GPJ3(6)
  
! #define GPIO_AP_SCL_28V			S5PV210_GPJ3(7)
  
+ #define GPIO_AP_PMIC_SDA		S5PV210_GPJ4(0)
  
! #define  _3_GPIO_TOUCH_INT		S5PV210_GPJ4(1)
! #define _3_GPIO_TOUCH_INT_AF		S3C_GPIO_SFN(0xf)
  
! #define GPIO_MICBIAS_EN			S5PV210_GPJ4(2)
  
  #define GPIO_AP_PMIC_SCL		S5PV210_GPJ4(3)
  
! #define GPIO_TV_EN				S5PV210_GPJ4(4)
  
  #define GPIO_MP010			S5PV210_MP01(0)
  
  #define GPIO_DISPLAY_CS			S5PV210_MP01(1)
  #define GPIO_DISPLAY_CS_AF		S3C_GPIO_SFN(1)
  
  #define GPIO_SUB_DISPLAY_CS		S5PV210_MP01(2)
***************
*** 570,576 ****
  #define GPIO_AP_NANDCS			S5PV210_MP01(4)
  #define GPIO_AP_NANDCS_AF		5
  
! #define GPIO_MP015				S5PV210_MP01(5)
  
  #define GPIO_MP016				S5PV210_MP01(6)
  
--- 489,495 ----
  #define GPIO_AP_NANDCS			S5PV210_MP01(4)
  #define GPIO_AP_NANDCS_AF		5
  
! #define GPIO_DIC_ID				S5PV210_MP01(5)
  
  #define GPIO_MP016				S5PV210_MP01(6)
  
***************
*** 594,667 ****
  
  #define GPIO_VCC_18V_PDA		S5PV210_MP03(4)
  
! #define GPIO_MP035  			S5PV210_MP03(5)
  
  #define GPIO_MP036				S5PV210_MP03(6)
  
! #define GPIO_PCM_SEL			S5PV210_MP03(7)  //suik_Check Sound
! #define GPIO_MP037				S5PV210_MP03(7)
  
! //#define GPIO_MP040  			S5PC11X_MP04(0)
! #define FUEL_SCL_18V		S5PV210_MP04(0)
  
  #define GPIO_DISPLAY_CLK		S5PV210_MP04(1)
- 
  #define GPIO_DISPLAY_CLK_AF		S3C_GPIO_SFN(1)
  
! //#define GPIO_MP042				S5PV210_MP04(2)
! #define FUEL_SDA_18V		S5PV210_MP04(2)
  
  #define GPIO_DISPLAY_SI			S5PV210_MP04(3)
- 
  #define GPIO_DISPLAY_SI_AF		S3C_GPIO_SFN(1)
  
! #define GPIO_WIMAX_CON2			S5PV210_MP04(4)
! 
! //#define GPIO_LVDS_RST			S5PV210_MP04(5)
! #define GPIO_WIMAX_WAKEUP       S5PV210_MP04(5)
  
! //#define GPIO_GPS_CLK_EN			S5PV210_MP04(6)
! #define GPIO_WIMAX_CON0			S5PV210_MP04(6)
  
! //#define GPIO_MHL_RST			S5PV210_MP04(7)
! #define GPIO_WIMAX_CON1			S5PV210_MP04(7)
  
! #if 1	//cky 20100414	only support rev02 or higher
! #else
! #define GPIO_WIMAX_INT          S5PV210_MP05(0)
! #endif
  
! #define GPIO_WIMAX_IF_MODE0     S5PV210_MP05(1)
! #define GPIO_WIMAX_IF_MODE1     S5PV210_MP05(2)
  
  
! #define GPIO_AP_SCL_18V			S5PV210_MP05(3)
! #define GPIO_AP_SDA_18V			S5PV210_MP05(4)
  
  
  #define GPIO_MLCD_RST			S5PV210_MP05(5)
  
! #define GPIO_VGH				S5PV210_MP05(6)
  
- #if 1 //UART_CHANGE
- #else
  #define GPIO_UART_SEL			S5PV210_MP05(7)
- #endif
  
! 
! #define AP_I2C_SDA              S5PV210_MP05(4)
! #define AP_I2C_SCL              S5PV210_MP05(3)
! 
! #if 0 //etinum.victory.boot
  #define AP_I2C_SDA_28V			S5PV210_GPJ3(6)
  #define	AP_I2C_SCL_28V			S5PV210_GPJ3(7)
- #endif
  
! #define PMIC_I2C_SDA            S5PV210_GPJ4(1) //victory.boot
  #define PMIC_I2C_SCL            S5PV210_GPJ4(3)
  
  #define GPIO_TOUCH_INT			S5PV210_GPJ0(5)
! #define	GPIO_TOUCH_INT_AF		0xFF //victory.boot temp
  
  /* uart 0~3 */
  #define 	GPIO_BT_RXD 		S5PV210_GPA0(0)
--- 513,571 ----
  
  #define GPIO_VCC_18V_PDA		S5PV210_MP03(4)
  
! #define GPIO_CP_nRST			S5PV210_MP03(5)
  
  #define GPIO_MP036				S5PV210_MP03(6)
  
! #define GPIO_PCM_SEL			S5PV210_MP03(7)
  
! #define GPIO_USB_SEL			S5PV210_MP04(0)
  
  #define GPIO_DISPLAY_CLK		S5PV210_MP04(1)
  #define GPIO_DISPLAY_CLK_AF		S3C_GPIO_SFN(1)
  
! #define GPIO_MP042				S5PV210_MP04(2)
  
  #define GPIO_DISPLAY_SI			S5PV210_MP04(3)
  #define GPIO_DISPLAY_SI_AF		S3C_GPIO_SFN(1)
  
! #define GPIO_MP044				S5PV210_MP04(4)
  
! #define GPIO_LVDS_RST			S5PV210_MP04(5)
  
! #define GPIO_GPS_CLK_EN			S5PV210_MP04(6)
  
! #define GPIO_MHL_RST			S5PV210_MP04(7)
  
! #define FUEL_SCL_18V		S5PV210_MP05(0)
! #define FUEL_SDA_18V	S5PV210_MP05(1)
  
+ #define GPIO_AP_SCL_18V			S5PV210_MP05(2)
  
! #define GPIO_AP_SDA_18V			S5PV210_MP05(3)
  
+ #define GPIO_MP054				S5PV210_MP05(4)
  
  #define GPIO_MLCD_RST			S5PV210_MP05(5)
+ #define GPIO_MLCD_RST_AF		S3C_GPIO_SFN(1)
  
! #define GPIO_MP056				S5PV210_MP05(6)
  
  #define GPIO_UART_SEL			S5PV210_MP05(7)
  
! #define AP_I2C_SDA              S5PV210_MP05(3)
! #define AP_I2C_SCL              S5PV210_MP05(2)
  #define AP_I2C_SDA_28V			S5PV210_GPJ3(6)
  #define	AP_I2C_SCL_28V			S5PV210_GPJ3(7)
  
! #define PMIC_I2C_SDA            S5PV210_GPJ4(0)
  #define PMIC_I2C_SCL            S5PV210_GPJ4(3)
  
  #define GPIO_TOUCH_INT			S5PV210_GPJ0(5)
! #define	GPIO_TOUCH_INT_AF		0xFF
! 
! #define	GPIO_TOUCH_RST			S5PV210_GPB(6)
! #define	GPIO_TOUCH_ST_AF		1
  
  /* uart 0~3 */
  #define 	GPIO_BT_RXD 		S5PV210_GPA0(0)
***************
*** 702,755 ****
  #define		GPIO_N_POWER		S5PV210_GPH2(6)
  #define		GPIO_N_POWER_AF		2 //?
  
  
! // dummies
! #define GPIO_EAR_SEL			S5PV210_GPIO_END //victory.boot check S5PC11X_GPJ1(4)
! #define GPIO_FM_RST				S5PV210_GPIO_END //victory.boot check
! #define GPIO_EARPATH_SEL		S5PV210_GPIO_END //victory.boot check
! #define GPIO_FM_INT             S5PV210_GPIO_END
! #define GPIO_USB_SDA_28V S5PV210_GPIO_END
! #define GPIO_USB_SCL_28V S5PV210_GPIO_END
! #define GPIO_CAM_VGA_nSTBY S5PV210_GPB(2) //S5PC11X_GPIO_END
! #define GPIO_CAM_VGA_nRST S5PV210_GPB(0) //S5PC11X_GPIO_END
! #define GPIO_ALS_SDA_28V S5PV210_GPIO_END
! #define GPIO_ALS_SCL_28V S5PV210_GPIO_END
! #define GPIO_MSENSE_SDA_28V S5PV210_GPIO_END
! #define GPIO_MSENSE_SCL_28V S5PV210_GPIO_END
! #define GPIO_GPS_nRST S5PV210_GPIO_END
! #define GPIO_GPS_PWR_EN S5PV210_GPIO_END
! #define GPIO_CODEC_XTAL_EN S5PV210_GPIO_END
! #define GPIO_GPJ30				S5PV210_GPIO_END
! #define GPIO_USB_SEL				S5PV210_GPIO_END
! #define GPIO_GPB7 S5PV210_GPIO_END
! 
! //aliases
! #define	GPIO_BT_RST			GPIO_BT_nRST
! #define	GPIO_BT_HOST_WAKE	S5PV210_GPH0(4) //jhee2,5->0,4
! #define	GPIO_WLAN_RST		GPIO_WLAN_nRST
! #define GPIO_MSENSE_nRST     GPIO_MSENSE_RST
! 
! #define GPIO_JACK_INT_N 	GPIO_JACK_nINT
  #define	GPIO_JACK_INT_N_AF	0xFF
- #define GPIO_TV_EN GPIO_TVOUT_SEL
- 
- #if 1 //FROYO MERGE
- #define _3_TOUCH_SDA_28V		S5PV210_GPG3(0)//hojun_kim GPIO_TSP_SDA_28V
- #define _3_TOUCH_SCL_28V		S5PV210_GPG3(2)//hojun_kim GPIO_TSP_SCL_28V
- #define _3_GPIO_TOUCH_INT		S5PV210_GPJ3(3)//hojun_kim GPIO_TOUCH_INT
- #define _3_GPIO_TOUCH_EN		S5PV210_GPJ1(3)//hojun_kim GPIO_TOUCH_EN
- #define _3_GPIO_TOUCH_EN_AF		GPIO_TOUCH_EN_AF
- #define _3_GPIO_TOUCH_CE		S5PV210_GPJ3(2)//hojun_kim GPIO_TOUCH_EN //froyo_merge_check
- #define _3_GPIO_TOUCH_ST_AF		GPIO_TOUCH_EN_AF
- #else
- #define _3_TOUCH_SDA_28V		GPIO_TSP_SDA_28V
- #define _3_TOUCH_SCL_28V		GPIO_TSP_SCL_28V
- #define _3_GPIO_TOUCH_INT		GPIO_TOUCH_INT
- #define _3_GPIO_TOUCH_EN		GPIO_TOUCH_EN
- #define _3_GPIO_TOUCH_EN_AF		GPIO_TOUCH_EN_AF
- #define _3_GPIO_TOUCH_CE		GPIO_TOUCH_EN
- #define _3_GPIO_TOUCH_ST_AF		GPIO_TOUCH_EN_AF
- #endif
- #define GPIO_TOUCH_RST GPIO_TOUCH_EN
- 
  #endif
--- 606,615 ----
  #define		GPIO_N_POWER		S5PV210_GPH2(6)
  #define		GPIO_N_POWER_AF		2 //?
  
+ #define		GPIO_BT_RST			S5PV210_GPB(3)
+ #define		GPIO_WLAN_BT_EN		S5PV210_GPB(5)
+ #define		GPIO_WLAN_RST		S5PV210_GPG1(2)
  
! #define 	GPIO_JACK_INT_N 	S5PV210_GPH2(7)
  #define		GPIO_JACK_INT_N_AF	0xFF
  #endif
diff -wrp Epic-Froyo/arch/arm/mach-s5pv210/include/mach/irqs.h froyo-i9000/arch/arm/mach-s5pv210/include/mach/irqs.h
*** Epic-Froyo/arch/arm/mach-s5pv210/include/mach/irqs.h	Fri Oct  1 03:22:38 2010
--- froyo-i9000/arch/arm/mach-s5pv210/include/mach/irqs.h	Tue Oct  5 05:13:33 2010
***************
*** 201,263 ****
  #define IRQ_EINT_GROUP22_BASE	(IRQ_EINT_GROUP21_BASE + IRQ_EINT_GROUP21_NR)
  
  #define IRQ_EINT_GROUP(group, no)	(IRQ_EINT_GROUP##group##_BASE + (no))
  /* Set the default NR_IRQS */
  
  #define NR_IRQS		(IRQ_EINT_GROUP22_BASE + IRQ_EINT_GROUP22_NR + 1)
  
  #define HALL_SENSOR_IRQ		IRQ_EINT3
- //froyo_merge_check
- #define S5PV210_GPIO_A0_INTS    (8)
- #define S5PV210_GPIO_A1_INTS    (4)
- #define S5PV210_GPIO_B_INTS     (8)
- #define S5PV210_GPIO_C0_INTS    (5)
- #define S5PV210_GPIO_C1_INTS    (5)
- #define S5PV210_GPIO_D0_INTS    (4)
- #define S5PV210_GPIO_D1_INTS    (6)
- #define S5PV210_GPIO_E0_INTS    (8)
- #define S5PV210_GPIO_E1_INTS    (5)
- #define S5PV210_GPIO_F0_INTS    (8)
- #define S5PV210_GPIO_F1_INTS    (8)
- #define S5PV210_GPIO_F2_INTS    (8)
- #define S5PV210_GPIO_F3_INTS    (6)
- #define S5PV210_GPIO_G0_INTS    (7)
- #define S5PV210_GPIO_G1_INTS    (7)
- #define S5PV210_GPIO_G2_INTS    (7)
- #define S5PV210_GPIO_G3_INTS    (7)
- #define S5PV210_GPIO_J0_INTS    (8)
- #define S5PV210_GPIO_J1_INTS    (6)
- #define S5PV210_GPIO_J2_INTS    (8)
- #define S5PV210_GPIO_J3_INTS    (8)
- #define S5PV210_GPIO_J4_INTS    (5)
- 
- #define S3C_IRQ_GPIOINT_BASE            (IRQ_EINT(31)+1)
- #define S3C_IRQ_GPIO_A0_INT_BASE        (S3C_IRQ_GPIOINT_BASE + 0)
- #define S3C_IRQ_GPIO_A1_INT_BASE        (S3C_IRQ_GPIO_A0_INT_BASE + S5PV210_GPIO_A0_INTS)
- #define S3C_IRQ_GPIO_B_INT_BASE         (S3C_IRQ_GPIO_A1_INT_BASE + S5PV210_GPIO_A1_INTS)
- #define S3C_IRQ_GPIO_C0_INT_BASE        (S3C_IRQ_GPIO_B_INT_BASE + S5PV210_GPIO_B_INTS)
- #define S3C_IRQ_GPIO_C1_INT_BASE        (S3C_IRQ_GPIO_C0_INT_BASE + S5PV210_GPIO_C0_INTS)
- #define S3C_IRQ_GPIO_D0_INT_BASE        (S3C_IRQ_GPIO_C1_INT_BASE + S5PV210_GPIO_C1_INTS)
- #define S3C_IRQ_GPIO_D1_INT_BASE        (S3C_IRQ_GPIO_D0_INT_BASE + S5PV210_GPIO_D0_INTS)
- #define S3C_IRQ_GPIO_E0_INT_BASE        (S3C_IRQ_GPIO_D1_INT_BASE + S5PV210_GPIO_D1_INTS)
- #define S3C_IRQ_GPIO_E1_INT_BASE        (S3C_IRQ_GPIO_E0_INT_BASE + S5PV210_GPIO_E0_INTS)
- #define S3C_IRQ_GPIO_F0_INT_BASE        (S3C_IRQ_GPIO_E1_INT_BASE + S5PV210_GPIO_E1_INTS)
- #define S3C_IRQ_GPIO_F1_INT_BASE        (S3C_IRQ_GPIO_F0_INT_BASE + S5PV210_GPIO_F0_INTS)
- #define S3C_IRQ_GPIO_F2_INT_BASE        (S3C_IRQ_GPIO_F1_INT_BASE + S5PV210_GPIO_F1_INTS)
- #define S3C_IRQ_GPIO_F3_INT_BASE        (S3C_IRQ_GPIO_F2_INT_BASE + S5PV210_GPIO_F2_INTS)
- #define S3C_IRQ_GPIO_G0_INT_BASE        (S3C_IRQ_GPIO_F3_INT_BASE + S5PV210_GPIO_F3_INTS)
- #define S3C_IRQ_GPIO_G1_INT_BASE        (S3C_IRQ_GPIO_G0_INT_BASE + S5PV210_GPIO_G0_INTS)
- #define S3C_IRQ_GPIO_G2_INT_BASE        (S3C_IRQ_GPIO_G1_INT_BASE + S5PV210_GPIO_G1_INTS)
- #define S3C_IRQ_GPIO_G3_INT_BASE        (S3C_IRQ_GPIO_G2_INT_BASE + S5PV210_GPIO_G2_INTS)
- #define S3C_IRQ_GPIO_J0_INT_BASE        (S3C_IRQ_GPIO_G3_INT_BASE + S5PV210_GPIO_G3_INTS)
- #define S3C_IRQ_GPIO_J1_INT_BASE        (S3C_IRQ_GPIO_J0_INT_BASE + S5PV210_GPIO_J0_INTS)
- #define S3C_IRQ_GPIO_J2_INT_BASE        (S3C_IRQ_GPIO_J1_INT_BASE + S5PV210_GPIO_J1_INTS)
- #define S3C_IRQ_GPIO_J3_INT_BASE        (S3C_IRQ_GPIO_J2_INT_BASE + S5PV210_GPIO_J2_INTS)
- #define S3C_IRQ_GPIO_J4_INT_BASE        (S3C_IRQ_GPIO_J3_INT_BASE + S5PV210_GPIO_J3_INTS)
- 
- #define S3C_IRQ_GPIOINT_END             ((S3C_IRQ_GPIO_J4_INT_BASE + S5PV210_GPIO_J4_INTS) - 1)
- 
- #define S3C_IRQ_GPIO_INT_NUMS           (NR_IRQS - S3C_IRQ_GPIOINT_BASE)
- 
- #define S3C_GPIOINT(gpio,num)           (S3C_IRQ_GPIO_##gpio##_INT_BASE + num)
- 
  #endif /* ASM_ARCH_IRQS_H */
--- 201,210 ----
  #define IRQ_EINT_GROUP22_BASE	(IRQ_EINT_GROUP21_BASE + IRQ_EINT_GROUP21_NR)
  
  #define IRQ_EINT_GROUP(group, no)	(IRQ_EINT_GROUP##group##_BASE + (no))
+ 
  /* Set the default NR_IRQS */
  
  #define NR_IRQS		(IRQ_EINT_GROUP22_BASE + IRQ_EINT_GROUP22_NR + 1)
  
  #define HALL_SENSOR_IRQ		IRQ_EINT3
  #endif /* ASM_ARCH_IRQS_H */
Only in Epic-Froyo/arch/arm/mach-s5pv210/include/mach: mipi_ddi.h
diff -wrp Epic-Froyo/arch/arm/mach-s5pv210/include/mach/sec_jack.h froyo-i9000/arch/arm/mach-s5pv210/include/mach/sec_jack.h
*** Epic-Froyo/arch/arm/mach-s5pv210/include/mach/sec_jack.h	Fri Oct  1 03:22:38 2010
--- froyo-i9000/arch/arm/mach-s5pv210/include/mach/sec_jack.h	Tue Oct  5 05:13:33 2010
*************** struct sec_jack_port
*** 49,55 ****
  {
  	struct sec_gpio_info	det_jack;
  	struct sec_gpio_info	send_end;
- 	struct sec_gpio_info	send_end_open; /* Added for Froyo Atlas */
  };
  
  struct sec_jack_platform_data
--- 49,54 ----
# EPIC RESUME : Pick up GPIO merge from here.
diff -wrp Epic-Froyo/arch/arm/mach-s5pv210/mach-aries.c froyo-i9000/arch/arm/mach-s5pv210/mach-aries.c
*** Epic-Froyo/arch/arm/mach-s5pv210/mach-aries.c	Tue Nov 23 22:19:51 2010
--- froyo-i9000/arch/arm/mach-s5pv210/mach-aries.c	Tue Oct  5 05:13:33 2010
***************
*** 18,26 ****
  #include <linux/i2c-gpio.h>
  #include <linux/i2c/qt602240_ts.h>
  #include <linux/regulator/max8998.h>
- #include <linux/regulator/max8893.h>
- #include <linux/regulator/pmic_cam.h>
- #include <linux/leds.h>
  #include <linux/clk.h>
  #include <linux/delay.h>
  #include <linux/usb/ch9.h>
--- 18,23 ----
***************
*** 69,75 ****
  #include <plat/gpio-core.h>
  
  #include <mach/gpio.h>
! #include <mach/victory/gpio-aries-setting.h>
  
  #ifdef CONFIG_ANDROID_PMEM
  #include <linux/android_pmem.h>
--- 66,72 ----
  #include <plat/gpio-core.h>
  
  #include <mach/gpio.h>
! #include <mach/gpio-aries-setting.h>
  
  #ifdef CONFIG_ANDROID_PMEM
  #include <linux/android_pmem.h>
***************
*** 79,85 ****
  #if defined(CONFIG_PM)
  #include <plat/pm.h>
  #endif
! #include <mach/victory/max8998_function.h>
  #include <mach/sec_jack.h>
  #include <mach/param.h>
  
--- 76,82 ----
  #if defined(CONFIG_PM)
  #include <plat/pm.h>
  #endif
! #include <mach/max8998_function.h>
  #include <mach/sec_jack.h>
  #include <mach/param.h>
  
*************** static struct regulator_init_data max899
*** 223,256 ****
          },
  };
  
- static struct regulator_init_data max8998_ldo6_data = {
-         .constraints    = {
-                 .name           = "VBT_WL_2.6V",
-                 .min_uV         = 2800000,
-                 .max_uV         = 2800000,
- 		.always_on	= 1,
-                 .apply_uV       = 1,
- 		.valid_ops_mask	= REGULATOR_CHANGE_VOLTAGE,
-         },
- };
  
- static struct regulator_init_data max8998_ldo16_data = {
-         .constraints    = {
-                 .name           = "MIPI_1.8V",
-                 .min_uV         = 1800000,
-                 .max_uV         = 1800000,
- 		.always_on	= 1,
-                 .apply_uV       = 1,
- 		.valid_ops_mask	= REGULATOR_CHANGE_VOLTAGE,
-         },
- };
  
  
  static struct regulator_init_data max8998_ldo7_data = {
          .constraints    = {
                  .name           = "VCC_LCD",
!                 .min_uV         = 1800000,
!                 .max_uV         = 1800000,
                  .always_on      = 1,
                  //.apply_uV     = 1,
                  .valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
--- 220,233 ----
          },
  };
  
  
  
  
  static struct regulator_init_data max8998_ldo7_data = {
          .constraints    = {
                  .name           = "VCC_LCD",
!                 .min_uV         = 1600000,
!                 .max_uV         = 3600000,
                  .always_on      = 1,
                  //.apply_uV     = 1,
                  .valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
*************** static struct regulator_init_data max899
*** 260,267 ****
  static struct regulator_init_data max8998_ldo17_data = {
          .constraints    = {
                  .name           = "PM_LVDS_VDD",
!                 .min_uV         = 2800000,			//chk: froyo upmg 1800000,
!                 .max_uV         = 2800000,			//1800000,
                  .always_on      = 1,
                  //.apply_uV     = 1,
                  .valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
--- 237,244 ----
  static struct regulator_init_data max8998_ldo17_data = {
          .constraints    = {
                  .name           = "PM_LVDS_VDD",
!                 .min_uV         = 1600000,
!                 .max_uV         = 3600000,
                  .always_on      = 1,
                  //.apply_uV     = 1,
                  .valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
*************** static struct max8998_subdev_data univer
*** 277,285 ****
  //      { MAX8998_LDO13, &max8998_ldo13_data },
  //      { MAX8998_LDO14, &max8998_ldo14_data },
  //      { MAX8998_LDO15, &max8998_ldo15_data },
-         { MAX8998_LDO17, &max8998_ldo17_data },
-         { MAX8998_LDO16, &max8998_ldo16_data },
          { MAX8998_LDO7, &max8998_ldo7_data },
  };
  
  static struct max8998_platform_data max8998_platform_data = {
--- 254,261 ----
  //      { MAX8998_LDO13, &max8998_ldo13_data },
  //      { MAX8998_LDO14, &max8998_ldo14_data },
  //      { MAX8998_LDO15, &max8998_ldo15_data },
          { MAX8998_LDO7, &max8998_ldo7_data },
+         { MAX8998_LDO17, &max8998_ldo17_data },
  };
  
  static struct max8998_platform_data max8998_platform_data = {
*************** static void tl2796_cfg_gpio(struct platf
*** 316,371 ****
  {
  	int i;
  
! 	for (i = 0; i < 8; i++) {
! 		s3c_gpio_cfgpin(S5PV210_GPF0(i), S3C_GPIO_SFN(2));
! 		s3c_gpio_setpull(S5PV210_GPF0(i), S3C_GPIO_PULL_NONE);
! 	}
! 
! 	for (i = 0; i < 8; i++) {
! 		s3c_gpio_cfgpin(S5PV210_GPF1(i), S3C_GPIO_SFN(2));
! 		s3c_gpio_setpull(S5PV210_GPF1(i), S3C_GPIO_PULL_NONE);
! 	}
! 
! 	for (i = 0; i < 8; i++) {
! 		s3c_gpio_cfgpin(S5PV210_GPF2(i), S3C_GPIO_SFN(2));
! 		s3c_gpio_setpull(S5PV210_GPF2(i), S3C_GPIO_PULL_NONE);
! 	}
  
! 	for (i = 0; i < 4; i++) {
! 		s3c_gpio_cfgpin(S5PV210_GPF3(i), S3C_GPIO_SFN(2));
! 		s3c_gpio_setpull(S5PV210_GPF3(i), S3C_GPIO_PULL_NONE);
  	}
  
  	/* mDNIe SEL: why we shall write 0x2 ? */
! 	#ifndef CONFIG_FB_S3C_MDNIE
  	writel(0x2, S5P_MDNIE_SEL);
  	#endif
  	/* drive strength to max */
! 	writel(0xffffffff, S3C_ADDR(0x00500000) + 0x12c);
! 	writel(0xffffffff, S3C_ADDR(0x00500000) + 0x14c);
! 	writel(0xffffffff, S3C_ADDR(0x00500000) + 0x16c);
! 	writel(0x000000ff, S3C_ADDR(0x00500000) + 0x18c);
! 
! 	/* DISPLAY_CS */
! 	s3c_gpio_cfgpin(S5PV210_MP01(1), S3C_GPIO_SFN(1));
! 	/* DISPLAY_CLK */
! 	s3c_gpio_cfgpin(S5PV210_MP04(1), S3C_GPIO_SFN(1));
! 	/* DISPLAY_SO */
! 	s3c_gpio_cfgpin(S5PV210_MP04(2), S3C_GPIO_SFN(1));
! 	/* DISPLAY_SI */
! 	s3c_gpio_cfgpin(S5PV210_MP04(3), S3C_GPIO_SFN(1));
  
  	/* DISPLAY_CS */
! 	s3c_gpio_setpull(S5PV210_MP01(1), S3C_GPIO_PULL_NONE);
  	/* DISPLAY_CLK */
! 	s3c_gpio_setpull(S5PV210_MP04(1), S3C_GPIO_PULL_NONE);
! 	/* DISPLAY_SO */
! 	s3c_gpio_setpull(S5PV210_MP04(2), S3C_GPIO_PULL_NONE);
  	/* DISPLAY_SI */
! 	s3c_gpio_setpull(S5PV210_MP04(3), S3C_GPIO_PULL_NONE);
  
  	/*KGVS : configuring GPJ2(4) as FM interrupt */
  	//s3c_gpio_cfgpin(S5PV210_GPJ2(4), S5PV210_GPJ2_4_GPIO_INT20_4);
  }
  
  void lcd_cfg_gpio_early_suspend(void)
--- 292,350 ----
  {
  	int i;
  
! 	/* DISPLAY_HSYNC */
! 	s3c_gpio_cfgpin(GPIO_DISPLAY_HSYNC, GPIO_DISPLAY_HSYNC_AF);
! 	s3c_gpio_setpull(GPIO_DISPLAY_HSYNC, S3C_GPIO_PULL_NONE);
! 
! 	/* DISPLAY_VSYNC */
! 	s3c_gpio_cfgpin(GPIO_DISPLAY_VSYNC, GPIO_DISPLAY_VSYNC_AF);
! 	s3c_gpio_setpull(GPIO_DISPLAY_VSYNC, S3C_GPIO_PULL_NONE);
! 
! 	/* DISPLAY_DE */
! 	s3c_gpio_cfgpin(GPIO_DISPLAY_DE, GPIO_DISPLAY_DE_AF);
! 	s3c_gpio_setpull(GPIO_DISPLAY_DE, S3C_GPIO_PULL_NONE);
! 
! 	/* DISPLAY_PCLK */
! 	s3c_gpio_cfgpin(GPIO_DISPLAY_PCLK, GPIO_DISPLAY_PCLK_AF);
! 	s3c_gpio_setpull(GPIO_DISPLAY_PCLK, S3C_GPIO_PULL_NONE);
  
! 	/*
! 		WARNING:
! 			This code works on situation that LCD data pin is
! 			set serially by hardware
! 	 */
! 	for (i = 0; i < 24; i++)	{
! 		s3c_gpio_cfgpin(GPIO_LCD_D0 + i, GPIO_LCD_D0_AF);
! 		s3c_gpio_setpull(GPIO_LCD_D0 + i, S3C_GPIO_PULL_NONE);
  	}
  	
  	/* mDNIe SEL: why we shall write 0x2 ? */
! #ifdef CONFIG_FB_S3C_MDNIE
! 	writel(0x1, S5P_MDNIE_SEL);
! #else
  	writel(0x2, S5P_MDNIE_SEL);
  #endif
+ #if 0
  	/* drive strength to max */
! 	writel(0xffffffff, S5PC_VA_GPIO + 0x12c);
! 	writel(0xffffffff, S5PC_VA_GPIO + 0x14c);
! 	writel(0xffffffff, S5PC_VA_GPIO + 0x16c);
! 	writel(0x000000ff, S5PC_VA_GPIO + 0x18c);
! #endif
  
  	/* DISPLAY_CS */
! 	s3c_gpio_cfgpin(GPIO_DISPLAY_CS, GPIO_DISPLAY_CS_AF);
! 	s3c_gpio_setpull(GPIO_DISPLAY_CS, S3C_GPIO_PULL_NONE);
  	/* DISPLAY_CLK */
! 	s3c_gpio_cfgpin(GPIO_DISPLAY_CLK, GPIO_DISPLAY_CLK_AF);
! 	s3c_gpio_setpull(GPIO_DISPLAY_CLK, S3C_GPIO_PULL_NONE);
  	/* DISPLAY_SI */
! 	s3c_gpio_cfgpin(GPIO_DISPLAY_SI, GPIO_DISPLAY_SI_AF);
! 	s3c_gpio_setpull(GPIO_DISPLAY_SI, S3C_GPIO_PULL_NONE);
  
  	/*KGVS : configuring GPJ2(4) as FM interrupt */
  	//s3c_gpio_cfgpin(S5PV210_GPJ2(4), S5PV210_GPJ2_4_GPIO_INT20_4);
+ 
  }
  
  void lcd_cfg_gpio_early_suspend(void)
*************** void lcd_cfg_gpio_early_suspend(void)
*** 373,432 ****
  	int i;
  	printk("[%s]\n", __func__);
  	
  	
! 	for (i = 0; i < 8; i++) {
! 		s3c_gpio_cfgpin(S5PV210_GPF0(i), S3C_GPIO_SFN(2));
! 		s3c_gpio_setpull(S5PV210_GPF0(i), S3C_GPIO_PULL_NONE);
! 	}
! 
! 	for (i = 0; i < 8; i++) {
! 		s3c_gpio_cfgpin(S5PV210_GPF1(i), S3C_GPIO_SFN(2));
! 		s3c_gpio_setpull(S5PV210_GPF1(i), S3C_GPIO_PULL_NONE);
! 	}
! 
! 	for (i = 0; i < 8; i++) {
! 		s3c_gpio_cfgpin(S5PV210_GPF2(i), S3C_GPIO_SFN(2));
! 		s3c_gpio_setpull(S5PV210_GPF2(i), S3C_GPIO_PULL_NONE);
! 	}
! 
! 	for (i = 0; i < 4; i++) {
! 		s3c_gpio_cfgpin(S5PV210_GPF3(i), S3C_GPIO_SFN(2));
! 		s3c_gpio_setpull(S5PV210_GPF3(i), S3C_GPIO_PULL_NONE);
! 	}
! 
! 	/* mDNIe SEL: why we shall write 0x2 ? */
! 	#ifndef CONFIG_FB_S3C_MDNIE
! 	writel(0x2, S5P_MDNIE_SEL);
! 	#endif
! 	/* drive strength to max */
! 	writel(0xffffffff, S3C_ADDR(0x00500000) + 0x12c);
! 	writel(0xffffffff, S3C_ADDR(0x00500000) + 0x14c);
! 	writel(0xffffffff, S3C_ADDR(0x00500000) + 0x16c);
! 	writel(0x000000ff, S3C_ADDR(0x00500000) + 0x18c);
! 
! 	/* DISPLAY_CS */
! 	s3c_gpio_cfgpin(S5PV210_MP01(1), S3C_GPIO_SFN(1));
! 	/* DISPLAY_CLK */
! 	s3c_gpio_cfgpin(S5PV210_MP04(1), S3C_GPIO_SFN(1));
! 	/* DISPLAY_SO */
! 	s3c_gpio_cfgpin(S5PV210_MP04(2), S3C_GPIO_SFN(1));
! 	/* DISPLAY_SI */
! 	s3c_gpio_cfgpin(S5PV210_MP04(3), S3C_GPIO_SFN(1));
  
  	/* DISPLAY_CS */
! 	s3c_gpio_setpull(S5PV210_MP01(1), S3C_GPIO_PULL_NONE);
  	/* DISPLAY_CLK */
! 	s3c_gpio_setpull(S5PV210_MP04(1), S3C_GPIO_PULL_NONE);
! 	/* DISPLAY_SO */
! 	s3c_gpio_setpull(S5PV210_MP04(2), S3C_GPIO_PULL_NONE);
  	/* DISPLAY_SI */
! 	s3c_gpio_setpull(S5PV210_MP04(3), S3C_GPIO_PULL_NONE);
! 
! 	/*KGVS : configuring GPJ2(4) as FM interrupt */
! 	//s3c_gpio_cfgpin(S5PV210_GPJ2(4), S5PV210_GPJ2_4_GPIO_INT20_4);
! 	
! 
! 
  }
  EXPORT_SYMBOL(lcd_cfg_gpio_early_suspend);
  
--- 352,405 ----
  	int i;
  	printk("[%s]\n", __func__);
  
+ 	/* DISPLAY_HSYNC */
+ 	s3c_gpio_cfgpin(GPIO_DISPLAY_HSYNC, S3C_GPIO_OUTPUT);
+ 	s3c_gpio_setpull(GPIO_DISPLAY_HSYNC, S3C_GPIO_PULL_NONE);
+ 	s3c_gpio_setpin(GPIO_DISPLAY_HSYNC, 0);
+ 
+ 	/* DISPLAY_VSYNC */
+ 	s3c_gpio_cfgpin(GPIO_DISPLAY_VSYNC, S3C_GPIO_OUTPUT);
+ 	s3c_gpio_setpull(GPIO_DISPLAY_VSYNC, S3C_GPIO_PULL_NONE);
+ 	s3c_gpio_setpin(GPIO_DISPLAY_VSYNC, 0);
+ 
+ 	/* DISPLAY_DE */
+ 	s3c_gpio_cfgpin(GPIO_DISPLAY_DE, S3C_GPIO_OUTPUT);
+ 	s3c_gpio_setpull(GPIO_DISPLAY_DE, S3C_GPIO_PULL_NONE);
+ 	s3c_gpio_setpin(GPIO_DISPLAY_DE, 0);
+ 
+ 	/* DISPLAY_PCLK */
+ 	s3c_gpio_cfgpin(GPIO_DISPLAY_PCLK, S3C_GPIO_OUTPUT);
+ 	s3c_gpio_setpull(GPIO_DISPLAY_PCLK, S3C_GPIO_PULL_NONE);
+ 	s3c_gpio_setpin(GPIO_DISPLAY_PCLK, 0);
  
! 	/*
! 		WARNING:
! 			This code works on situation that LCD data pin is
! 			set serially by hardware
! 	 */
! 	for (i = 0; i < 24; i++)	{
! 		s3c_gpio_cfgpin(GPIO_LCD_D0 + i, S3C_GPIO_OUTPUT);
! 		s3c_gpio_setpull(GPIO_LCD_D0 + i, S3C_GPIO_PULL_NONE);
! 		s3c_gpio_setpin(GPIO_LCD_D0 + i, 0);
! 	}
! 	// drive strength to min
! 	writel(0x00000000, S5P_VA_GPIO + 0x12c);		// GPF0DRV
! 	writel(0x00000000, S5P_VA_GPIO + 0x14c);		// GPF1DRV
! 	writel(0x00000000, S5P_VA_GPIO + 0x16c);		// GPF2DRV
! 	writel(0x00000000, S5P_VA_GPIO + 0x18c);		// GPF3DRV
  
  	/* DISPLAY_CS */
! 	s3c_gpio_cfgpin(GPIO_DISPLAY_CS, S3C_GPIO_OUTPUT);
! 	s3c_gpio_setpull(GPIO_DISPLAY_CS, S3C_GPIO_PULL_NONE);
! 	s3c_gpio_setpin(GPIO_DISPLAY_CS, 0);
  	/* DISPLAY_CLK */
! 	s3c_gpio_cfgpin(GPIO_DISPLAY_CLK, S3C_GPIO_OUTPUT);
! 	s3c_gpio_setpull(GPIO_DISPLAY_CLK, S3C_GPIO_PULL_NONE);
! 	s3c_gpio_setpin(GPIO_DISPLAY_CLK, 0);
  	/* DISPLAY_SI */
! 	s3c_gpio_cfgpin(GPIO_DISPLAY_SI, S3C_GPIO_OUTPUT);
! 	s3c_gpio_setpull(GPIO_DISPLAY_SI, S3C_GPIO_PULL_NONE);
! 	s3c_gpio_setpin(GPIO_DISPLAY_SI, 0);
  }
  EXPORT_SYMBOL(lcd_cfg_gpio_early_suspend);
  
*************** static int tl2796_reset_lcd(struct platf
*** 465,473 ****
  
  static int tl2796_backlight_on(struct platform_device *pdev)
  {
  }
  
- //chk changed: froyo upmg
  static struct s3c_platform_fb tl2796_data __initdata = {
          .hw_ver = 0x62,
          .clk_name = "sclk_fimd",
--- 438,446 ----
  
  static int tl2796_backlight_on(struct platform_device *pdev)
  {
+ 
  }
  
  static struct s3c_platform_fb tl2796_data __initdata = {
          .hw_ver = 0x62,
          .clk_name = "sclk_fimd",
*************** static struct s3c_platform_fb tl2796_dat
*** 479,484 ****
--- 452,458 ----
          .backlight_on = tl2796_backlight_on,
          .reset_lcd = tl2796_reset_lcd,
  };
+ 
  #define LCD_BUS_NUM     3
  #define DISPLAY_CS      S5PV210_MP01(1)
  #define SUB_DISPLAY_CS  S5PV210_MP01(2)
*************** static struct spi_board_info spi_board_i
*** 501,513 ****
  static struct spi_gpio_platform_data tl2796_spi_gpio_data = {
          .sck    = DISPLAY_CLK,
          .mosi   = DISPLAY_SI,
!         .miso   = -1,
          .num_chipselect = 2,
  };
  
  static struct platform_device s3c_device_spi_gpio = {
          .name   = "spi_gpio",
!         .id     = 3,
          .dev    = {
                  .parent         = &s3c_device_fb.dev,
                  .platform_data  = &tl2796_spi_gpio_data,
--- 475,487 ----
  static struct spi_gpio_platform_data tl2796_spi_gpio_data = {
          .sck    = DISPLAY_CLK,
          .mosi   = DISPLAY_SI,
!         .miso   = 0,
          .num_chipselect = 2,
  };
  
  static struct platform_device s3c_device_spi_gpio = {
          .name   = "spi_gpio",
!         .id     = LCD_BUS_NUM,
          .dev    = {
                  .parent         = &s3c_device_fb.dev,
                  .platform_data  = &tl2796_spi_gpio_data,
*************** static struct platform_device s3c_device
*** 534,541 ****
  };
  
  static  struct  i2c_gpio_platform_data  i2c5_platdata = {
!         .sda_pin                = AP_SDA_30V,
!         .scl_pin                = AP_SCL_30V,
          .udelay                 = 2,    /* 250KHz */
  //      .udelay                 = 4,
          .sda_is_open_drain      = 0,
--- 508,515 ----
  };
  
  static  struct  i2c_gpio_platform_data  i2c5_platdata = {
!         .sda_pin                = GPIO_AP_SDA_28V,
!         .scl_pin                = GPIO_AP_SCL_28V,
          .udelay                 = 2,    /* 250KHz */
  //      .udelay                 = 4,
          .sda_is_open_drain      = 0,
*************** static struct platform_device s3c_device
*** 566,593 ****
          .dev.platform_data      = &i2c6_platdata,
  };
  
- #if 0
  static  struct  i2c_gpio_platform_data  i2c7_platdata = {
-         #if !defined(CONFIG_ARIES_VER_B2) //victory Ansari
  	.sda_pin                = GPIO_USB_SDA_28V,
  	.scl_pin                = GPIO_USB_SCL_28V,
-        #else
- 	.sda_pin                = AP_SDA_30V,
- 	.scl_pin                = AP_SCL_30V,
-        #endif
          .udelay                 = 2,    /* 250KHz */
          .sda_is_open_drain      = 0,
          .scl_is_open_drain      = 0,
          .scl_is_output_only     = 0,
  };
  static struct platform_device s3c_device_i2c7 = {
          .name                           = "i2c-gpio",
          .id                                     = 7,
          .dev.platform_data      = &i2c7_platdata,
  };
- #endif
- 
- #if 0 //froyo merge
  // For FM radio
  #if !defined(CONFIG_ARIES_NTT)
  static  struct  i2c_gpio_platform_data  i2c8_platdata = {
--- 540,559 ----
          .dev.platform_data      = &i2c6_platdata,
  };
  
  static  struct  i2c_gpio_platform_data  i2c7_platdata = {
          .sda_pin                = GPIO_USB_SDA_28V,
          .scl_pin                = GPIO_USB_SCL_28V,
          .udelay                 = 2,    /* 250KHz */
          .sda_is_open_drain      = 0,
          .scl_is_open_drain      = 0,
          .scl_is_output_only     = 0,
  };
+ 
  static struct platform_device s3c_device_i2c7 = {
          .name                           = "i2c-gpio",
          .id                                     = 7,
          .dev.platform_data      = &i2c7_platdata,
  };
  // For FM radio
  #if !defined(CONFIG_ARIES_NTT)
  static  struct  i2c_gpio_platform_data  i2c8_platdata = {
*************** static struct platform_device s3c_device
*** 605,615 ****
          .dev.platform_data      = &i2c8_platdata,
  };
  #endif
- #endif
  
  static  struct  i2c_gpio_platform_data  i2c9_platdata = {
!         .sda_pin                = GPIO_WIMAX_PM_SDA,
!         .scl_pin                = GPIO_WIMAX_PM_SCL,
          .udelay                 = 2,    /* 250KHz */
          .sda_is_open_drain      = 0,
          .scl_is_open_drain      = 0,
--- 571,580 ----
          .dev.platform_data      = &i2c8_platdata,
  };
  #endif
  
  static  struct  i2c_gpio_platform_data  i2c9_platdata = {
!         .sda_pin                = FUEL_SDA_18V,
!         .scl_pin                = FUEL_SCL_18V,
          .udelay                 = 2,    /* 250KHz */
          .sda_is_open_drain      = 0,
          .scl_is_open_drain      = 0,
*************** static struct platform_device s3c_device
*** 622,669 ****
          .dev.platform_data      = &i2c9_platdata,
  };
  
! static	struct	i2c_gpio_platform_data	i2c11_platdata = {
!   .sda_pin		= GPIO_FM_SDA_28V,
!   .scl_pin    = GPIO_FM_SCL_28V,
!   .udelay     = 2,  /* 250KHz */
    .sda_is_open_drain  = 0,
    .scl_is_open_drain  = 0,
    .scl_is_output_only = 0,
  };
! 
! static struct platform_device s3c_device_i2c11 = {
    .name       = "i2c-gpio",
!   .id         = 11,
!   .dev.platform_data  = &i2c11_platdata,
! };//jihyon82.kim for gp2a
  
! static  struct  i2c_gpio_platform_data  i2c13_platdata = {
!   .sda_pin    = _3_TOUCH_SDA_28V,
!   .scl_pin    = _3_TOUCH_SCL_28V,
!   .udelay     = 0,  /* 250KHz */
    .sda_is_open_drain  = 0,
    .scl_is_open_drain  = 0,
    .scl_is_output_only = 0,
  };
! static struct platform_device s3c_device_i2c13 = {
  	.name				= "i2c-gpio",
! 	.id					= 13,
! 	.dev.platform_data	= &i2c13_platdata,
  };
  
! static	struct	i2c_gpio_platform_data	i2c14_platdata = {
! 	.sda_pin		= FUEL_SDA_18V,
! 	.scl_pin		= FUEL_SCL_18V,
! 	.udelay			= 2,	/* 250KHz */
  	.sda_is_open_drain	= 0,
  	.scl_is_open_drain	= 0,
  	.scl_is_output_only	= 0,
  };
  
! static struct platform_device s3c_device_i2c14 = {
  	.name				= "i2c-gpio",
! 	.id					= 14,
! 	.dev.platform_data	= &i2c14_platdata,
  };
  
  
--- 587,634 ----
          .dev.platform_data      = &i2c9_platdata,
  };
  
! static  struct  i2c_gpio_platform_data  i2c10_platdata = {
!         .sda_pin                = _3_TOUCH_SDA_28V,
!         .scl_pin                = _3_TOUCH_SCL_28V,
!         .udelay                 = 0,    /* 250KHz */
          .sda_is_open_drain      = 0,
          .scl_is_open_drain      = 0,
          .scl_is_output_only     = 0,
  };
! static struct platform_device s3c_device_i2c10 = {
          .name                           = "i2c-gpio",
!         .id                                     = 10,
!         .dev.platform_data      = &i2c10_platdata,
! };
  
! static  struct  i2c_gpio_platform_data  i2c11_platdata = {
!         .sda_pin                = GPIO_ALS_SDA_28V,
!         .scl_pin                = GPIO_ALS_SCL_28V,
!         .udelay                 = 2,    /* 250KHz */
          .sda_is_open_drain      = 0,
          .scl_is_open_drain      = 0,
          .scl_is_output_only     = 0,
  };
! 
! static struct platform_device s3c_device_i2c11 = {
          .name                           = "i2c-gpio",
!         .id                                     = 11,
!         .dev.platform_data      = &i2c11_platdata,
  };
  
! static  struct  i2c_gpio_platform_data  i2c12_platdata = {
!         .sda_pin                = GPIO_MSENSE_SDA_28V,
!         .scl_pin                = GPIO_MSENSE_SCL_28V,
!         .udelay                 = 0,    /* 250KHz */
          .sda_is_open_drain      = 0,
          .scl_is_open_drain      = 0,
          .scl_is_output_only     = 0,
  };
  
! static struct platform_device s3c_device_i2c12 = {
          .name                           = "i2c-gpio",
!         .id                                     = 12,
!         .dev.platform_data      = &i2c12_platdata,
  };
  
  
*************** static struct sec_jack_port sec_jack_por
*** 677,691 ****
  		},
  		{ // SEND/END info
  			.eint       = IRQ_EINT(30),
! 			.gpio       = GPIO_EAR_SEND_END_SHORT,
! 			.gpio_af    = GPIO_EAR_SEND_END_SHORT_AF,
  			.low_active = 1
- 		},
- 		{
- 		    			.eint		= S3C_GPIOINT(D0,0),  //suik_Fix
- 		    			.gpio		= S5PV210_GPD0(0),
- 		    			.gpio_af	= GPIO_EAR_SEND_END_OPEN_AF,
- 		    			.low_active	= 0
      	}
  	}
  };
--- 642,650 ----
  		},
  		{ // SEND/END info
  			.eint       = IRQ_EINT(30),
! 			.gpio       = GPIO_EAR_SEND_END,
! 			.gpio_af    = GPIO_EAR_SEND_END_AF,
  			.low_active = 1
  		}
  	}
  };  
*************** static struct s3c_adc_mach_info s3c_adc_
*** 784,855 ****
  };
  #endif
  
- static int read_hwversion(void)
- {
-         int err;
-         int hwver = -1;
-         int hwver_0 = -1;
-         int hwver_1 = -1;
-         int hwver_2 = -1;
- 
-         #if 1 //victory.boot temp //froyo merge
- 		    hwver = 2;
- #else
- 
-         err = gpio_request(S5PV210_GPJ0(2), "HWREV_MODE0");
- 
-         if (err) {
-                 printk(KERN_ERR "failed to request GPJ0(2) for "
-                         "HWREV_MODE0\n");
-                 return err;
-         }
-         err = gpio_request(S5PV210_GPJ0(3), "HWREV_MODE1");
- 
-         if (err) {
-                 printk(KERN_ERR "failed to request GPJ0(3) for "
-                         "HWREV_MODE1\n");
-                 return err;
-         }
-         err = gpio_request(S5PV210_GPJ0(4), "HWREV_MODE2");
- 
-         if (err) {
-                 printk(KERN_ERR "failed to request GPJ0(4) for "
-                         "HWREV_MODE2\n");
-                 return err;
-         }
- 
-         gpio_direction_input(S5PV210_GPJ0(2));
-         gpio_direction_input(S5PV210_GPJ0(3));
-         gpio_direction_input(S5PV210_GPJ0(4));
- 
-         hwver_0 = gpio_get_value(S5PV210_GPJ0(2));
-         hwver_1 = gpio_get_value(S5PV210_GPJ0(3));
-         hwver_2 = gpio_get_value(S5PV210_GPJ0(4));
- 
-         gpio_free(S5PV210_GPJ0(2));
-         gpio_free(S5PV210_GPJ0(3));
-         gpio_free(S5PV210_GPJ0(4));
- 
- 	if((hwver_0 == 0)&&(hwver_1 == 1)&&(hwver_2 == 0)){
-                 hwver = 2;
-                 printk("+++++++++[I9000 Rev0.1 board]++++++++ hwver_0: %d, hwver_1: %d, hwver_2: %d\n", hwver_0, hwver_1, hwver_2);
-         }
-         else if((hwver_0 == 1)&&(hwver_1 == 0)&&(hwver_2 == 1)){
-                 hwver = 2;
-                 printk("+++++++++[B5 board]++++++++ hwver_0: %d, hwver_1: %d, hwver_2: %d\n", hwver_0, hwver_1, hwver_2);
-         }
-         else if((hwver_0 == 0)&&(hwver_1 == 1)&&(hwver_2 == 1)){
-                 hwver = 2;
-                 printk("+++++++++[ARIES B5 board]++++++++ hwver_0: %d, hwver_1: %d, hwver_2: %d\n", hwver_0, hwver_1, hwver_2);
-         }
-         else{
-                 hwver = 0;
-                 //printk("+++++++++[B2, B3 board]++++++++ hwver_0: %d, hwver_1: %d, hwver_2: %d\n", hwver_0, hwver_1, hwver_2);
-         }
- 
- #endif
-         return hwver;
- }
  #ifdef CONFIG_VIDEO_FIMC
  /*
   * Guide for Camera Configuration for Aries
--- 743,748 ----
*************** static int read_hwversion(void)
*** 862,914 ****
  */
  static void ce147_ldo_en(bool onoff)
  {
! 	int hwver = -1;
  
! 	hwver = read_hwversion();
  
- 	if(hwver == 2){		//B5 board
- 		if(onoff){
- 			Set_MAX8998_PM_OUTPUT_Voltage(BUCK4, VCC_1p200);  //CAM_ISP_1.2V
  			Set_MAX8998_PM_REG(EN4, 1);
! 			Set_MAX8998_PM_OUTPUT_Voltage(LDO11, VCC_2p800);  //CAM_AF_2.8V //SecFeature.Camera aswoogi
  			Set_MAX8998_PM_REG(ELDO11, 1);
! 			Set_MAX8998_PM_OUTPUT_Voltage(LDO12, VCC_1p200);  //CAM_SENSOR_1.2V
  			Set_MAX8998_PM_REG(ELDO12, 1);
! 			Set_MAX8998_PM_OUTPUT_Voltage(LDO13, VCC_2p800);  //CAM_SENSOR_A2.8V
  			Set_MAX8998_PM_REG(ELDO13, 1);
! 			Set_MAX8998_PM_OUTPUT_Voltage(LDO14, VCC_1p800);  //CAM_ISP_1.8V
  			Set_MAX8998_PM_REG(ELDO14, 1);
! 			Set_MAX8998_PM_OUTPUT_Voltage(LDO15, VCC_2p800);  //CAM_ISP_2.8V
  			Set_MAX8998_PM_REG(ELDO15, 1);
! 			Set_MAX8998_PM_OUTPUT_Voltage(LDO5, VCC_1p800);  //CAM_SENSOR_1.8V//SecFeature.Camera aswoogi
! 			Set_MAX8998_PM_REG(ELDO5, 1);
! 		} else {
! 			Set_MAX8998_PM_REG(ELDO5, 0);//SecFeature.Camera aswoogi
! 			Set_MAX8998_PM_REG(ELDO15, 0);
! 			Set_MAX8998_PM_REG(ELDO14, 0);
! 			Set_MAX8998_PM_REG(ELDO13, 0);
! 			Set_MAX8998_PM_REG(ELDO12, 0);
  			Set_MAX8998_PM_REG(ELDO11, 0);
  			Set_MAX8998_PM_REG(EN4, 0);
  		}
! 	}
! 	else{
! 	if(onoff){
! 		pmic_ldo_enable(LDO_CAM_CORE);
! 		pmic_ldo_enable(LDO_CAM_IO);
! 		pmic_ldo_enable(LDO_CAM_5M);
! 		pmic_ldo_enable(LDO_CAM_A);
! 		pmic_ldo_enable(LDO_CAM_CIF);
! 		pmic_ldo_enable(LDO_CAM_AF);
! 	} else {
! 		pmic_ldo_disable(LDO_CAM_IO);
! 		pmic_ldo_disable(LDO_CAM_5M);
! 		pmic_ldo_disable(LDO_CAM_A);
! 		pmic_ldo_disable(LDO_CAM_CIF);
! 		pmic_ldo_disable(LDO_CAM_AF);
! 		pmic_ldo_disable(LDO_CAM_CORE);
! 	}
! }
  }
  
  
--- 755,848 ----
  */
  static void ce147_ldo_en(bool onoff)
  {
! 	int err;
! 
! 	//For Emul Rev0.1
! 	// Because B4, B5 do not use this GPIO, this GPIO is enabled in all HW version
! 	/* CAM_IO_EN - GPB(7) */
! 	err = gpio_request(GPIO_GPB7, "GPB7");
  
! 	if(err) {
! 		printk(KERN_ERR "failed to request GPB7 for camera control\n");
! 
! 		return err;
! 	}
! 
! 	if(onoff == TRUE) { //power on 
! 		// Turn CAM_ISP_1.2V on
! 		Set_MAX8998_PM_OUTPUT_Voltage(BUCK4, VCC_1p200);
  
  		Set_MAX8998_PM_REG(EN4, 1);
! 
! 		mdelay(1);
! 
! 		// Turn CAM_AF_2.8V on
! 		Set_MAX8998_PM_OUTPUT_Voltage(LDO11, VCC_2p800);
! 
  		Set_MAX8998_PM_REG(ELDO11, 1);
! 
! 		// Turn CAM_SENSOR_1.2V on
! 		Set_MAX8998_PM_OUTPUT_Voltage(LDO12, VCC_1p200);
! 
  		Set_MAX8998_PM_REG(ELDO12, 1);
! 
! 		// Turn CAM_SENSOR_A2.8V on
! 		Set_MAX8998_PM_OUTPUT_Voltage(LDO13, VCC_2p800);
! 
  		Set_MAX8998_PM_REG(ELDO13, 1);
! 
! 		// Turn CAM_ISP_1.8V on
! 		Set_MAX8998_PM_OUTPUT_Voltage(LDO14, VCC_1p800);
! 
  		Set_MAX8998_PM_REG(ELDO14, 1);
! 
! 		// Turn CAM_ISP_2.8V on
! 		Set_MAX8998_PM_OUTPUT_Voltage(LDO15, VCC_2p800);
! 
  		Set_MAX8998_PM_REG(ELDO15, 1);
! 
! 		// Turn CAM_SENSOR_1.8V on
! 		Set_MAX8998_PM_OUTPUT_Voltage(LDO16, VCC_1p800);
! 
! 		Set_MAX8998_PM_REG(ELDO16, 1);
! 
! 		// Turn CAM_ISP_SYS_2.8V on
! 		gpio_direction_output(GPIO_GPB7, 0);
! 
! 		gpio_set_value(GPIO_GPB7, 1);
! 	}
! 	
! 	else { // power off
! 		// Turn CAM_ISP_SYS_2.8V off
! 		gpio_direction_output(GPIO_GPB7, 1);
! 				
! 		gpio_set_value(GPIO_GPB7, 0);
! 
! 		// Turn CAM_AF_2.8V off
  		Set_MAX8998_PM_REG(ELDO11, 0);
+ 		
+ 		// Turn CAM_SENSOR_1.2V off
+ 		Set_MAX8998_PM_REG(ELDO12, 0);
+ 		
+ 		// Turn CAM_SENSOR_A2.8V off
+ 		Set_MAX8998_PM_REG(ELDO13, 0);
+ 		
+ 		// Turn CAM_ISP_1.8V off
+ 		Set_MAX8998_PM_REG(ELDO14, 0);
+ 		
+ 		// Turn CAM_ISP_2.8V off
+ 		Set_MAX8998_PM_REG(ELDO15, 0);
+ 		
+ 		// Turn CAM_SENSOR_1.8V off
+ 		Set_MAX8998_PM_REG(ELDO16, 0);
+ 		
+ 		mdelay(1);
+ 		
+ 		// Turn CAM_ISP_1.2V off
  		Set_MAX8998_PM_REG(EN4, 0);
  	}
! 
! 	gpio_free(GPIO_GPB7);
  }
  
  
*************** static int ce147_cam_nrst(bool onoff)
*** 968,978 ****
--- 902,923 ----
  }
  
  
+ #if defined(CONFIG_ARIES_NTT)
+ int bCamera_start = 0;
+ EXPORT_SYMBOL(bCamera_start);
+ #endif
+ 
+ 
+ 
  static int ce147_power_on(void)
  {	
  	int err;
  
  	printk(KERN_DEBUG "ce147_power_on\n");
+ #if defined(CONFIG_ARIES_NTT)
+ 		bCamera_start=TRUE;
+ #endif		
+ 
  
  	/* CAM_MEGA_EN - GPJ0(6) */
  	err = gpio_request(GPIO_CAM_MEGA_EN, "GPJ0");
*************** static int ce147_power_off(void)
*** 1071,1076 ****
--- 1016,1024 ----
  	int err;
  	
  	printk(KERN_DEBUG "ce147_power_off\n");
+ #if defined(CONFIG_ARIES_NTT)
+ 			bCamera_start=FALSE;
+ #endif
  
  	/* CAM_MEGA_EN - GPJ0(6) */
  	err = gpio_request(GPIO_CAM_MEGA_EN, "GPJ0");
*************** static int ce147_power_off(void)
*** 1141,1147 ****
  
  static int ce147_power_en(int onoff)
  {
! 	//int bd_level; froyo merge
  #if 0
  	if(onoff){
  		ce147_ldo_en(true);
--- 1089,1095 ----
  
  static int ce147_power_en(int onoff)
  {
! 	int bd_level;
  #if 0
  	if(onoff){
  		ce147_ldo_en(true);
*************** static int s5ka3dfx_power_on()
*** 1376,1382 ****
--- 1324,1341 ----
  		return err;
  	}
  
+ 	/* CAM_IO_EN - GPB(7) */
+ 	err = gpio_request(GPIO_GPB7, "GPB7");
+ 
+ 	if(err) {
+ 		printk(KERN_ERR "failed to request GPB7 for camera control\n");
+ 
+ 		return err;
+ 	}
  
+ 	// Turn CAM_ISP_SYS_2.8V on
+ 	gpio_direction_output(GPIO_GPB7, 0);
+ 	gpio_set_value(GPIO_GPB7, 1);
  
  	mdelay(1);
  
*************** static int s5ka3dfx_power_on()
*** 1398,1404 ****
  
  	mdelay(1);
  
! 	//gpio_free(GPIO_GPB7); froyo merge
  
  	// CAM_VGA_nSTBY  HIGH
  	gpio_direction_output(GPIO_CAM_VGA_nSTBY, 0);
--- 1357,1363 ----
  
  	mdelay(1);
  	
! 	gpio_free(GPIO_GPB7);	
  
  	// CAM_VGA_nSTBY  HIGH		
  	gpio_direction_output(GPIO_CAM_VGA_nSTBY, 0);
*************** static int s5ka3dfx_power_off()
*** 1466,1472 ****
  	gpio_set_value(GPIO_CAM_VGA_nSTBY, 0);
  
  	mdelay(1);
! #if 0 //froro merge
  	/* CAM_IO_EN - GPB(7) */
  	err = gpio_request(GPIO_GPB7, "GPB7");
  
--- 1425,1431 ----
  	gpio_set_value(GPIO_CAM_VGA_nSTBY, 0);
  
  	mdelay(1);
! 
  	/* CAM_IO_EN - GPB(7) */
  	err = gpio_request(GPIO_GPB7, "GPB7");
  
*************** static int s5ka3dfx_power_off()
*** 1475,1481 ****
  
  		return err;
  	}
! #endif
  	// Turn CAM_ISP_HOST_2.8V off
  	Set_MAX8998_PM_REG(ELDO15, 0);
  
--- 1434,1440 ----
  
  		return err;
  	}
! 
  	// Turn CAM_ISP_HOST_2.8V off
  	Set_MAX8998_PM_REG(ELDO15, 0);
  
*************** static int s5ka3dfx_power_off()
*** 1488,1499 ****
  	Set_MAX8998_PM_REG(ELDO14, 0);
  
  	// Turn CAM_ISP_SYS_2.8V off
- #if 0 //froyo merge
  	gpio_direction_output(GPIO_GPB7, 1);
  	gpio_set_value(GPIO_GPB7, 0);
  
  	gpio_free(GPIO_GPB7);
- #endif
  	gpio_free(GPIO_CAM_VGA_nSTBY);
  	gpio_free(GPIO_CAM_VGA_nRST);
  
--- 1447,1456 ----
*************** static struct i2c_board_info i2c_devs4[]
*** 1645,1655 ****
  #endif
  };
  
! #if 0 // froyo merge
  /* I2C1 */
  static struct i2c_board_info i2c_devs1[] __initdata = {
  };
- #endif
  
  /* i2c board & device info. */
  static struct qt602240_platform_data qt602240_p1_platform_data = {
--- 1602,1611 ----
  #endif
  };
  
! 
  /* I2C1 */
  static struct i2c_board_info i2c_devs1[] __initdata = {
  };
  
  /* i2c board & device info. */
  static struct qt602240_platform_data qt602240_p1_platform_data = {
*************** static struct i2c_board_info i2c_devs5[]
*** 1684,1700 ****
  	{
  		I2C_BOARD_INFO("smb380", (0x38)),
  	},
!         {
!                 I2C_BOARD_INFO("fsa9480", (0x4A >> 1)),
!         },
!         {
!                 I2C_BOARD_INFO("yamaha", 0x2e),
!         },
! 
! };
! 
! static struct i2c_board_info i2c_devs6[] __initdata = {
! #ifdef CONFIG_REGULATOR_MAX8998
  	{
  		/* The address is 0xCC used since SRAD = 0 */
  		I2C_BOARD_INFO("max8998", (0xCC >> 1)),
--- 1640,1649 ----
  	{
  		I2C_BOARD_INFO("smb380", (0x38)),
  	},
! };
! 
! static struct i2c_board_info i2c_devs6[] __initdata = {
! #ifdef CONFIG_REGULATOR_MAX8998
  	{
  		/* The address is 0xCC used since SRAD = 0 */
  		I2C_BOARD_INFO("max8998", (0xCC >> 1)),
*************** static struct i2c_board_info i2c_devs6[]
*** 1706,1711 ****
--- 1655,1666 ----
  #endif
  };
  
+ static struct i2c_board_info i2c_devs7[] __initdata = {
+ 	{
+ 		I2C_BOARD_INFO("fsa9480", (0x4A >> 1)),
+ 	},
+ };
+ 
  static struct i2c_board_info i2c_devs8[] __initdata = {
  	{
  		I2C_BOARD_INFO("Si4709", (0x20 >> 1)),
*************** static struct i2c_board_info i2c_devs11[
*** 1723,1728 ****
--- 1678,1690 ----
  		I2C_BOARD_INFO("gp2a", (0x88 >> 1)),
  	},
  };
+ 
+ static struct i2c_board_info i2c_devs12[] __initdata = {
+ 	{
+ 		I2C_BOARD_INFO("yamaha", 0x2e),
+ 	},
+ };
+ 
  #ifdef CONFIG_DM9000
  static void __init smdkv210_dm9000_set(void)
  {
*************** static void __init android_pmem_set_plat
*** 1807,1844 ****
  }
  #endif
  struct platform_device sec_device_battery = {
! 	.name	= "sec-battery",
  	.id		= -1,
  };
  
- struct gpio_led leds_gpio[] = {
- 	{
- 		.name = "red",
- 		.default_trigger = NULL,	//"default-on",	// hanapark DF15: Turn ON RED LED at boot time !
- 		.gpio = GPIO_SVC_LED_RED,
- 		.active_low = 0,
- 	},
- 	{
- 		.name = "blue",
- 		.default_trigger = NULL,
- 		.gpio = GPIO_SVC_LED_BLUE,
- 		.active_low = 0,
- 	}
- };
- 
- 
- struct gpio_led_platform_data leds_gpio_platform_data = {
- 	.num_leds = ARRAY_SIZE(leds_gpio),
- 	.leds = leds_gpio,
- };
- 
- 
- struct platform_device sec_device_leds_gpio = {
- 	.name   = "leds-gpio",
- 	.id		= -1,
- 	.dev = { .platform_data = &leds_gpio_platform_data },
- };
- 
  static struct platform_device opt_gp2a = {
  	.name = "gp2a-opt",
  	.id = -1,
--- 1769,1778 ----
  }
  #endif
  struct platform_device sec_device_battery = {
! 	.name	= "jupiter-battery",
  	.id		= -1,
  };
  
  static struct platform_device opt_gp2a = {
  	.name = "gp2a-opt",
  	.id = -1,
*************** static struct platform_device	sec_device
*** 1860,1959 ****
  /* << bluetooth -end */
  /******************/
  
- static struct regulator_init_data max8893_ldo1_data = {
-         .constraints    = {
-                 .name           = "WIMAX_2.9V",
-                 .min_uV         = 2900000,
-                 .max_uV         = 2900000,
- 		.always_on	= 0,
-                 .apply_uV       = 1,
- 		.valid_ops_mask	= REGULATOR_CHANGE_VOLTAGE,
-         },
- };
- 
- static struct regulator_init_data max8893_ldo2_data = {
-         .constraints    = {
-                 .name           = "TOUCH_KEY_3.0V",
-                 .min_uV         = 3000000,   //20100628_inchul(from HW) 2.8V -> 3.0V
-                 .max_uV         = 3000000,  //20100628_inchul(from HW) 2.8V -> 3.0V
- 		.always_on	= 0,
-                 .apply_uV       = 1,
- 		.valid_ops_mask	= REGULATOR_CHANGE_VOLTAGE,
-         },
- };
- 
- static struct regulator_init_data max8893_ldo3_data = {
-         .constraints    = {
-                 .name           = "VCC_MOTOR_3.0V",
-                 .min_uV         = 3000000,
-                 .max_uV         = 3000000,
- 		.always_on	= 0,
-                 .apply_uV       = 1,
- 		.valid_ops_mask	= REGULATOR_CHANGE_VOLTAGE,
-         },
- };
- 
- static struct regulator_init_data max8893_ldo4_data = {
-         .constraints    = {
-                 .name           = "WIMAX_SDIO_3.0V",
-                 .min_uV         = 3000000,
-                 .max_uV         = 3000000,
- 		.always_on	= 0,
-                 .apply_uV       = 1,
- 		.valid_ops_mask	= REGULATOR_CHANGE_VOLTAGE,
-         },
- };
- 
- static struct regulator_init_data max8893_ldo5_data = {
-         .constraints    = {
-                 .name           = "VDD_RF & IO_1.8V",
-                 .min_uV         = 1800000,
-                 .max_uV         = 1800000,
- 		.always_on	= 0,
-                 .apply_uV       = 1,
- 		.valid_ops_mask	= REGULATOR_CHANGE_VOLTAGE,
-         },
- };
- 
- static struct regulator_init_data max8893_buck_data = {
-         .constraints    = {
-                 .name           = "VDDA & SDRAM & WIMAX_USB & RFC1C4_1.8V",
-                 .min_uV         = 1800000,
-                 .max_uV         = 1800000,
- 		.always_on	= 1,
-                 .apply_uV       = 1,
- 		.valid_ops_mask	= REGULATOR_CHANGE_VOLTAGE,
-         },
- };
- 
- static struct max8893_subdev_data universal_8893_regulators[] = {
- 	{ MAX8893_LDO1, &max8893_ldo1_data },
- 	{ MAX8893_LDO2, &max8893_ldo2_data },
-   { MAX8893_LDO3, &max8893_ldo3_data },
- 	{ MAX8893_LDO4, &max8893_ldo4_data },
-   { MAX8893_LDO5, &max8893_ldo5_data },
-   { MAX8893_BUCK, &max8893_buck_data },
- };
- 
- static struct max8893_platform_data max8893_platform_data = {
- 	.num_regulators	= ARRAY_SIZE(universal_8893_regulators),
- 	.regulators	= universal_8893_regulators,
- };
- 
- static struct i2c_board_info i2c_devs1[] __initdata = {
- 	{
- 		I2C_BOARD_INFO("max8893", (0x3E)),
- 		.platform_data = &max8893_platform_data,
- 	},
- };
- 
- struct platform_device s3c_device_8893consumer = {
-         .name             = "max8893-consumer",
-         .id               = 0,
-   	.dev = { .platform_data = &max8893_platform_data },
- };
- 
- 
  #if defined (CONFIG_SAMSUNG_PHONE_SVNET) || defined (CONFIG_SAMSUNG_PHONE_SVNET_MODULE)
  /* onedram */
  static void onedram_cfg_gpio(void)
--- 1794,1799 ----
*************** static struct resource mdmctl_res[] = {
*** 2043,2075 ****
  		},
  	};
  
! #elif defined(CONFIG_ARIES_VER_B2)   // froyo_merge_check : modem specfic registration currently copying atlas froyo data
! 
! static struct modemctl_platform_data mdmctl_data = {
!         .name = "xmm",
!         .gpio_phone_on = GPIO_PHONE_ON,
!         .gpio_phone_active = GPIO_PHONE_ACTIVE,
!         .gpio_pda_active = GPIO_PDA_ACTIVE,
!         .gpio_cp_reset = GPIO_CP_RST,
!         //.gpio_sim_ndetect = GPIO_SIM_nDETECT,         /* Galaxy S does not include SIM detect pin */
!         .cfg_gpio = modemctl_cfg_gpio,
! };
! 
! static struct resource mdmctl_res[] = {
!         [0] = {
!                 .start = IRQ_EINT15,
!                 .end = IRQ_EINT15,
!                 .flags = IORESOURCE_IRQ,
!                 },
!         [1] = {
!                 .start = IRQ_EINT(27),
!                 .end = IRQ_EINT(27),
!                 .flags = IORESOURCE_IRQ,
!                 },
!         };
! 
! 
! //# error Need configuration (EUR/NTT) ???  //froyo_merge_check
  #endif
  
  static struct platform_device modemctl = {
--- 1883,1890 ----
  		},
  	};
  
! #else
! # error Need configuration (EUR/NTT) ???
  #endif
  
  static struct platform_device modemctl = {
*************** static void modemctl_cfg_gpio(void)
*** 2149,2155 ****
  void s3c_config_gpio_table(int array_size, unsigned int (*gpio_table)[6])
  {
      u32 i, gpio;
- 	printk(KERN_ERR "lnt %s, START\n\n",__FUNCTION__);
      for (i = 0; i < array_size; i++) {
  		gpio = gpio_table[i][0];
  		/* Off part */
--- 1964,1969 ----
*************** void s3c_config_gpio_table(int array_siz
*** 2168,2174 ****
          	//s3c_gpio_slp_cfgpin(gpio, gpio_table[i][6]);
          	//s3c_gpio_slp_setpull_updown(gpio, gpio_table[i][7]);
  		}
! #if 0
  		/* Alive part */
  		else if((gpio <= S5PV210_GPH3(7)) && (gpio >= S5PV210_GPH0(0))) {
  	        s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(gpio_table[i][1]));
--- 1982,1988 ----
          	//s3c_gpio_slp_cfgpin(gpio, gpio_table[i][6]);
          	//s3c_gpio_slp_setpull_updown(gpio, gpio_table[i][7]);
  		}
! #if 1
  		/* Alive part */
  		else if((gpio <= S5PV210_GPH3(7)) && (gpio >= S5PV210_GPH0(0))) {
  	        s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(gpio_table[i][1]));
*************** void s3c_config_gpio_table(int array_siz
*** 2198,2214 ****
  		}
  #endif
  	}
- 	//Thomas Ryu, 20100401 to set 4mA of this GPIO
-     s3c_gpio_set_drvstrength(S5PV210_GPH3(7), S3C_GPIO_DRVSTR_2X);
- 	printk(KERN_ERR "lnt %s, end\n\n",__FUNCTION__);
  }
  
  
  #define S5PV210_PS_HOLD_CONTROL_REG (S3C_VA_SYS+0xE81C)
  
- extern int max8893_ldo_disable_direct(int);
- extern int max8893_ldo_is_enabled_direct(int);
- 
  static void smdkc110_power_off(void)
  {
  	int err;
--- 2012,2022 ----
*************** static void smdkc110_power_off(void)
*** 2225,2234 ****
  	char reset_mode = 'r';
  	int phone_wait_cnt = 0;
  
- 	int i; //froyo merge
- 
  	// Change this API call just before power-off to take the dump.
! 	 kernel_sec_clear_upload_magic_number();
  
  	err = gpio_request(GPIO_N_POWER, "GPIO_N_POWER"); // will never be freed
  	WARN(err, "failed to request GPIO_N_POWER");
--- 2033,2040 ----
  	char reset_mode = 'r';
  	int phone_wait_cnt = 0;
  
  	// Change this API call just before power-off to take the dump.
! 	// kernel_sec_clear_upload_magic_number();    
  
  	err = gpio_request(GPIO_N_POWER, "GPIO_N_POWER"); // will never be freed
  	WARN(err, "failed to request GPIO_N_POWER");
*************** static void smdkc110_power_off(void)
*** 2241,2270 ****
  
  	gpio_set_value(GPIO_PHONE_ON, 0);	//prevent phone reset when AP off
  
- #if 1 //20100429_inchul.im   To fix the leakage current issue in power off state
- 	   	for (i=1; i<=6; i++) { //from MAX8893_LDO1(1) to MAX8893_BUCK(6)
- 	     if(max8893_ldo_is_enabled_direct(i)){
- 	        max8893_ldo_disable_direct(i);
- 	     }
- 	   	}
- #endif
- 
  	// confirm phone off
  	while (1) {
  		if (gpio_get_value(GPIO_PHONE_ACTIVE)) {
! 		//	if (phone_wait_cnt > 3) {
  				printk(KERN_EMERG
  				       "%s: Try to Turn Phone Off by CP_RST\n",
  				       __func__);
  				gpio_set_value(GPIO_CP_RST, 0);
! 		//	}
! 			if (phone_wait_cnt > 1) {
  				printk(KERN_EMERG "%s: PHONE OFF Failed\n",
  				       __func__);
  				break;
  			}
  			phone_wait_cnt++;
! 			mdelay(1000);
  		} else {
  			printk(KERN_EMERG "%s: PHONE OFF Success\n", __func__);
  			break;
--- 2047,2068 ----
  
  	gpio_set_value(GPIO_PHONE_ON, 0);	//prevent phone reset when AP off
  
  	// confirm phone off
  	while (1) {
  		if (gpio_get_value(GPIO_PHONE_ACTIVE)) {
! 			if (phone_wait_cnt > 10) {
  				printk(KERN_EMERG
  				       "%s: Try to Turn Phone Off by CP_RST\n",
  				       __func__);
  				gpio_set_value(GPIO_CP_RST, 0);
! 			}
! 			if (phone_wait_cnt > 12) {
  				printk(KERN_EMERG "%s: PHONE OFF Failed\n",
  				       __func__);
  				break;
  			}
  			phone_wait_cnt++;
! 			msleep(1000);
  		} else {
  			printk(KERN_EMERG "%s: PHONE OFF Success\n", __func__);
  			break;
*************** static void smdkc110_power_off(void)
*** 2300,2306 ****
  			printk(KERN_EMERG "%s: waiting for reset!\n", __func__);
  			while (1) ;
  		}
! 		//kernel_sec_clear_upload_magic_number();
  		// wait for power button release
  		if (gpio_get_value(GPIO_N_POWER)) {
  			printk(KERN_EMERG "%s: set PS_HOLD low.\n", __func__);
--- 2098,2104 ----
  			printk(KERN_EMERG "%s: waiting for reset!\n", __func__);
  			while (1) ;
  		}
! 		kernel_sec_clear_upload_magic_number();
  		// wait for power button release
  		if (gpio_get_value(GPIO_N_POWER)) {
  			printk(KERN_EMERG "%s: set PS_HOLD low.\n", __func__);
*************** void s3c_config_sleep_gpio_table(int arr
*** 2332,2338 ****
  		s3c_gpio_slp_cfgpin(gpio, gpio_table[i][1]);
  		s3c_gpio_slp_setpull_updown(gpio, gpio_table[i][2]);
  	}
! #if 0
  	if (gpio_get_value(GPIO_PS_ON))
  	{
  		s3c_gpio_slp_setpull_updown(GPIO_ALS_SDA_28V, S3C_GPIO_PULL_NONE);
--- 2130,2136 ----
  		s3c_gpio_slp_cfgpin(gpio, gpio_table[i][1]);
  		s3c_gpio_slp_setpull_updown(gpio, gpio_table[i][2]);
  	}
! 
  	if (gpio_get_value(GPIO_PS_ON))
  	{
  		s3c_gpio_slp_setpull_updown(GPIO_ALS_SDA_28V, S3C_GPIO_PULL_NONE);
*************** void s3c_config_sleep_gpio_table(int arr
*** 2351,2360 ****
  	printk(KERN_DEBUG "SLPGPIO : PS_ON(%d) FM_RST(%d) UART_SEL(%d)\n",
  		gpio_get_value(GPIO_PS_ON),gpio_get_value(GPIO_FM_RST),gpio_get_value(GPIO_UART_SEL));
  #endif
- #endif
  }
  
  // just for ref..
  void s3c_config_sleep_gpio(void)
  {
      u32 i, gpio;
--- 2149,2158 ----
  	printk(KERN_DEBUG "SLPGPIO : PS_ON(%d) FM_RST(%d) UART_SEL(%d)\n",
  		gpio_get_value(GPIO_PS_ON),gpio_get_value(GPIO_FM_RST),gpio_get_value(GPIO_UART_SEL));
  #endif
  }
  
  // just for ref.. 	
+ //
  void s3c_config_sleep_gpio(void)
  {
      u32 i, gpio;
*************** void s3c_config_gpio_alive_table(int arr
*** 2389,2509 ****
  }
  
  static struct platform_device *smdkc110_devices[] __initdata = {
! 	&s3c_device_fb,
! 	&s3c_device_mfc,
! #ifdef CONFIG_FB_S3C_TL2796
! 	&s3c_device_spi_gpio,
! #endif
! #ifdef CONFIG_S3C_DEV_HSMMC
!         &s3c_device_hsmmc0,
  #endif
  
! #ifdef CONFIG_S3C_DEV_HSMMC1
!         &s3c_device_hsmmc1,
  #endif
  
! #ifdef CONFIG_S3C_DEV_HSMMC2
!         &s3c_device_hsmmc2,
  #endif
! 
! #ifdef CONFIG_S3C_DEV_HSMMC3
!         &s3c_device_hsmmc3,
  #endif
- 
  #ifdef CONFIG_S3C2410_WATCHDOG
  	&s3c_device_wdt,
  #endif
  
! #ifdef CONFIG_ANDROID_PMEM
! 	&pmem_device,
! 	&pmem_gpu1_device,
! 	&pmem_adsp_device,
  #endif
- //#ifdef CONFIG_RTC_DRV_S3C
- 	&s5p_device_rtc,
- //#endif
  
  #ifdef CONFIG_HAVE_PWM
  	&s3c_device_timer[0],
  	&s3c_device_timer[1],
  	&s3c_device_timer[2],
  	&s3c_device_timer[3],
- 
  #endif
! #ifdef CONFIG_SPI_CNTRLR_0
!         &s3c_device_spi0,
! #endif
! #ifdef CONFIG_SPI_CNTRLR_1
!         &s3c_device_spi1,
! #endif
! #ifdef CONFIG_MMC_SPI_GPIO	//for mmc-spi gpio bitbanging
!       	&s3c_device_spi_bitbang,
! #elif defined(CONFIG_SPI_CNTRLR_2)
! 	&s3c_device_spi2,
! #endif
! 	&s3c_device_usbgadget,
! 	&s3c_device_keypad,
! #if defined(CONFIG_TOUCHSCREEN_QT602240) 
! 	&s3c_device_qtts,
! //#endif
! #else 
! //#if defined(CONFIG_TOUCHSCREEN_MELFAS) //victory.boot
! 	&s3c_device_melfasts,
! #endif
!     &s5p_trs_detect, //mkh
! 	&sec_device_dpram,
  	&s3c_device_adc,
  	#ifdef CONFIG_SND_S3C24XX_SOC
          &s3c64xx_device_iis0,
  	#endif
! 	&s3c_device_cfcon,
! 	&s5p_device_tvout,
  	&s3c_device_fimc0,
  	&s3c_device_fimc1,
  	&s3c_device_fimc2,
! 	#if defined(CONFIG_SEC_HEADSET)
  	&sec_device_jack,
  	#endif
! 	&s3c_device_csis,
  	&s3c_device_i2c0,
  	&s3c_device_i2c1,
  	&s3c_device_i2c2,
- 	&s3c_device_ipc,
- 	&s3c_device_jpeg,
  	&s3c_device_i2c4,
! 	&s3c_device_i2c5,
! 	&s3c_device_i2c6,
! //	&s3c_device_i2c7,// victory ansari
! //	&s3c_device_i2c8,
! #if 1//CONFIG_ARIES_VER_B1... pfe
! 	&s3c_device_i2c9,
! #endif//CONFIG_ARIES_VER_B1... pfe
! #if defined CONFIG_ARIES_VER_B0 || !defined ( CONFIG_ARIES_VER_B1 )
! #if 0 //victory.boot
! 	&s3c_device_i2c10,
!        &s3c_device_i2c12,
! #endif
! #endif
! #ifdef CONFIG_ARIES_VER_B2
! 	&s3c_device_i2c11,
! 	&s3c_device_i2c13, //hojun_kim
! 	&s3c_device_i2c14, // hanapark (fuel gauge i2c driver)
  #endif
- 	&opt_gp2a,
- 	&s3c_device_8998consumer,
-     &s3c_device_tsi,
  	&sec_device_rfkill,
  	&sec_device_btsleep,
! 	&sec_device_battery,
! 	&sec_device_leds_gpio,	// hanapark
! #if 1//CONFIG_ARIES_VER_B1... pfe
!   &s3c_device_8893consumer,
! #endif//CONFIG_ARIES_VER_B2... pfe
  };
  
  unsigned int HWREV=0;
  EXPORT_SYMBOL(HWREV);
  
  
  
  static void __init smdkc110_fixup(struct machine_desc *desc,
--- 2188,2394 ----
  }
  
  static struct platform_device *smdkc110_devices[] __initdata = {
! #ifdef CONFIG_RTC_DRV_S3C
! 	&s5p_device_rtc,
  #endif
+ 	&s3c_device_keypad,
  
! #ifdef CONFIG_REGULATOR_MAX8998
! 	&s3c_device_8998consumer,
  #endif
  
! #ifdef CONFIG_MTD_ONENAND
! 	&s3c_device_onenand,
  #endif
! #ifdef CONFIG_FB_S3C
! 	&s3c_device_fb,
! #endif
! #ifdef CONFIG_TOUCHSCREEN_S3C
! 	&s3c_device_ts,
! #endif
! #ifdef CONFIG_S5PV210_ADCTS
! 	&s3c_device_adcts,
! #endif
! #ifdef CONFIG_DM9000
! 	&s5p_device_dm9000,
  #endif
  #ifdef CONFIG_S3C2410_WATCHDOG
  	&s3c_device_wdt,
  #endif
+ #if defined(CONFIG_BLK_DEV_IDE_S3C)
+ 	&s3c_device_cfcon,
+ #endif
  
! #ifdef CONFIG_FB_S3C_TL2796
!         &s3c_device_spi_gpio,
  #endif
  
  #ifdef CONFIG_HAVE_PWM
  	&s3c_device_timer[0],
  	&s3c_device_timer[1],
  	&s3c_device_timer[2],
  	&s3c_device_timer[3],
  #endif
! 
! #ifdef	CONFIG_S5P_ADC
  	&s3c_device_adc,
+ #endif
  #ifdef CONFIG_SND_S3C24XX_SOC
  	&s3c64xx_device_iis0,
  #endif
! #ifdef CONFIG_VIDEO_FIMC
  	&s3c_device_fimc0,
  	&s3c_device_fimc1,
  	&s3c_device_fimc2,
! 	&s3c_device_csis,
! 	&s3c_device_ipc,
! #endif
      &sec_device_jack,
+ 
+ #ifdef CONFIG_VIDEO_MFC50
+ 	&s3c_device_mfc,
  #endif
! 
! #ifdef CONFIG_VIDEO_JPEG_V2
! 	&s3c_device_jpeg,
! #endif
! 
! #ifdef CONFIG_VIDEO_ROTATOR
! 	&s5p_device_rotator,
! #endif
! 
! 
  	&s3c_device_i2c0,
  	&s3c_device_i2c1,
  	&s3c_device_i2c2,
          &s3c_device_i2c4,
!         &s3c_device_i2c5,  /* accel sensor */
! 	&s3c_device_i2c6,  /* PMIC */
! 	&s3c_device_i2c7,  /* For FSA micro USB switch */
! #if !defined(CONFIG_ARIES_NTT)
! 	&s3c_device_i2c8,  /* For SI4709 */	
! #endif
!         &s3c_device_i2c9,  /* fuel gague */
! 	&s3c_device_i2c10, /* For touchkey */
!         &s3c_device_i2c11, /* optical sensor */
! 	&s3c_device_i2c12, /* magnetic sensor */
! 
! #ifdef CONFIG_USB
! 	&s3c_device_usb_ehci,
! 	&s3c_device_usb_ohci,
! #endif
! #ifdef CONFIG_USB_GADGET
! 	&s3c_device_usbgadget,
! #endif
! #ifdef CONFIG_USB_ANDROID
! 	&s3c_device_android_usb,
! 	&s3c_device_usb_mass_storage,
! #endif
! 
! #ifdef CONFIG_SAMSUNG_PHONE_TTY_MODULE // kt.hur
! 	&sec_device_dpram,
! #endif
! 
! #ifdef CONFIG_S3C_DEV_HSMMC
! 	&s3c_device_hsmmc0,
! #endif
! #ifdef CONFIG_S3C_DEV_HSMMC1
! 	&s3c_device_hsmmc1,
! #endif
! #ifdef CONFIG_S3C_DEV_HSMMC2
! 	&s3c_device_hsmmc2,
! #endif
! #ifdef CONFIG_S3C_DEV_HSMMC3
! 	&s3c_device_hsmmc3,
! #endif
! 
! #ifdef CONFIG_VIDEO_TV20
! 	&s5p_device_tvout,
! 	&s5p_device_cec,
! 	&s5p_device_hpd,
! #endif
! 
! #ifdef CONFIG_ANDROID_PMEM
! 	&pmem_device,
! 	&pmem_gpu1_device,
! 	&pmem_adsp_device,
! #endif
! 	&sec_device_battery,
! #ifdef CONFIG_VIDEO_G2D
! 	&s5p_device_g2d,
  #endif
  	&sec_device_rfkill,
  	&sec_device_btsleep,
! #if defined(CONFIG_TOUCHSCREEN_QT602240)
! 	&s3c_device_qtts,
! #endif
! 	&opt_gp2a 
  };
  
  unsigned int HWREV=0;
  EXPORT_SYMBOL(HWREV);
  
+ static int read_hwversion(void)
+ {
+         int err;
+         int hwver = -1;
+         int hwver_0 = -1;
+         int hwver_1 = -1;
+         int hwver_2 = -1;
+ 
+         err = gpio_request(S5PV210_GPJ0(2), "HWREV_MODE0");
+ 
+         if (err) {
+                 printk(KERN_ERR "failed to request GPJ0(2) for "
+                         "HWREV_MODE0\n");
+                 return err;
+         }
+         err = gpio_request(S5PV210_GPJ0(3), "HWREV_MODE1");
+ 
+         if (err) {
+                 printk(KERN_ERR "failed to request GPJ0(3) for "
+                         "HWREV_MODE1\n");
+                 return err;
+         }
+         err = gpio_request(S5PV210_GPJ0(4), "HWREV_MODE2");
+ 
+         if (err) {
+                 printk(KERN_ERR "failed to request GPJ0(4) for "
+                         "HWREV_MODE2\n");
+                 return err;
+         }
+ 
+         gpio_direction_input(S5PV210_GPJ0(2));
+         gpio_direction_input(S5PV210_GPJ0(3));
+         gpio_direction_input(S5PV210_GPJ0(4));
+ 
+         hwver_0 = gpio_get_value(S5PV210_GPJ0(2));
+         hwver_1 = gpio_get_value(S5PV210_GPJ0(3));
+         hwver_2 = gpio_get_value(S5PV210_GPJ0(4));
+ 
+         gpio_free(S5PV210_GPJ0(2));
+         gpio_free(S5PV210_GPJ0(3));
+         gpio_free(S5PV210_GPJ0(4));
+ 	
+ 	if((hwver_0 == 0)&&(hwver_1 == 1)&&(hwver_2 == 0)){
+                 hwver = 2;
+                 printk("+++++++++[I9000 Rev0.1 board]++++++++ hwver_0: %d, hwver_1: %d, hwver_2: %d\n", hwver_0, hwver_1, hwver_2);
+         }
+         else if((hwver_0 == 1)&&(hwver_1 == 0)&&(hwver_2 == 1)){
+                 hwver = 2;
+                 printk("+++++++++[B5 board]++++++++ hwver_0: %d, hwver_1: %d, hwver_2: %d\n", hwver_0, hwver_1, hwver_2);
+         }
+         else if((hwver_0 == 0)&&(hwver_1 == 1)&&(hwver_2 == 1)){
+                 hwver = 2;
+                 printk("+++++++++[ARIES B5 board]++++++++ hwver_0: %d, hwver_1: %d, hwver_2: %d\n", hwver_0, hwver_1, hwver_2);
+         }
+         else{
+                 hwver = 0;
+                 //printk("+++++++++[B2, B3 board]++++++++ hwver_0: %d, hwver_1: %d, hwver_2: %d\n", hwver_0, hwver_1, hwver_2);
+         }
+ 
+         return hwver;
+ }
  
  
  static void __init smdkc110_fixup(struct machine_desc *desc,
*************** static void __init smdkc110_fixup(struct
*** 2520,2533 ****
          mi->bank[1].size = 256 * SZ_1M; /* this value wil be changed to 256MB */
          mi->bank[1].node = 1;
  
! 	#ifdef CONFIG_DDR_RAM_3G
          mi->bank[2].start = 0x50000000;
          mi->bank[2].size = 128 * SZ_1M;
          mi->bank[2].node = 2;
          mi->nr_banks = 3;
- 	#else
-         mi->nr_banks = 2;
- 	#endif
  
  }
  
--- 2405,2416 ----
          mi->bank[1].size = 256 * SZ_1M; /* this value wil be changed to 256MB */
          mi->bank[1].node = 1;
  
! 	mi->nr_banks = 2;
! 
          mi->bank[2].start = 0x50000000;
          mi->bank[2].size = 128 * SZ_1M;
          mi->bank[2].node = 2;
          mi->nr_banks = 3;
  
  }
  
*************** void _hw_version_check(void)
*** 2585,2592 ****
  	printk("S5PC110 Hardware version : EVT%d \n",s5pc110_version);
  
  	iounmap(phy_address);
- 	
- 	printk(KERN_ERR "lnt %s, END\n",__FUNCTION__);
  }
  
  /* Temporally used
--- 2468,2473 ----
*************** static void __init qt_touch_init(void)
*** 2630,2658 ****
  extern void set_pmic_gpio(void);
  static void jupiter_init_gpio(void)
  {
- 	//cky 20101005: initialize SCL,SDA for EEPROM
- 	s3c_gpio_cfgpin(S5PV210_MP05(3), S3C_GPIO_INPUT);
- 	s3c_gpio_setpull(S5PV210_MP05(3), S3C_GPIO_PULL_NONE);
- 	s3c_gpio_cfgpin(S5PV210_MP05(4), S3C_GPIO_INPUT);
- 	s3c_gpio_setpull(S5PV210_MP05(4), S3C_GPIO_PULL_NONE);
- 	
      	s3c_config_gpio_table(ARRAY_SIZE(jupiter_gpio_table), jupiter_gpio_table);
     // 	s3c_config_sleep_gpio_table(ARRAY_SIZE(jupiter_sleep_gpio_table), jupiter_sleep_gpio_table);
  
- 	printk(KERN_ERR "lnt %s, s3c_config_gpio_table over\n\n\n",__FUNCTION__);
- 	
-     	if(system_rev >= 0x08){ //20100526_inchul
- 	       printk("[jupiter_init_gpio] system_rev = %x \n", system_rev);  //temp.. will be deleted
- 	        s3c_gpio_slp_cfgpin(S5PV210_GPB(7), S3C_GPIO_SLP_OUT0); //tflash_clk
- 	        s3c_gpio_slp_setpull_updown(S5PV210_GPB(7), S3C_GPIO_PULL_NONE);
- 	}
- 
- 	if(system_rev >= 0x0A) //jihyon82.kim for ACC_INT for rev10
- 	{
- 	      s3c_gpio_slp_cfgpin(S5PV210_GPJ0(1), S3C_GPIO_SLP_INPUT);
- 	      s3c_gpio_slp_setpull_updown(S5PV210_GPJ0(1), S3C_GPIO_PULL_DOWN);
-     	}
- 
  	/*Adding pmic gpio(GPH3, GPH4, GPH5) initialisation*/
  	set_pmic_gpio();
  }
--- 2511,2519 ----
*************** static int arise_notifier_call(struct no
*** 2667,2695 ****
  			mode = REBOOT_MODE_ARM11_FOTA;
  		else if (!strcmp((char *)_cmd, "arm9_fota"))
  			mode = REBOOT_MODE_ARM9_FOTA;
! 		else if (!strcmp((char *)_cmd, "recovery")){
  			mode = REBOOT_MODE_RECOVERY;
- #ifdef CONFIG_KERNEL_DEBUG_SEC
- 		 //etinum.factory.reboot disable uart msg in bootloader for
- 		  // factory reset 2nd ack
- 		  kernel_sec_set_upload_cause(BLK_UART_MSG_FOR_FACTRST_2ND_ACK);
- #endif
- 		}
  		else if (!strcmp((char *)_cmd, "download"))
  			mode = REBOOT_MODE_DOWNLOAD;
- #ifdef CONFIG_KERNEL_DEBUG_SEC
- 		    //etinum.factory.reboot disable uart msg in bootloader for
- 		    // factory reset 2nd ack
- 		    else if (!strcmp((char *)_cmd, "factory_reboot")) {
- 			    mode = REBOOT_MODE_NONE;
- 			    kernel_sec_set_upload_cause(BLK_UART_MSG_FOR_FACTRST_2ND_ACK);
- 		    }
- #endif
  	}
  
  	if (code != SYS_POWER_OFF) {
  		sec_set_param_value(__REBOOT_MODE, &mode);
  		}
  
  	return NOTIFY_DONE;
  }
--- 2528,2544 ----
  			mode = REBOOT_MODE_ARM11_FOTA;
  		else if (!strcmp((char *)_cmd, "arm9_fota"))
  			mode = REBOOT_MODE_ARM9_FOTA;
! 		else if (!strcmp((char *)_cmd, "recovery"))
  			mode = REBOOT_MODE_RECOVERY;
  		else if (!strcmp((char *)_cmd, "download"))
  			mode = REBOOT_MODE_DOWNLOAD;
  	}
  
  	if (code != SYS_POWER_OFF) {
+ 		if (sec_set_param_value) {
  			sec_set_param_value(__REBOOT_MODE, &mode);
  		}
+ 	}
  
  	return NOTIFY_DONE;
  }
*************** static struct notifier_block arise_reboo
*** 2700,2712 ****
  
  static void __init smdkc110_machine_init(void)
  {
- 	printk(KERN_ERR "chk %s: system_rev 0x%x\n", __FUNCTION__, system_rev);
  	/* Find out S5PC110 chip version */
  	_hw_version_check();
  
  
  
- #if 0 // froyo merge
  	s3c_gpio_cfgpin(GPIO_HWREV_MODE0, S3C_GPIO_INPUT);
  	s3c_gpio_setpull( GPIO_HWREV_MODE0, S3C_GPIO_PULL_NONE);
  	s3c_gpio_cfgpin(GPIO_HWREV_MODE1, S3C_GPIO_INPUT);
--- 2549,2560 ----
  
  static void __init smdkc110_machine_init(void)
  {
  	/* Find out S5PC110 chip version */
  	_hw_version_check();
  
+ 	pm_power_off = smdkc110_power_off ; 
  
  
  	s3c_gpio_cfgpin(GPIO_HWREV_MODE0, S3C_GPIO_INPUT);
  	s3c_gpio_setpull( GPIO_HWREV_MODE0, S3C_GPIO_PULL_NONE); 
  	s3c_gpio_cfgpin(GPIO_HWREV_MODE1, S3C_GPIO_INPUT);
*************** static void __init smdkc110_machine_init
*** 2718,2732 ****
  	HWREV = HWREV | (gpio_get_value(GPIO_HWREV_MODE2) <<2);
  	s3c_gpio_cfgpin(GPIO_HWREV_MODE3, S3C_GPIO_INPUT);
  	s3c_gpio_setpull( GPIO_HWREV_MODE3, S3C_GPIO_PULL_NONE);
  	HWREV = HWREV | (gpio_get_value(GPIO_HWREV_MODE3) <<3);
  	printk("HWREV is 0x%x\n", HWREV);
  #endif
- 
- 
  	/*initialise the gpio's*/
  	jupiter_init_gpio();
  
- 
  	/* OneNAND */
  #ifdef CONFIG_MTD_ONENAND
  	//s3c_device_onenand.dev.platform_data = &s5p_onenand_data;
--- 2566,2581 ----
  	HWREV = HWREV | (gpio_get_value(GPIO_HWREV_MODE2) <<2);
  	s3c_gpio_cfgpin(GPIO_HWREV_MODE3, S3C_GPIO_INPUT);
  	s3c_gpio_setpull( GPIO_HWREV_MODE3, S3C_GPIO_PULL_NONE); 
+ #if !defined(CONFIG_ARIES_NTT)
  	HWREV = HWREV | (gpio_get_value(GPIO_HWREV_MODE3) <<3);
  	printk("HWREV is 0x%x\n", HWREV);
+ #else
+ 	HWREV = 0x0E;
+ 	printk("HWREV is 0x%x\n", HWREV);
  #endif
  	/*initialise the gpio's*/
  	jupiter_init_gpio();
  
  	/* OneNAND */
  #ifdef CONFIG_MTD_ONENAND
  	//s3c_device_onenand.dev.platform_data = &s5p_onenand_data;
*************** static void __init smdkc110_machine_init
*** 2753,2772 ****
  	s3c_i2c1_set_platdata(NULL);
  	s3c_i2c2_set_platdata(NULL);
  	i2c_register_board_info(0, i2c_devs0, ARRAY_SIZE(i2c_devs0));
! //	i2c_register_board_info(1, i2c_devs1, ARRAY_SIZE(i2c_devs1));
! 	i2c_register_board_info(9, i2c_devs1, ARRAY_SIZE(i2c_devs1)); //chk: froyo upgd
  	i2c_register_board_info(2, i2c_devs2, ARRAY_SIZE(i2c_devs2));
  	i2c_register_board_info(4, i2c_devs4, ARRAY_SIZE(i2c_devs4));
! 	i2c_register_board_info(5, i2c_devs5, ARRAY_SIZE(i2c_devs5)); //for FSA9480 Magnetic Sensor SMB380 same i2c device
  	i2c_register_board_info(6, i2c_devs6, ARRAY_SIZE(i2c_devs6));
! 	//i2c_register_board_info(7, i2c_devs7, ARRAY_SIZE(i2c_devs7)); /* for fsa9480 */
  	i2c_register_board_info(8, i2c_devs8, ARRAY_SIZE(i2c_devs8)); /* for Si4709 */
! 	i2c_register_board_info(14, i2c_devs9, ARRAY_SIZE(i2c_devs9));
! 	i2c_register_board_info(13, i2c_devs10, ARRAY_SIZE(i2c_devs10)); /* for touchkey */
  	i2c_register_board_info(11, i2c_devs11, ARRAY_SIZE(i2c_devs11)); /* optical sensor */
! 	//i2c_register_board_info(12, i2c_devs12, ARRAY_SIZE(i2c_devs12)); /* magnetic sensor */
  
- 	pm_power_off = smdkc110_power_off ;
  #ifdef CONFIG_FB_S3C_LTE480WV
  	s3cfb_set_platdata(&lte480wv_fb_data);
  #endif
--- 2602,2619 ----
  	s3c_i2c1_set_platdata(NULL);
  	s3c_i2c2_set_platdata(NULL);
  	i2c_register_board_info(0, i2c_devs0, ARRAY_SIZE(i2c_devs0));
! 	i2c_register_board_info(1, i2c_devs1, ARRAY_SIZE(i2c_devs1));
  	i2c_register_board_info(2, i2c_devs2, ARRAY_SIZE(i2c_devs2));
  	i2c_register_board_info(4, i2c_devs4, ARRAY_SIZE(i2c_devs4));
! 	i2c_register_board_info(5, i2c_devs5, ARRAY_SIZE(i2c_devs5));
  	i2c_register_board_info(6, i2c_devs6, ARRAY_SIZE(i2c_devs6));
! 	i2c_register_board_info(7, i2c_devs7, ARRAY_SIZE(i2c_devs7)); /* for fsa9480 */
  	i2c_register_board_info(8, i2c_devs8, ARRAY_SIZE(i2c_devs8)); /* for Si4709 */	
! 	i2c_register_board_info(9, i2c_devs9, ARRAY_SIZE(i2c_devs9));
! 	i2c_register_board_info(10, i2c_devs10, ARRAY_SIZE(i2c_devs10)); /* for touchkey */
  	i2c_register_board_info(11, i2c_devs11, ARRAY_SIZE(i2c_devs11)); /* optical sensor */
! 	i2c_register_board_info(12, i2c_devs12, ARRAY_SIZE(i2c_devs12)); /* magnetic sensor */
  
  #ifdef CONFIG_FB_S3C_LTE480WV
  	s3cfb_set_platdata(&lte480wv_fb_data);
  #endif
*************** static void __init smdkc110_machine_init
*** 2832,2843 ****
  #if defined(CONFIG_HAVE_PWM)
  	smdk_backlight_register();
  #endif
! #if 0
  	s3c_gpio_cfgpin( AP_I2C_SCL_28V, 1 );
  	s3c_gpio_setpull( AP_I2C_SCL_28V, S3C_GPIO_PULL_UP);
  	s3c_gpio_cfgpin( AP_I2C_SDA_28V, 1 );
  	s3c_gpio_setpull( AP_I2C_SDA_28V, S3C_GPIO_PULL_UP);
- #endif
  
  	register_reboot_notifier(&arise_reboot_notifier);
  
--- 2679,2689 ----
  #if defined(CONFIG_HAVE_PWM)
  	smdk_backlight_register();
  #endif
! 
  	s3c_gpio_cfgpin( AP_I2C_SCL_28V, 1 );
  	s3c_gpio_setpull( AP_I2C_SCL_28V, S3C_GPIO_PULL_UP); 
  	s3c_gpio_cfgpin( AP_I2C_SDA_28V, 1 );
  	s3c_gpio_setpull( AP_I2C_SDA_28V, S3C_GPIO_PULL_UP); 
  	
  	register_reboot_notifier(&arise_reboot_notifier);
  
*************** static void __init smdkc110_machine_init
*** 2849,2855 ****
  		pr_err("Failed to create device(gps)!\n");
  
  	if (gpio_is_valid(GPIO_MSENSE_nRST)) {
!                if (gpio_request(GPIO_MSENSE_nRST, "GPD"))
                          printk(KERN_ERR "Failed to request GPIO_MSENSE_nRST! \n");
  		gpio_direction_output(GPIO_MSENSE_nRST, 1);
  	}
--- 2695,2701 ----
  		pr_err("Failed to create device(gps)!\n");
  
  	if (gpio_is_valid(GPIO_MSENSE_nRST)) {
!                if (gpio_request(GPIO_MSENSE_nRST, "GPB"))
                          printk(KERN_ERR "Failed to request GPIO_MSENSE_nRST! \n");
  		gpio_direction_output(GPIO_MSENSE_nRST, 1);
  	}
*************** void s3c_setup_keypad_cfg_gpio(void)
*** 2975,2982 ****
  	unsigned int gpio;
  	unsigned int end;
  
- 	#if 0 //froyo merge
- 
  	/* gpio setting for KP_COL0 */
  	s3c_gpio_cfgpin(S5PV210_GPJ1(5), S3C_GPIO_SFN(3));
  	s3c_gpio_setpull(S5PV210_GPJ1(5), S3C_GPIO_PULL_NONE);
--- 2821,2826 ----
*************** void s3c_setup_keypad_cfg_gpio(void)
*** 3001,3008 ****
  		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
  		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
  	}
- 
- 	#endif //froyo merge
  }
  #else
  void s3c_setup_keypad_cfg_gpio(int rows, int columns)
--- 2845,2850 ----
*************** void s3c_setup_keypad_cfg_gpio(int rows,
*** 3014,3031 ****
  
  	/* Set all the necessary GPH2 pins to special-function 0 */
  	for (gpio = S5PV210_GPH3(0); gpio < end; gpio++) {
- 		if(gpio != S5PV210_GPH3(6)){
  			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
! 			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
! 			}
  	}
  
-    end = S5PV210_GPJ4(columns);
-    for (gpio = S5PV210_GPJ4(0); gpio <= end; gpio++) {
- 		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
- 
- 		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
- 	}
  	end = S5PV210_GPH2(columns);
  
  	/* Set all the necessary GPK pins to special-function 0 */
--- 2856,2865 ----
  
  	/* Set all the necessary GPH2 pins to special-function 0 */
  	for (gpio = S5PV210_GPH3(0); gpio < end; gpio++) {
  		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
! 		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
  	}
  
  	end = S5PV210_GPH2(columns);
  
  	/* Set all the necessary GPK pins to special-function 0 */
*************** void s3c_setup_keypad_cfg_gpio(int rows,
*** 3038,3044 ****
  EXPORT_SYMBOL(s3c_setup_keypad_cfg_gpio);
  #endif
  
! MACHINE_START(SMDKC110, "SPH-D700")
  	/* Maintainer: Kukjin Kim <kgene.kim@samsung.com> */
  	.phys_io	= S3C_PA_UART & 0xfff00000,
  	.io_pg_offst	= (((u32)S3C_VA_UART) >> 18) & 0xfffc,
--- 2872,2878 ----
  EXPORT_SYMBOL(s3c_setup_keypad_cfg_gpio);
  #endif
  
! MACHINE_START(SMDKC110, "SMDKC110")
  	/* Maintainer: Kukjin Kim <kgene.kim@samsung.com> */
  	.phys_io	= S3C_PA_UART & 0xfff00000,
  	.io_pg_offst	= (((u32)S3C_VA_UART) >> 18) & 0xfffc,
*************** void s3c_setup_uart_cfg_gpio(unsigned ch
*** 3063,3069 ****
  		s3c_gpio_setpull(GPIO_BT_CTS, S3C_GPIO_PULL_NONE);
  		s3c_gpio_cfgpin(GPIO_BT_RTS, S3C_GPIO_SFN(GPIO_BT_RTS_AF));
  		s3c_gpio_setpull(GPIO_BT_RTS, S3C_GPIO_PULL_NONE);
! 
  		s3c_gpio_slp_cfgpin(GPIO_BT_RXD, S3C_GPIO_SLP_PREV);
  		s3c_gpio_slp_setpull_updown(GPIO_BT_RXD, S3C_GPIO_PULL_NONE);
  		s3c_gpio_slp_cfgpin(GPIO_BT_TXD, S3C_GPIO_SLP_PREV);
--- 2897,2903 ----
  		s3c_gpio_setpull(GPIO_BT_CTS, S3C_GPIO_PULL_NONE);
  		s3c_gpio_cfgpin(GPIO_BT_RTS, S3C_GPIO_SFN(GPIO_BT_RTS_AF));
  		s3c_gpio_setpull(GPIO_BT_RTS, S3C_GPIO_PULL_NONE);
! /*
  		s3c_gpio_slp_cfgpin(GPIO_BT_RXD, S3C_GPIO_SLP_PREV);
  		s3c_gpio_slp_setpull_updown(GPIO_BT_RXD, S3C_GPIO_PULL_NONE);
  		s3c_gpio_slp_cfgpin(GPIO_BT_TXD, S3C_GPIO_SLP_PREV);
*************** void s3c_setup_uart_cfg_gpio(unsigned ch
*** 3072,3085 ****
  		s3c_gpio_slp_setpull_updown(GPIO_BT_CTS, S3C_GPIO_PULL_NONE);
  		s3c_gpio_slp_cfgpin(GPIO_BT_RTS, S3C_GPIO_SLP_PREV);
  		s3c_gpio_slp_setpull_updown(GPIO_BT_RTS, S3C_GPIO_PULL_NONE);
  		break;
  	case 1:
- 	 #if 1 //victory.boot froyo merge
- 		s3c_gpio_cfgpin(GPIO_ATSC_UART_RXD, S3C_GPIO_SFN(GPIO_ATSC_UART_RXD_AF));
- 		s3c_gpio_setpull(GPIO_ATSC_UART_RXD, S3C_GPIO_PULL_UP);
- 		s3c_gpio_cfgpin(GPIO_ATSC_UART_TXD, S3C_GPIO_SFN(GPIO_ATSC_UART_TXD_AF));
- 		s3c_gpio_setpull(GPIO_ATSC_UART_TXD, S3C_GPIO_PULL_NONE);
-         #else
  		s3c_gpio_cfgpin(GPIO_GPS_RXD, S3C_GPIO_SFN(GPIO_GPS_RXD_AF));
  		s3c_gpio_setpull(GPIO_GPS_RXD, S3C_GPIO_PULL_UP);
  		s3c_gpio_cfgpin(GPIO_GPS_TXD, S3C_GPIO_SFN(GPIO_GPS_TXD_AF));
--- 2906,2914 ----
  		s3c_gpio_slp_setpull_updown(GPIO_BT_CTS, S3C_GPIO_PULL_NONE);
  		s3c_gpio_slp_cfgpin(GPIO_BT_RTS, S3C_GPIO_SLP_PREV);
  		s3c_gpio_slp_setpull_updown(GPIO_BT_RTS, S3C_GPIO_PULL_NONE);
+ */
  		break;
  	case 1:
  		s3c_gpio_cfgpin(GPIO_GPS_RXD, S3C_GPIO_SFN(GPIO_GPS_RXD_AF));
  		s3c_gpio_setpull(GPIO_GPS_RXD, S3C_GPIO_PULL_UP);
  		s3c_gpio_cfgpin(GPIO_GPS_TXD, S3C_GPIO_SFN(GPIO_GPS_TXD_AF));
*************** void s3c_setup_uart_cfg_gpio(unsigned ch
*** 3088,3094 ****
  		s3c_gpio_setpull(GPIO_GPS_CTS, S3C_GPIO_PULL_NONE);
  		s3c_gpio_cfgpin(GPIO_GPS_RTS, S3C_GPIO_SFN(GPIO_GPS_RTS_AF));
  		s3c_gpio_setpull(GPIO_GPS_RTS, S3C_GPIO_PULL_NONE);
- 		#endif
  		break;
  	case 2:
  		s3c_gpio_cfgpin(GPIO_AP_RXD, S3C_GPIO_SFN(GPIO_AP_RXD_AF));
--- 2917,2922 ----
diff -wrp Epic-Froyo/arch/arm/mach-s5pv210/mach-smdkc110.c froyo-i9000/arch/arm/mach-s5pv210/mach-smdkc110.c
*** Epic-Froyo/arch/arm/mach-s5pv210/mach-smdkc110.c	Fri Oct  1 03:22:38 2010
--- froyo-i9000/arch/arm/mach-s5pv210/mach-smdkc110.c	Tue Oct  5 05:13:33 2010
*************** static void __init smdkc110_fixup(struct
*** 1011,1025 ****
         mi->bank[1].size = 256 * SZ_1M;
         mi->bank[1].node = 1;
  
- 	#ifdef CONFIG_DDR_RAM_3G
-         mi->bank[2].start = 0x50000000;
-         mi->bank[2].size = 128 * SZ_1M;
-         mi->bank[2].node = 2;
-         mi->nr_banks = 3;
- 	#else
          mi->nr_banks = 2;
- 	#endif
- 
  }
  
  static void __init smdkc110_map_io(void)
--- 1011,1017 ----
Only in Epic-Froyo/arch/arm/mach-s5pv210: max8893_consumer.c
diff -wrp Epic-Froyo/arch/arm/mach-s5pv210/max8998_consumer.c froyo-i9000/arch/arm/mach-s5pv210/max8998_consumer.c
*** Epic-Froyo/arch/arm/mach-s5pv210/max8998_consumer.c	Sat Nov 20 04:56:41 2010
--- froyo-i9000/arch/arm/mach-s5pv210/max8998_consumer.c	Tue Oct  5 05:13:33 2010
***************
*** 31,41 ****
  #include <linux/platform_device.h>
  #include <linux/regulator/max8998.h>
  #include <linux/regulator/consumer.h>
! #if defined CONFIG_S5PV210_VICTORY
! #include <mach/victory/max8998_function.h>
! #elif defined CONFIG_S5PV210_ATLAS
! #include <mach/atlas/max8998_function.h>
! #endif
  #define DBG(fmt...)
  //#define DBG printk
  
--- 31,40 ----
  #include <linux/platform_device.h>
  #include <linux/regulator/max8998.h>
  #include <linux/regulator/consumer.h>
! 
! #include <mach/max8998_function.h>
! 
! 
  #define DBG(fmt...)
  //#define DBG printk
  
*************** static int set_max8998(unsigned int pwr,
*** 236,265 ****
  
  void set_pmic_gpio(void)
  {
- 	printk(KERN_ERR "lnt %s, start\n",__FUNCTION__);
  	/*set set1, set2, set3 of max8998 driver as 0*/
  	/* set GPH0(3), GPH0(4) & GPH0(5) as low*/
  	s3c_gpio_cfgpin(GPIO_BUCK_1_EN_A, S3C_GPIO_OUTPUT);
  	s3c_gpio_setpin(GPIO_BUCK_1_EN_A, 0);
  	s3c_gpio_setpull(GPIO_BUCK_1_EN_A, S3C_GPIO_PULL_NONE);
  
! 	s3c_gpio_cfgpin(GPIO_OJ_SPI_MOSI, S3C_GPIO_OUTPUT);
! 	s3c_gpio_setpin(GPIO_OJ_SPI_MOSI, 0);
! 	s3c_gpio_setpull(GPIO_OJ_SPI_MOSI, S3C_GPIO_PULL_NONE);
! if(system_rev >= 0x08){
! 	s3c_gpio_cfgpin(GPIO_ATSC_SPI_MOSI, S3C_GPIO_OUTPUT);
! 	s3c_gpio_setpin(GPIO_ATSC_SPI_MOSI, 0);
! 	s3c_gpio_setpull(GPIO_ATSC_SPI_MOSI, S3C_GPIO_PULL_NONE);
! }
! else
! {
      s3c_gpio_cfgpin(GPIO_BUCK_2_EN, S3C_GPIO_OUTPUT);
  	s3c_gpio_setpin(GPIO_BUCK_2_EN, 0);
  	s3c_gpio_setpull(GPIO_BUCK_2_EN, S3C_GPIO_PULL_NONE);
- }
  
  	s3c_gpio_setpull(GPIO_AP_PS_HOLD, S3C_GPIO_PULL_NONE);
- 	printk(KERN_ERR "lnt %s, end\n",__FUNCTION__);
  }
  EXPORT_SYMBOL_GPL(set_pmic_gpio);
  
--- 235,255 ----
  
  void set_pmic_gpio(void)
  {
  	/*set set1, set2, set3 of max8998 driver as 0*/
  	/* set GPH0(3), GPH0(4) & GPH0(5) as low*/
  	s3c_gpio_cfgpin(GPIO_BUCK_1_EN_A, S3C_GPIO_OUTPUT);
  	s3c_gpio_setpin(GPIO_BUCK_1_EN_A, 0);
  	s3c_gpio_setpull(GPIO_BUCK_1_EN_A, S3C_GPIO_PULL_NONE);
  
! 	s3c_gpio_cfgpin(GPIO_BUCK_1_EN_B, S3C_GPIO_OUTPUT);
! 	s3c_gpio_setpin(GPIO_BUCK_1_EN_B, 0);
! 	s3c_gpio_setpull(GPIO_BUCK_1_EN_B, S3C_GPIO_PULL_NONE);
! 
  	s3c_gpio_cfgpin(GPIO_BUCK_2_EN, S3C_GPIO_OUTPUT);
  	s3c_gpio_setpin(GPIO_BUCK_2_EN, 0);
  	s3c_gpio_setpull(GPIO_BUCK_2_EN, S3C_GPIO_PULL_NONE);
  
  	s3c_gpio_setpull(GPIO_AP_PS_HOLD, S3C_GPIO_PULL_NONE);
  }
  EXPORT_SYMBOL_GPL(set_pmic_gpio);
  
*************** int set_gpio_dvs(enum perf_level p_lv)
*** 287,337 ****
  	switch(p_lv)
      {
          case L0:
!             //writel(((readl(S5PV210_GPH0DAT) & ~PMIC_SET_MASK)                                                ), S5PV210_GPH0DAT);
!             //BUCK_1_EN_A disabled
!             gpio_set_value(S5PV210_GPB(6),0);
!             // BUCK_1_EN_B disabled
!             gpio_set_value(S5PV210_GPB(3),0);
!             //BUCK_2_EN disabled
!             gpio_set_value(S5PV210_GPB(7),0);
!             
              break;
          case L1:
!            // writel(((readl(S5PV210_GPH0DAT) & ~PMIC_SET_MASK) | PMIC_SET1_BIT                                ), S5PV210_GPH0DAT);
!             //BUCK_1_EN_A enabled
!             gpio_set_value(S5PV210_GPB(6),1);
!             // BUCK_1_EN_B disabled
!             gpio_set_value(S5PV210_GPB(3),0);
!             //BUCK_2_EN disabled
!             gpio_set_value(S5PV210_GPB(7),0);
!            
              break;
          case L2:
!             //writel(((readl(S5PV210_GPH0DAT) & ~PMIC_SET_MASK)                 | PMIC_SET2_BIT                ), S5PV210_GPH0DAT);
!              //BUCK_1_EN_A disabled
!             gpio_set_value(S5PV210_GPB(6),0);
!             // BUCK_1_EN_B enabled
!             gpio_set_value(S5PV210_GPB(3),1);
!             //BUCK_2_EN disabled
!             gpio_set_value(S5PV210_GPB(7),0);
              break;
          case L3:
!            // writel(((readl(S5PV210_GPH0DAT) & ~PMIC_SET_MASK) | PMIC_SET1_BIT | PMIC_SET2_BIT                ), S5PV210_GPH0DAT);
!              //BUCK_1_EN_A enabled
!             gpio_set_value(S5PV210_GPB(6),1);
!             // BUCK_1_EN_B enabled
!             gpio_set_value(S5PV210_GPB(3),1);
!             //BUCK_2_EN disabled
!             gpio_set_value(S5PV210_GPB(7),0);
              break;
          case L4:
!             //writel(((readl(S5PV210_GPH0DAT) & ~PMIC_SET_MASK) | PMIC_SET1_BIT | PMIC_SET2_BIT | PMIC_SET3_BIT), S5PV210_GPH0DAT);
!              //BUCK_1_EN_A enabled
!             gpio_set_value(S5PV210_GPB(6),1);
!             // BUCK_1_EN_B enabled
!             gpio_set_value(S5PV210_GPB(3),1);
!             //BUCK_2_EN enabled
!             gpio_set_value(S5PV210_GPB(7),1);
              break;
          default:
              pr_err("[PWR] %s : Invalid parameters (%d)\n", __func__, p_lv);
--- 277,295 ----
  	switch(p_lv)
      {
          case L0:
!             writel(((readl(S5PV210_GPH0DAT) & ~PMIC_SET_MASK)                                                ), S5PV210_GPH0DAT);
              break;
          case L1:
!             writel(((readl(S5PV210_GPH0DAT) & ~PMIC_SET_MASK) | PMIC_SET1_BIT                                ), S5PV210_GPH0DAT);
              break;
          case L2:
!             writel(((readl(S5PV210_GPH0DAT) & ~PMIC_SET_MASK)                 | PMIC_SET2_BIT                ), S5PV210_GPH0DAT);
              break;
          case L3:
!             writel(((readl(S5PV210_GPH0DAT) & ~PMIC_SET_MASK) | PMIC_SET1_BIT | PMIC_SET2_BIT                ), S5PV210_GPH0DAT);
              break;
          case L4:
!             writel(((readl(S5PV210_GPH0DAT) & ~PMIC_SET_MASK) | PMIC_SET1_BIT | PMIC_SET2_BIT | PMIC_SET3_BIT), S5PV210_GPH0DAT);
              break;
          default:
              pr_err("[PWR] %s : Invalid parameters (%d)\n", __func__, p_lv);
*************** int set_gpio_dvs(enum perf_level p_lv)
*** 345,379 ****
  #else
  int set_gpio_dvs(int armSet)
  {
  	DBG("set dvs with %d\n", armSet);
  		switch(armSet) {
  		case DVSARM1:
! 			gpio_set_value(set1_gpio, 0);
! 			gpio_set_value(set2_gpio, 0);
  			break;
  		case DVSARM2:
! 			gpio_set_value(set2_gpio, 0);
! 			gpio_set_value(set1_gpio, 1);
  			break;
  		case DVSARM3:
! 			gpio_set_value(set1_gpio, 0);
! 			gpio_set_value(set2_gpio, 1);
  			break;
  		case DVSARM4:
! 			gpio_set_value(set1_gpio, 1);
! 			gpio_set_value(set2_gpio, 1);
  			break;
  		case DVSINT1:
! 			gpio_set_value(set3_gpio, 0);
  			break;
  		case DVSINT2:
! 			gpio_set_value(set3_gpio, 1);
  			break;
  		default:
  			printk("Invalid parameters to %s\n",__FUNCTION__);
  		return -EINVAL;
  		}
  
  	return 0;
  }
  #endif
--- 303,348 ----
  #else
  int set_gpio_dvs(int armSet)
  {
+ 	unsigned int curPmicArm = readl(S5PV210_GPH0DAT);
  	DBG("set dvs with %d\n", armSet);
  	switch(armSet) {
  	case DVSARM1:
! 		curPmicArm = curPmicArm & ~(PMIC_ARM_MASK); //set GPH0[3],GPH0[4] low
! 		writel(curPmicArm,S5PV210_GPH0DAT);
! 		//gpio_set_value(GPIO_BUCK_1_EN_A, 0);
! 		//gpio_set_value(GPIO_BUCK_1_EN_B, 0);
  		break;
  	case DVSARM2:
! 		curPmicArm = (curPmicArm & ~(PMIC_ARM_MASK)) | PMIC_SET1_HIGH; //set GPH0[3] high, GPH0[4] low
! 		writel(curPmicArm,S5PV210_GPH0DAT);
! 		//gpio_set_value(GPIO_BUCK_1_EN_B, 0);
! 		//gpio_set_value(GPIO_BUCK_1_EN_A, 1);
  		break;
  	case DVSARM3:
! 		curPmicArm = (curPmicArm & ~(PMIC_ARM_MASK)) | PMIC_SET2_HIGH; //set GPH0[3] low, GPH0[4] high
! 		writel(curPmicArm,S5PV210_GPH0DAT);		
! 		//gpio_set_value(GPIO_BUCK_1_EN_A, 0);
! 		//gpio_set_value(GPIO_BUCK_1_EN_B, 1);
  		break;
  	case DVSARM4:
! 		curPmicArm = (curPmicArm & ~(PMIC_ARM_MASK)) | PMIC_SET1_HIGH | PMIC_SET2_HIGH; //set GPH0[3],GPH0[4] high
! 		writel(curPmicArm,S5PV210_GPH0DAT);	
! 		//gpio_set_value(GPIO_BUCK_1_EN_A, 1);
! 		//gpio_set_value(GPIO_BUCK_1_EN_B, 1);
  		break;
  	case DVSINT1:
! 		gpio_set_value(GPIO_BUCK_2_EN, 0);
  		break;
  	case DVSINT2:
! 		gpio_set_value(GPIO_BUCK_2_EN, 1);
  		break;
  	default:
  		printk("Invalid parameters to %s\n",__FUNCTION__);
  		return -EINVAL;
  	}
  
+ 	DBG("S5PV210_GPH0CON=%x,S5PV210_GPH0DAT=%x,S5PV210_GPH0PUD=%x\n",readl(S5PV210_GPH0CON),readl(S5PV210_GPH0DAT),readl(S5PV210_GPH0PUD));
+ 
  	return 0;
  }
  #endif
*************** static int ldo_disable_check(int ldo)
*** 561,582 ****
  				return 1;
  			break;
  #endif
- #if 0
  		case MAX8998_LDO4:
  			if(get_headset_status()==SEC_HEADSET_4_POLE_DEVICE) //fix sendend is low in sleep
  				return 0;
  			else
  				return 1;
- 				break;
- #endif
-    case MAX8998_LDO6: //20100518_inchul.. BT_WL_2.6V(LDO6): alive power in sleep mode(for victory)
- 			return 0;
- 			break;
- 
-    case MAX8998_LDO16: //20100518_inchul.. MIPI_1.8V_C110(LDO16): alive power in sleep mode(for victory)
- 			return 0;
- 			break;
- 
  		default:
  			return 1;
  	}
--- 530,540 ----
*************** static int s3c_consumer_suspend(struct p
*** 603,630 ****
  	//max8998_ldo_disable_direct(MAX8998_DCDC3);
  	max8998_ldo_disable_direct(MAX8998_DCDC2);
  	max8998_ldo_disable_direct(MAX8998_DCDC1);
- 
- 	  if(universal_sdhci2_detect_ext_cd()) //card not present
- 	       {
- 	            s3c_gpio_slp_cfgpin(S5PV210_GPG2(2),S3C_GPIO_SLP_OUT0);
- 	       }
- 	       else
- 	       {
- 	            unsigned int gpio;
- 
- 	            s3c_gpio_slp_cfgpin(S5PV210_GPG2(2),S3C_GPIO_SLP_OUT1 ); //tflash_enable
- 
- 	            s3c_gpio_slp_cfgpin(S5PV210_GPG2(0),S3C_GPIO_SFN(2) ); //tflash_clk
- 	            s3c_gpio_slp_setpull_updown(S5PV210_GPG2(0), S3C_GPIO_PULL_UP);
- 	            for (gpio = S5PV210_GPG2(1); gpio < S5PV210_GPG2(7); gpio++)
- 	            {
- 	                  if (gpio != S5PV210_GPG2(2))
- 	                  {
- 	        		    s3c_gpio_slp_cfgpin(gpio, S3C_GPIO_SFN(2));
- 	        		    s3c_gpio_slp_setpull_updown(gpio, S3C_GPIO_PULL_NONE);
- 	                 }
- 		    }
-        }
  	return 0;
  }
  
--- 561,566 ----
diff -wrp Epic-Froyo/arch/arm/mach-s5pv210/sec_jack.c froyo-i9000/arch/arm/mach-s5pv210/sec_jack.c
*** Epic-Froyo/arch/arm/mach-s5pv210/sec_jack.c	Thu Nov 18 06:20:25 2010
--- froyo-i9000/arch/arm/mach-s5pv210/sec_jack.c	Tue Oct  5 05:13:33 2010
***************
*** 54,72 ****
  
  #define DETECTION_CHECK_COUNT	2
  #define	DETECTION_CHECK_TIME	get_jiffies_64() + (HZ/10)// 1000ms / 10 = 100ms
! #define	SEND_END_ENABLE_TIME	get_jiffies_64() + (HZ*2)// 1000ms * 1 = 1sec
  
  #define SEND_END_CHECK_COUNT	3
! #define SEND_END_CHECK_TIME     get_jiffies_64() + (HZ/50) //2000ms
  
  #define WAKELOCK_DET_TIMEOUT	HZ * 5 //5 sec
  
- #define GPIO_POPUP_SW_EN               S5PV210_GPB(1)
- 
  static struct platform_driver sec_jack_driver;
- extern unsigned int HWREV;
- 
- extern void wm8994_set_vps_related_output_path(int enable);
  
  struct class *jack_class;
  EXPORT_SYMBOL(jack_class);
--- 54,67 ----
  
  #define DETECTION_CHECK_COUNT	2
  #define	DETECTION_CHECK_TIME	get_jiffies_64() + (HZ/10)// 1000ms / 10 = 100ms
! #define	SEND_END_ENABLE_TIME	get_jiffies_64() + (HZ*1)// 1000ms * 1 = 1sec
  
  #define SEND_END_CHECK_COUNT	3
! #define SEND_END_CHECK_TIME     get_jiffies_64() + (HZ * 2) //2000ms 
  
  #define WAKELOCK_DET_TIMEOUT	HZ * 5 //5 sec
  
  static struct platform_driver sec_jack_driver;
  
  struct class *jack_class;
  EXPORT_SYMBOL(jack_class);
*************** struct switch_dev switch_jack_detection 
*** 85,113 ****
  		.name = "h2w",
  };
  
  
  /* To support AT+FCESTEST=1 */
  struct switch_dev switch_sendend = {
  		.name = "send_end",
  };
- 
- static struct timer_list jack_detect_timer;
  static struct timer_list send_end_key_event_timer;
  
  static unsigned int current_jack_type_status;
! static unsigned int jack_detect_timer_token;
! static unsigned int send_end_key_timer_token;
! static unsigned int send_end_irq_token;
! static unsigned int sendend_type; //0=short, 1=open
  static struct wake_lock jack_sendend_wake_lock;
  static int recording_status=0;
  
  unsigned int get_headset_status(void)
  {
  	//SEC_JACKDEV_DBG(" headset_status %d", current_jack_type_status);
  	return current_jack_type_status;
  }
! EXPORT_SYMBOL(get_headset_status);
  
  void set_recording_status(int value)
  {
--- 80,108 ----
  		.name = "h2w",
  };
  
+ struct switch_dev switch_dock_detection = {
+ 		.name = "dock",
+ };
  
  /* To support AT+FCESTEST=1 */
  struct switch_dev switch_sendend = {
  		.name = "send_end",
  };
  static struct timer_list send_end_key_event_timer;
  
  static unsigned int current_jack_type_status;
! static unsigned int send_end_enable = 0;
! static unsigned int send_end_pressed = 0;
  static struct wake_lock jack_sendend_wake_lock;
  static int recording_status=0;
+ static int send_end_irq_token=0;
  
  unsigned int get_headset_status(void)
  {
  	//SEC_JACKDEV_DBG(" headset_status %d", current_jack_type_status);
  	return current_jack_type_status;
  }
! 
  
  void set_recording_status(int value)
  {
*************** static int get_recording_status(void)
*** 117,395 ****
  {
  	return recording_status;
  }
! void car_vps_status_change(int status)
! {
!         printk("[ CAR_JACK_DRIVER ] %s \n",__func__);
  
!         if(status)
      {
!                 current_jack_type_status = SEC_EXTRA_CAR_DOCK_SPEAKER;
! 
!         wm8994_set_vps_related_output_path(1);
      }
!         else
      {
-         int adc = s3c_adc_get_adc_data(SEC_HEADSET_ADC_CHANNEL);
-             struct sec_gpio_info *det_jack = &hi->port.det_jack;
-         int headset_detect = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
  
!         if(headset_detect)
          {
!             if(adc > 800)
              {
!                 current_jack_type_status = SEC_HEADSET_4_POLE_DEVICE;
              }
!             else
              {
!                 current_jack_type_status = SEC_HEADSET_3_POLE_DEVICE;
!             }
         }
!         else
          {
!                     current_jack_type_status = SEC_JACK_NO_DEVICE;
          }
! 	wm8994_set_vps_related_output_path(0);
      }
- 
-         switch_set_state(&switch_jack_detection, current_jack_type_status);
  }
  
! void vps_status_change(int status)
  {
!         printk("[ JACK_DRIVER ] %s \n",__func__);
  
!         if(status)
      {
!                 current_jack_type_status = SEC_EXTRA_DOCK_SPEAKER;
  
!         wm8994_set_vps_related_output_path(1);
!     }
!         else
      {
!         int adc = s3c_adc_get_adc_data(SEC_HEADSET_ADC_CHANNEL);
!             struct sec_gpio_info *det_jack = &hi->port.det_jack;
!         int headset_detect = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
  
!         if(headset_detect)
          {
!             if(adc > 800)
              {
!                 current_jack_type_status = SEC_HEADSET_4_POLE_DEVICE;
!             }
!             else
              {
!                 current_jack_type_status = SEC_HEADSET_3_POLE_DEVICE;
!             }
          }
!         else
          {
!                     current_jack_type_status = SEC_JACK_NO_DEVICE;
!         }
!         wm8994_set_vps_related_output_path(0);
       }
  
-         switch_set_state(&switch_jack_detection, current_jack_type_status);
  }
  
  
! static void jack_input_selector(int jack_type_status)
  {
! 	SEC_JACKDEV_DBG("jack_type_status = 0X%x", jack_type_status);
  }
! 
! static void jack_type_detect_change(struct work_struct *ignored)
  {
! 	int adc = 0;
! 		struct sec_gpio_info   *det_jack = &hi->port.det_jack;
! 		struct sec_gpio_info   *send_end = &hi->port.send_end;
! 		struct sec_gpio_info   *send_end_open = &hi->port.send_end_open;
! 		int state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
! 		int sendend_state,sendend_open_state;
  
! 		if(state)
  		{
! 			sendend_state = gpio_get_value(send_end->gpio) ^ send_end->low_active;
! 			SEC_JACKDEV_DBG("SendEnd state short %d \n",sendend_state);
! 
! 	#if 1 //open_send_end do nothing
! 			if (1) // suik_Fix (HWREV >= 0x01)
  			{
! 				sendend_open_state = gpio_get_value(send_end_open->gpio) ^ send_end_open->low_active;
! 				SEC_JACKDEV_DBG("SendEnd state short %d open %d\n",sendend_state,sendend_open_state);
! 				//if(sendend_state || sendend_open_state)   //suik_Fix
! 				if(!sendend_open_state)
  				{
! 					printk("4 pole  headset attached\n");
! 					current_jack_type_status = SEC_HEADSET_4_POLE_DEVICE;
! 					#if 1 // REV07 Only suik_Check
! 					if(gpio_get_value(send_end->gpio))
  					#endif
- 					{
- 					   enable_irq (send_end->eint);  //suik_Fix
  					}
! 					enable_irq (send_end_open->eint);
! 				}else
  				{
! 					printk("3 pole headset attatched\n");
  					current_jack_type_status = SEC_HEADSET_3_POLE_DEVICE;
  				}
  
! 			}else
! 	#endif
  			{
! 				if(sendend_state)
  				{
! 					printk("4 pole  headset attached\n");
! 					current_jack_type_status = SEC_HEADSET_4_POLE_DEVICE;
! 				}else
  				{
! 					printk("3 pole headset attatched\n");
! 					current_jack_type_status = SEC_HEADSET_3_POLE_DEVICE;
  				}
! 				enable_irq (send_end->eint);
  			}
- 			send_end_irq_token++;
  			switch_set_state(&switch_jack_detection, current_jack_type_status);
  			jack_input_selector(current_jack_type_status);
  		}
! 	wake_unlock(&jack_sendend_wake_lock);
  }
  
  
  static DECLARE_DELAYED_WORK(detect_jack_type_work, jack_type_detect_change);
  
! static void jack_detect_change(struct work_struct *ignored)
  {
  		struct sec_gpio_info   *det_jack = &hi->port.det_jack;
  		struct sec_gpio_info   *send_end = &hi->port.send_end;
! 		struct sec_gpio_info   *send_end_open = &hi->port.send_end_open;
! 		int state;
! 		int sendend_state;//rakesh.gohel for new detection algorithm
  
- 		SEC_JACKDEV_DBG("");
- 		del_timer(&jack_detect_timer);
  		cancel_delayed_work_sync(&detect_jack_type_work);
  		state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
  
! 		SEC_JACKDEV_DBG("jack_detect_change state %d send_end_irq_token %d", state,send_end_irq_token);
! 		if (state && !send_end_irq_token)
! 		{
! 			wake_lock(&jack_sendend_wake_lock);
! 			gpio_set_value(GPIO_POPUP_SW_EN, 1); //suik_Fix
! 			s3c_gpio_slp_cfgpin(GPIO_POPUP_SW_EN, S3C_GPIO_SLP_OUT1);
! 			SEC_JACKDEV_DBG("JACK dev attached timer start\n");
! 			jack_detect_timer_token = 0;
! 			jack_detect_timer.expires = DETECTION_CHECK_TIME;
! 			add_timer(&jack_detect_timer);
! 			sendend_type =0x00;//short type always
! 		}
! 		else if(!state)
  		{
! 			current_jack_type_status = SEC_JACK_NO_DEVICE;
! 	              if(!get_recording_status())
  	              {
! 	                    gpio_set_value(GPIO_MICBIAS_EN, 0);
! 	              }
! 			switch_set_state(&switch_jack_detection, current_jack_type_status);
! 			gpio_set_value(GPIO_POPUP_SW_EN, 0); //suik_Fix
! 			s3c_gpio_slp_cfgpin(GPIO_POPUP_SW_EN, S3C_GPIO_SLP_OUT0);
! 			printk("JACK dev detached %d \n", send_end_irq_token);
! 			//headset_status = SEC_JACK_NO_DEVICE;
! 			if(send_end_irq_token > 0)
  			{
! 				if (1) //suik_Fix (HWREV >= 0x01)
! 					disable_irq (send_end_open->eint);
! 				disable_irq (send_end->eint);
! 				send_end_irq_token--;
! 				sendend_type = 0;
! 			}
! 			wake_unlock(&jack_sendend_wake_lock);
  		}
! 		else
! 			SEC_JACKDEV_DBG("Headset state does not valid. or send_end event");
  
  }
  
! static void sendend_switch_change(struct work_struct *ignored)
  {
  
- 	struct sec_gpio_info   *det_jack = &hi->port.det_jack;
- 	struct sec_gpio_info   *send_end;
- 	int state, headset_state;
- 	SEC_JACKDEV_DBG("");
- 	del_timer(&send_end_key_event_timer);
- 	send_end_key_timer_token = 0;
  
! 		send_end = &hi->port.send_end;
! 	headset_state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
! 	state = gpio_get_value(send_end->gpio) ^ send_end->low_active;
! 
! 	if(headset_state && send_end_irq_token)//headset connect && send irq enable
! 	{
! 		SEC_JACKDEV_DBG(" sendend_switch_change sendend state %d\n",state);
! 		if(state)
  		{
! 			wake_lock(&jack_sendend_wake_lock);
! 			send_end_key_event_timer.expires = SEND_END_CHECK_TIME;
! 			add_timer(&send_end_key_event_timer);
! 			switch_set_state(&switch_sendend, state);
! 			SEC_JACKDEV_DBG("SEND/END %s.timer start \n", "pressed");
! 		}else
! 		{
! 			SEC_JACKDEV_DBG(KERN_ERR "sendend isr work queue\n");
! 			switch_set_state(&switch_sendend, state);
! 			input_report_key(hi->input, KEYCODE_SENDEND, 0); //released  //suik_Fix
! 			input_sync(hi->input);
! 			printk("SEND/END %s.\n", "released");
! 			wake_unlock(&jack_sendend_wake_lock);
  		}
! 	}else
  	{
! 		SEC_JACKDEV_DBG("SEND/END Button is %s but headset disconnect or irq disable.\n", state?"pressed":"released");
  	}
  }
  
! static void open_sendend_switch_change(struct work_struct *ignored)
  {
  
  	struct sec_gpio_info   *det_jack = &hi->port.det_jack;
! 	struct sec_gpio_info   *send_end;
  	int state, headset_state;
! 	SEC_JACKDEV_DBG("");
! 	del_timer(&send_end_key_event_timer);
! 	send_end_key_timer_token = 0;
! 
!         send_end = &hi->port.send_end_open;
  
  	headset_state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
  	state = gpio_get_value(send_end->gpio) ^ send_end->low_active;
  
! 	if(headset_state && send_end_irq_token)//headset connect && send irq enable
  	{
! 		SEC_JACKDEV_DBG(" open_sendend_switch_change sendend state %d\n",state);
! 		if(!state)  //suik_Fix sams as Sendend(Short)
  		{
! 			SEC_JACKDEV_DBG(KERN_ERR "sendend isr work queue\n");
! 			switch_set_state(&switch_sendend, state);
! 			input_report_key(hi->input, KEYCODE_SENDEND, 0); //released    //suik_Fix
! 			input_sync(hi->input);
! 			printk("SEND/END %s.\n", "released");
! 			wake_unlock(&jack_sendend_wake_lock);
! 		}else
! 		{
! 			wake_lock(&jack_sendend_wake_lock);
! 			send_end_key_event_timer.expires = SEND_END_CHECK_TIME;
! 			add_timer(&send_end_key_event_timer);
! 			switch_set_state(&switch_sendend, state);
! 			SEC_JACKDEV_DBG("SEND/END %s.timer start \n", "pressed");
  		}
  
- 	}else
- 	{
- 		SEC_JACKDEV_DBG("SEND/END Button is %s but headset disconnect or irq disable.\n", state?"pressed":"released");
  	}
  }
! #if 0
  static int sendend_timer_work_func(struct work_struct *ignored)
  {
  	struct sec_gpio_info   *det_jack = &hi->port.det_jack;
--- 112,442 ----
  {
  	return recording_status;
  }
! EXPORT_SYMBOL(get_headset_status);
  
! void set_dock_state(int value)
  {
! 	printk(KERN_INFO "set_dock_state : 0X%x\n", value);
! 	switch_set_state(&switch_dock_detection, value);
  }
! 
! static void jack_input_selector(int jack_type_status)
  {
  	
! 	switch(jack_type_status)
  	{
! 		case SEC_HEADSET_3_POLE_DEVICE:
! 		case SEC_HEADSET_4_POLE_DEVICE:	
  		{
! 			gpio_set_value(GPIO_EARPATH_SEL, 1);	//1:headset, 0: TV_OUT	
! 			break;
  		}
! 		case SEC_TVOUT_DEVICE :
  		{
! 			gpio_set_value(GPIO_EARPATH_SEL, 0);	//1:headset, 0: TV_OUT	
! 			break;
  		}
! 		case SEC_UNKNOWN_DEVICE:
  		{
! 			printk("unknown jack device attached. User must select jack device type\n");
! 			break;
  		}
! 		default :
! 			break;			
  	}
  }
  
! static int jack_type_detect_change(struct work_struct *ignored)
  {
! 	int adc = 0;
! 	struct sec_gpio_info   *det_jack = &hi->port.det_jack;
! 	struct sec_gpio_info   *send_end = &hi->port.send_end;
! 	int state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
! 	int count_abnormal=0;
! 	int count_pole=0;
! 	bool bQuit = false;
  
! 	while(!bQuit)
  	{
! 		state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
  
! 		if(state)
  		{
! 		#if defined(CONFIG_ARIES_NTT)	// to prevent 3/4 pole headset detection error, LBK@100824
! 			gpio_set_value(GPIO_SUB_MICBIAS_EN, 1);
! 			msleep(10);
! 		#endif
  
! 			adc = s3c_adc_get_adc_data(SEC_HEADSET_ADC_CHANNEL);
! 			/*  unstable zone */
! #if !defined(CONFIG_ARIES_NTT)
! 			if(adc > 3250)
! #else
! 			if(adc > 3600)
! #endif
  			{
! 				
! 
! 				/* unknown cable or unknown case */
! 				if(count_abnormal++>100)
  				{
! 					count_abnormal=0;
! 					bQuit = true;
! 					printk(KERN_INFO "[ JACK_DRIVER (%s,%d) ] 3 pole headset or TV-out attatched : adc = %d\n", __func__,__LINE__,adc);
! 					count_pole = 0;
! 					if(send_end_irq_token==1)
  					{
! 						disable_irq(send_end->eint);
! 						send_end_irq_token=0;
  					}
! 					current_jack_type_status = SEC_HEADSET_3_POLE_DEVICE;
! 					if(!get_recording_status())
  					{
! 					#if !defined(CONFIG_ARIES_NTT)
! 						gpio_set_value(GPIO_MICBIAS_EN, 0);
! 					#elif defined(CONFIG_ARIES_NTT)
! 						gpio_set_value(GPIO_SUB_MICBIAS_EN, 0);
! 					#endif
  					}
  
  				}
  
+ 				/* Todo : to prevent unexpected reset bug.
+ 				 * 		  is it msleep bug? need wakelock.
+ 				 */
+ 				wake_lock_timeout(&jack_sendend_wake_lock, WAKELOCK_DET_TIMEOUT);
+ 				msleep(10);
  
! 			}
! 			/* 4 pole zone */
! 			else if(adc > 2000)
  			{
! 				current_jack_type_status = SEC_HEADSET_4_POLE_DEVICE;
! 				printk(KERN_INFO "[ JACK_DRIVER (%s,%d) ] 4 pole  headset attached : adc = %d\n",__func__,__LINE__, adc);
! 				bQuit = true;
! 				if(send_end_irq_token==0)
! 				{
! 					enable_irq(send_end->eint);
! 					send_end_irq_token=1;
  				}
! 			#if !defined(CONFIG_ARIES_NTT)
! 				gpio_set_value(GPIO_MICBIAS_EN, 1);
! 			#elif defined(CONFIG_ARIES_NTT)
! 				gpio_set_value(GPIO_SUB_MICBIAS_EN, 1);
! 			#endif
! 			}
! 			/* unstable zone */
! 			else if(adc > 600)
  			{
! 				SEC_JACKDEV_DBG("invalid adc > 600, adc is %d\n",adc);
  
! 				/* unknown cable or unknown case */
! 				if(count_abnormal++>100)
  				{
! 					count_abnormal=0;
! 					bQuit = true;
! 					printk(KERN_INFO "[ JACK_DRIVER (%s,%d) ] 3 pole headset or TV-out attatched : adc = %d\n", __func__,__LINE__,adc);
! 					count_pole = 0;
! 					if(send_end_irq_token==1)
  					{
! 						disable_irq(send_end->eint);
! 						send_end_irq_token=0;
! 					}
! 					current_jack_type_status = SEC_HEADSET_3_POLE_DEVICE;
! 					if(!get_recording_status())
  					{
! 					#if !defined(CONFIG_ARIES_NTT)
! 						gpio_set_value(GPIO_MICBIAS_EN, 0);
! 					#elif defined(CONFIG_ARIES_NTT)
! 						gpio_set_value(GPIO_SUB_MICBIAS_EN, 0);
  					#endif						
  					}
! 
! 				}
! 
! 				/* Todo : to prevent unexpected reset bug.
! 				 * 		  is it msleep bug? need wakelock.
! 				 */
! 				wake_lock_timeout(&jack_sendend_wake_lock, WAKELOCK_DET_TIMEOUT);
! 				msleep(10);
! 			}
! 			/* 3 pole zone or unstable zone */
! 			else
! 			{	
! 				if(!adc || count_pole == 10)
! 				{
! 			
! 					/* detect 3pole or tv-out cable */
! 					printk(KERN_INFO "[ JACK_DRIVER (%s,%d) ] 3 pole headset or TV-out attatched : adc = %d\n", __func__,__LINE__,adc);
! 					count_pole = 0;
! 					if(send_end_irq_token==1)
  					{
! 						disable_irq(send_end->eint);
! 						send_end_irq_token=0;
! 					}
  					current_jack_type_status = SEC_HEADSET_3_POLE_DEVICE;
+ 					if(!get_recording_status())
+ 					{
+ 					#if !defined(CONFIG_ARIES_NTT)
+ 						gpio_set_value(GPIO_MICBIAS_EN, 0);
+ 					#elif defined(CONFIG_ARIES_NTT)
+ 						gpio_set_value(GPIO_SUB_MICBIAS_EN, 0);
+ #endif
  					}
+ 					bQuit=true;
  				
! 				}
! 				/* If 4 pole is inserted slowly, ADC value should be lower than 250.
! 			 	* So, check again.
! 				 */
! 				else
  				{
! 					++count_pole;
! 					/* Todo : to prevent unexpected reset bug.
! 					 * 		  is it msleep bug? need wakelock.
! 					 */
! 					wake_lock_timeout(&jack_sendend_wake_lock, WAKELOCK_DET_TIMEOUT);
! 					msleep(20);
! 
! 				}
! 
! 			}
! 
! 		} /* if(state) */
! 		else
  		{
! 			bQuit = true;
! 
! 			gpio_set_value(GPIO_EARPATH_SEL, 1);	
! 			current_jack_type_status = SEC_JACK_NO_DEVICE;
! 			if(!get_recording_status())
  			{
! 			#if !defined(CONFIG_ARIES_NTT)
! 				gpio_set_value(GPIO_MICBIAS_EN, 0);
! 			#elif defined(CONFIG_ARIES_NTT)
! 				gpio_set_value(GPIO_SUB_MICBIAS_EN,0);
! #endif
      		}
! 
! 			SEC_JACKDEV_DBG("JACK dev detached  \n");			
! 
  		}
  		switch_set_state(&switch_jack_detection, current_jack_type_status);
  		jack_input_selector(current_jack_type_status);
+ 
  	}
! 			
! 
! 	return 0;
! 
  }
  
  
  static DECLARE_DELAYED_WORK(detect_jack_type_work, jack_type_detect_change);
  
! static int jack_detect_change(struct work_struct *ignored)
  {
  	struct sec_gpio_info   *det_jack = &hi->port.det_jack;
  	struct sec_gpio_info   *send_end = &hi->port.send_end;
! 	int state,count=20;
  
  	cancel_delayed_work_sync(&detect_jack_type_work);
  	state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
  
! 	wake_lock_timeout(&jack_sendend_wake_lock, WAKELOCK_DET_TIMEOUT);
! 
! 	
! 	/* block send/end key event */
! 	mod_timer(&send_end_key_event_timer,SEND_END_CHECK_TIME);
! 
! 
! 	if(state)
  	{
! #if !defined(CONFIG_ARIES_NTT)
! 		gpio_set_value(GPIO_MICBIAS_EN, 1);
! 	#elif defined(CONFIG_ARIES_NTT)
! 		gpio_set_value(GPIO_SUB_MICBIAS_EN, 1);
! #endif
! 		/* check pin state repeatedly */
! 		while(count--)
  		{
! 			if(state != (gpio_get_value(det_jack->gpio) ^ det_jack->low_active))
  			{
! 				return -1;
! 				
! 
  			}
! 			msleep(10);
  	
  		}
  
! 		schedule_delayed_work(&detect_jack_type_work,50);
! 	}
! 	else if(!state && current_jack_type_status != SEC_JACK_NO_DEVICE)
  	{
  
  
! 		if(send_end_irq_token==1)
  		{
! 			disable_irq(send_end->eint);
! 			send_end_irq_token=0;
  		}
! 
! 
! 		gpio_set_value(GPIO_EARPATH_SEL, 1);	
! 		current_jack_type_status = SEC_JACK_NO_DEVICE;
!         if(!get_recording_status())
          {
! 	#if !defined(CONFIG_ARIES_NTT)
!               gpio_set_value(GPIO_MICBIAS_EN, 0);
! 	#elif defined(CONFIG_ARIES_NTT)
! 		gpio_set_value(GPIO_SUB_MICBIAS_EN, 0);
! #endif
!         }
! 		switch_set_state(&switch_jack_detection, current_jack_type_status);
! 		SEC_JACKDEV_DBG("JACK dev detached  \n");			
! 
  	}
+ 	return 0;
  }
  
! static int sendend_switch_change(struct work_struct *ignored)
  {
  
  	struct sec_gpio_info   *det_jack = &hi->port.det_jack;
! 	struct sec_gpio_info   *send_end = &hi->port.send_end;
  	int state, headset_state;
! 	int count=6;
  	
  	headset_state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
  	state = gpio_get_value(send_end->gpio) ^ send_end->low_active;
  	
! 
! 	wake_lock_timeout(&jack_sendend_wake_lock,WAKELOCK_DET_TIMEOUT);
! 		
! 	/* check pin state repeatedly */
! 	while(count-- && !send_end_pressed)
  	{
! 		if(state != (gpio_get_value(send_end->gpio) ^ send_end->low_active) || !headset_state || current_jack_type_status == SEC_HEADSET_3_POLE_DEVICE)
  		{
! 			printk(KERN_INFO "[ JACK_DRIVER] (%s,%d) ] SEND/END key is ignored. State is unstable.\n",__func__,__LINE__);
! 			return -1;
! 				
! 
  		}
+ 		msleep(10);
  
  	}
+ 
+ 	input_report_key(hi->input, KEYCODE_SENDEND, state);
+ 	input_sync(hi->input);
+ 	switch_set_state(&switch_sendend,state);
+ 	send_end_pressed = state;
+ 	printk(KERN_INFO "[ JACK_DRIVER (%s,%d) ] Button is %s.\n", __func__,__LINE__, state? "pressed" : "released");
+ 
+ 	return 0;
  }
! 
  static int sendend_timer_work_func(struct work_struct *ignored)
  {
  	struct sec_gpio_info   *det_jack = &hi->port.det_jack;
*************** static int sendend_timer_work_func(struc
*** 397,403 ****
  
  	headset_state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
  
! 	//send_end_enable = 1;
  
  
  	if(send_end_pressed && !headset_state)
--- 444,450 ----
  
  	headset_state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
  
! 	send_end_enable = 1;
  
  	
  	if(send_end_pressed && !headset_state)
*************** static int sendend_timer_work_func(struc
*** 411,559 ****
  
  
  }
- #endif
  static DECLARE_WORK(jack_detect_work, jack_detect_change);
  static DECLARE_WORK(sendend_switch_work, sendend_switch_change);
! //static DECLARE_WORK(sendend_timer_work, sendend_timer_work_func);
  
  //IRQ Handler
  static irqreturn_t detect_irq_handler(int irq, void *dev_id)
  {
  
! 	SEC_JACKDEV_DBG("jack isr");
  	schedule_work(&jack_detect_work);
  	return IRQ_HANDLED;
  }
  
- static void jack_detect_timer_handler(unsigned long arg)
- {
- 	struct sec_gpio_info *det_jack = &hi->port.det_jack;
- 	int state;
- 
- 	state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
- 
- 	if(state)
- 	{
- 		SEC_JACKDEV_DBG("jack_detect_timer_token is %d\n", jack_detect_timer_token);
- 		if(jack_detect_timer_token < DETECTION_CHECK_COUNT)
- 		{
- 			jack_detect_timer.expires = DETECTION_CHECK_TIME;
- 			add_timer(&jack_detect_timer);
- 			jack_detect_timer_token++;
- 			//gpio_set_value(GPIO_MICBIAS_EN, 1); //suik_Fix for saving Sleep current
- 		}
- 		else if(jack_detect_timer_token == DETECTION_CHECK_COUNT)
- 		{
- 			jack_detect_timer.expires = SEND_END_ENABLE_TIME;
- 			jack_detect_timer_token = 0;
- 			schedule_delayed_work(&detect_jack_type_work,50);
- 		}
- 		else if(jack_detect_timer_token == 4)
- 		{
- 			SEC_JACKDEV_DBG("mic bias enable add work queue \n");
- 			jack_detect_timer_token = 0;
- 		}
- 		else
- 			printk(KERN_ALERT "wrong jack_detect_timer_token count %d", jack_detect_timer_token);
- 	}
- 	else
- 		printk(KERN_ALERT "headset detach!! %d", jack_detect_timer_token);
- }
- 
  static void send_end_key_event_timer_handler(unsigned long arg)
  {
  
! 		struct sec_gpio_info   *det_jack = &hi->port.det_jack;
! 		struct sec_gpio_info   *send_end = &hi->port.send_end;
! 		struct sec_gpio_info   *send_end_open = &hi->port.send_end_open;
! 		int sendend_state, headset_state = 0;
! 
! 		headset_state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
! 
! 	#if 1 //open_send_end do nothing..//suik_Fix
! 		if (sendend_type)
! 		{
! 			sendend_state = gpio_get_value(send_end_open->gpio) ^ send_end_open->low_active;
! 		}else
! 	#endif
! 		{
! 			sendend_state = gpio_get_value(send_end->gpio) ^ send_end->low_active;
! 		}
  
- 		if(headset_state && sendend_state)
- 		{
- 			if(send_end_key_timer_token < SEND_END_CHECK_COUNT)
- 			{
- 				send_end_key_timer_token++;
- 				send_end_key_event_timer.expires = SEND_END_CHECK_TIME;
- 				add_timer(&send_end_key_event_timer);
- 				SEC_JACKDEV_DBG("SendEnd Timer Restart %d", send_end_key_timer_token);
- 			}
- 			else if(send_end_key_timer_token == SEND_END_CHECK_COUNT)
- 			{
- 				printk("SEND/END is pressed\n");
- 				input_report_key(hi->input, KEYCODE_SENDEND, 1); //suik_Fix
- 				input_sync(hi->input);
- 				send_end_key_timer_token = 0;
- 			}
- 			else
- 				printk(KERN_ALERT "[JACK]wrong timer counter %d\n", send_end_key_timer_token);
- 		}else
- 			printk(KERN_ALERT "[JACK]GPIO Error\n");
  }
  
  static irqreturn_t send_end_irq_handler(int irq, void *dev_id)
  {
- 
   struct sec_gpio_info   *det_jack = &hi->port.det_jack;
     int headset_state;
  
-   SEC_JACKDEV_DBG("[SHORT]send_end_irq_handler isr");
- 	del_timer(&send_end_key_event_timer);
  	headset_state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
  
! 	if (headset_state)
  	{
- 		sendend_type = 0;
  		schedule_work(&sendend_switch_work);
  	}
  
  	return IRQ_HANDLED;
  }
  
- //static DECLARE_WORK(jack_detect_work, jack_detect_change);
- //static DECLARE_WORK(sendend_switch_work, sendend_switch_change);
- static DECLARE_WORK(open_sendend_switch_work, open_sendend_switch_change);
- 
- 
- 
- static irqreturn_t send_end_open_irq_handler(int irq, void *dev_id)
- {
-    struct sec_gpio_info   *det_jack = &hi->port.det_jack;
-    int headset_state;
- 
-   SEC_JACKDEV_DBG("[OPEN]send_end_open_irq_handler isr");
- 	del_timer(&send_end_key_event_timer);
- 	headset_state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
- 
- 	if (headset_state)
- 	{
- 		sendend_type = 0x01;
- 		schedule_work(&open_sendend_switch_work);		//suik_Fix
- 	}
- 
- 	return IRQ_HANDLED;
- }
- 
- 
- //USER can select jack type if driver can't check the jack type
- static int strtoi(char *buf)
- {
- 	int ret;
- 	ret = buf[0]-48;
- 	return ret;
- }
- 
  static ssize_t select_jack_show(struct device *dev, struct device_attribute *attr, char *buf)
  {
  	printk(KERN_INFO "[JACK] %s : operate nothing\n", __FUNCTION__);
--- 458,498 ----
  
  
  }
  static DECLARE_WORK(jack_detect_work, jack_detect_change);
  static DECLARE_WORK(sendend_switch_work, sendend_switch_change);
! static DECLARE_WORK(sendend_timer_work, sendend_timer_work_func);
  
  //IRQ Handler
  static irqreturn_t detect_irq_handler(int irq, void *dev_id)
  {
  	
! 	send_end_enable = 0;
  	schedule_work(&jack_detect_work);
  	return IRQ_HANDLED;
  }
   
  static void send_end_key_event_timer_handler(unsigned long arg)
  {
  
! 	schedule_work(&sendend_timer_work);
  	
  }
  
  static irqreturn_t send_end_irq_handler(int irq, void *dev_id)
  {
     struct sec_gpio_info   *det_jack = &hi->port.det_jack;
     int headset_state;
  
  	headset_state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
  
! 	if (send_end_enable && headset_state)
  	{
  		schedule_work(&sendend_switch_work);		
  	}
  		  
  	return IRQ_HANDLED;
  }
  
  static ssize_t select_jack_show(struct device *dev, struct device_attribute *attr, char *buf)
  {
  	printk(KERN_INFO "[JACK] %s : operate nothing\n", __FUNCTION__);
*************** static ssize_t select_jack_store(struct 
*** 567,631 ****
  	struct sec_gpio_info   *send_end = &hi->port.send_end;
  	int state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;
  
- 	SEC_JACKDEV_DBG("buf = %s", buf);
- 	SEC_JACKDEV_DBG("buf size = %d", sizeof(buf));
- 	SEC_JACKDEV_DBG("buf size = %d", strlen(buf));
  
! 	if(state)
! 	{
! 		if(current_jack_type_status != SEC_UNKNOWN_DEVICE)
! 		{
! 			printk(KERN_ERR "user can't select jack device if current_jack_status isn't unknown status");
! 			return -1;
! 		}
! 
! 		if(sizeof(buf)!=1)
! 		{
! 			printk("input error\n");
! 			printk("Must be stored ( 1,2,4)\n");
! 			return -1;
! 		}
! 
! 		value = strtoi(buf);
! 		SEC_JACKDEV_DBG("User  selection : 0X%x", value);
  
  		switch(value)
  		{
  			case SEC_HEADSET_3_POLE_DEVICE:
  			{
  				current_jack_type_status = SEC_HEADSET_3_POLE_DEVICE;
! 				switch_set_state(&switch_jack_detection, current_jack_type_status);
! 				jack_input_selector(current_jack_type_status);
  				break;
  			}
  			case SEC_HEADSET_4_POLE_DEVICE:
  			{
! 				enable_irq (send_end->eint);
! 				send_end_irq_token++;
  				current_jack_type_status = SEC_HEADSET_4_POLE_DEVICE;
! 				switch_set_state(&switch_jack_detection, current_jack_type_status);
! 				jack_input_selector(current_jack_type_status);
! 				break;
! 			}
! 			case SEC_TVOUT_DEVICE:
  			{
! 				current_jack_type_status = SEC_TVOUT_DEVICE;
! 				gpio_set_value(GPIO_MICBIAS_EN, 0);
! 				switch_set_state(&switch_jack_detection, current_jack_type_status);
! 				jack_input_selector(current_jack_type_status);
! 				break;
! 			}
  		}
  	}
! 	else
  	{
! 		printk(KERN_ALERT "Error : mic bias enable complete but headset detached!!\n");
  		current_jack_type_status = SEC_JACK_NO_DEVICE;
  		gpio_set_value(GPIO_MICBIAS_EN, 0);
  	}
  
! 	return size;
  
  }
  static DEVICE_ATTR(select_jack, S_IRUGO | S_IWUSR | S_IWOTH | S_IXOTH, select_jack_show, select_jack_store);
  static int sec_jack_probe(struct platform_device *pdev)
--- 506,581 ----
  	struct sec_gpio_info   *send_end = &hi->port.send_end;
  	int state = gpio_get_value(det_jack->gpio) ^ det_jack->low_active;	
  
  	
! 	sscanf(buf, "%d", &value);
! 	printk(KERN_INFO "[JACK_DRIVER] User  selection : 0X%x", value);
  		
  	switch(value)
  	{
  		case SEC_HEADSET_3_POLE_DEVICE:
  		{
+ 			if(send_end_irq_token==1)
+ 			{
+ 				disable_irq(send_end->eint);
+ 				send_end_irq_token=0;
+ 			}
+ 			if(!get_recording_status())
+ 			{
+ 			#if !defined(CONFIG_ARIES_NTT)
+ 				gpio_set_value(GPIO_MICBIAS_EN, 0);
+ 			#elif defined(CONFIG_ARIES_NTT)
+ 				gpio_set_value(GPIO_SUB_MICBIAS_EN, 0);
+ #endif
+ 			}
  			current_jack_type_status = SEC_HEADSET_3_POLE_DEVICE;			
! 			printk(KERN_INFO "[ JACK_DRIVER (%s,%d) ] 3 pole headset or TV-out attatched : \n", __func__,__LINE__);
  			break;
  		}
  		case SEC_HEADSET_4_POLE_DEVICE:
  		{
! 		#if !defined(CONFIG_ARIES_NTT)
! 			gpio_set_value(GPIO_MICBIAS_EN, 1);
! 		#elif defined(CONFIG_ARIES_NTT)
! 			gpio_set_value(GPIO_SUB_MICBIAS_EN, 1);
! #endif
  			current_jack_type_status = SEC_HEADSET_4_POLE_DEVICE;
! 			printk(KERN_INFO "[ JACK_DRIVER (%s,%d) ] 4 pole  headset attached : \n",__func__,__LINE__);
! 			if(send_end_irq_token==0)
  			{
! 				enable_irq(send_end->eint);
! 				send_end_irq_token=1;
  			}
+ 			break;
  		}
! 		case SEC_JACK_NO_DEVICE:
  		{
! 			if(send_end_irq_token==1)
! 			{
! 				disable_irq(send_end->eint);
! 				send_end_irq_token=0;
! 			}
  			current_jack_type_status = SEC_JACK_NO_DEVICE;
+ 
+ 			if(!get_recording_status())
+ 			{
+ 			#if !defined(CONFIG_ARIES_NTT)
  				gpio_set_value(GPIO_MICBIAS_EN,0);
+ 			#elif defined(CONFIG_ARIES_NTT)
+ 				gpio_set_value(GPIO_SUB_MICBIAS_EN, 0);
+ #endif
  			}
+ 			printk(KERN_INFO "[ JACK_DRIVER (%s,%d) ] JACK dev detached  \n",__func__,__LINE__);			
+ 			break;
  
! 		}
! 		default:
! 			break;
! 	}
! 
! 	switch_set_state(&switch_jack_detection, current_jack_type_status);
! 	jack_input_selector(current_jack_type_status);
  
+ 	return size;
  }
  static DEVICE_ATTR(select_jack, S_IRUGO | S_IWUSR | S_IWOTH | S_IXOTH, select_jack_show, select_jack_store);
  static int sec_jack_probe(struct platform_device *pdev)
*************** static int sec_jack_probe(struct platfor
*** 636,642 ****
  	struct sec_gpio_info   *send_end;
  	struct input_dev	   *input;
  	current_jack_type_status = SEC_JACK_NO_DEVICE;
- 	sendend_type =0x00;//short type always
  
  	printk(KERN_INFO "SEC JACK: Registering jack driver\n");
  
--- 586,591 ----
*************** static int sec_jack_probe(struct platfor
*** 666,678 ****
  		goto err_register_input_dev;
  	}
  
- 	init_timer(&jack_detect_timer);
- 	jack_detect_timer.function = jack_detect_timer_handler;
  
  	init_timer(&send_end_key_event_timer);
  	send_end_key_event_timer.function = send_end_key_event_timer_handler;
  
- 	SEC_JACKDEV_DBG("registering switch_sendend switch_dev sysfs sec_jack");
  
  	ret = switch_dev_register(&switch_jack_detection);
  	if (ret < 0)
--- 615,624 ----
*************** static int sec_jack_probe(struct platfor
*** 681,693 ****
  		goto err_switch_dev_register;
  	}
  
! 	ret = switch_dev_register(&switch_sendend);
  	if (ret < 0)
  	{
! 		printk(KERN_ERR "SEC JACK: Failed to register switch sendend device\n");
  		goto err_switch_dev_register;
  	}
  
  	//Create JACK Device file in Sysfs
  	jack_class = class_create(THIS_MODULE, "jack");
  	if(IS_ERR(jack_class))
--- 627,645 ----
  		goto err_switch_dev_register;
  	}
  
! 	ret = switch_dev_register(&switch_dock_detection);
  	if (ret < 0) 
  	{
! 		printk(KERN_ERR "SEC DOCK: Failed to register switch device\n");
  		goto err_switch_dev_register;
  	}
  
+ 	ret = switch_dev_register(&switch_sendend);
+ 	if (ret < 0) 
+ 	{
+ 		printk(KERN_ERR "SEC JACK: Failed to register switch device\n");
+ 		goto err_switch_dev_register;
+ 	}
  	//Create JACK Device file in Sysfs
  	jack_class = class_create(THIS_MODULE, "jack");
  	if(IS_ERR(jack_class))
*************** static int sec_jack_probe(struct platfor
*** 702,708 ****
  	if (device_create_file(jack_selector_fs, &dev_attr_select_jack) < 0)
  		printk(KERN_ERR "Failed to create device file(%s)!\n", dev_attr_select_jack.attr.name);
  
! 	//GPIO configuration for short SENDEND
  	send_end = &hi->port.send_end;
  	s3c_gpio_cfgpin(send_end->gpio, S3C_GPIO_SFN(send_end->gpio_af));
  	s3c_gpio_setpull(send_end->gpio, S3C_GPIO_PULL_NONE);
--- 654,660 ----
  	if (device_create_file(jack_selector_fs, &dev_attr_select_jack) < 0)
  		printk(KERN_ERR "Failed to create device file(%s)!\n", dev_attr_select_jack.attr.name);	
  
! 	//GPIO configuration
  	send_end = &hi->port.send_end;
  	s3c_gpio_cfgpin(send_end->gpio, S3C_GPIO_SFN(send_end->gpio_af));
  	s3c_gpio_setpull(send_end->gpio, S3C_GPIO_PULL_NONE);
*************** static int sec_jack_probe(struct platfor
*** 710,743 ****
  
  	ret = request_irq(send_end->eint, send_end_irq_handler, IRQF_DISABLED, "sec_headset_send_end", NULL);
  
- 	SEC_JACKDEV_DBG("sended isr send=0X%x, ret =%d", send_end->eint, ret);
- 	if (ret < 0)
- 	{
- 		printk(KERN_ERR "SEC HEADSET: Failed to register send/end interrupt.\n");
- 		goto err_request_send_end_irq;
- 	}
- 
- 	disable_irq(send_end->eint);
- 
- 	if (1) //(HWREV >= 0x01)  //suik_Fix
- 	{
- 		//GPIO configuration for open SENDEND
- 		send_end = &hi->port.send_end_open;
- 
- 		if(system_rev >= 0x08) //seonha
- 		{
- 			send_end->eint = IRQ_EINT2;
- 			send_end->gpio = GPIO_3P_SEND_END;
- 			send_end->gpio_af = GPIO_3P_SEND_END_AF;
- 		}
  
! 		s3c_gpio_cfgpin(send_end->gpio, S3C_GPIO_SFN(send_end->gpio_af));
! 		s3c_gpio_setpull(send_end->gpio, S3C_GPIO_PULL_NONE);
! 		set_irq_type(send_end->eint, IRQ_TYPE_EDGE_BOTH);
! 
! 		ret = request_irq(send_end->eint, send_end_open_irq_handler, IRQF_DISABLED, "sec_headset_send_end_open", NULL);
! 
! 		SEC_JACKDEV_DBG("sended open isr send=0X%x, ret =%d", send_end->eint, ret);
  		if (ret < 0)
  		{
  			printk(KERN_ERR "SEC HEADSET: Failed to register send/end interrupt.\n");
--- 662,669 ----
         
  	ret = request_irq(send_end->eint, send_end_irq_handler, IRQF_DISABLED, "sec_headset_send_end", NULL);
  
  
! 	SEC_JACKDEV_DBG("sended isr send=0X%x, ret =%d", send_end->eint, ret);
  	if (ret < 0)
  	{
  		printk(KERN_ERR "SEC HEADSET: Failed to register send/end interrupt.\n");
*************** static int sec_jack_probe(struct platfor
*** 745,757 ****
  		}
  
  		disable_irq(send_end->eint);
! 	}
  
  	det_jack = &hi->port.det_jack;
  	s3c_gpio_cfgpin(det_jack->gpio, S3C_GPIO_SFN(det_jack->gpio_af));
  	s3c_gpio_setpull(det_jack->gpio, S3C_GPIO_PULL_NONE);
  	set_irq_type(det_jack->eint, IRQ_TYPE_EDGE_BOTH);
  
  	ret = request_irq(det_jack->eint, detect_irq_handler, IRQF_DISABLED, "sec_headset_detect", NULL);
  
  	SEC_JACKDEV_DBG("det isr det=0X%x, ret =%d", det_jack->eint, ret);
--- 671,685 ----
  	}
  
  	disable_irq(send_end->eint);
! 	send_end_irq_token=0;
  
  	det_jack = &hi->port.det_jack;
  	s3c_gpio_cfgpin(det_jack->gpio, S3C_GPIO_SFN(det_jack->gpio_af));
  	s3c_gpio_setpull(det_jack->gpio, S3C_GPIO_PULL_NONE);
  	set_irq_type(det_jack->eint, IRQ_TYPE_EDGE_BOTH);
  
+ 	det_jack->low_active = 1; 
+ 
  	ret = request_irq(det_jack->eint, detect_irq_handler, IRQF_DISABLED, "sec_headset_detect", NULL);
  
  	SEC_JACKDEV_DBG("det isr det=0X%x, ret =%d", det_jack->eint, ret);
*************** static int sec_jack_probe(struct platfor
*** 760,776 ****
  		printk(KERN_ERR "SEC HEADSET: Failed to register detect interrupt.\n");
  		goto err_request_detect_irq;
  	}
- 	//if (HWREV >= 0x01)  suik_Fix
- 	//	det_jack->low_active = 0;
  
! 	SEC_JACKDEV_DBG("sec_jack_probe HWREV =%d, 0x01=%d jack->low_active =%d", HWREV, 0x01, det_jack->low_active);
  
! 	gpio_direction_output(GPIO_MICBIAS_EN,1);
  	s3c_gpio_slp_cfgpin(GPIO_MICBIAS_EN, S3C_GPIO_SLP_PREV);
  
! 	gpio_direction_output(GPIO_POPUP_SW_EN,1);  //POPUP_SW_EN  //suik_Fix
! 	//s3c_gpio_slp_cfgpin(GPIO_POPUP_SW_EN, S3C_GPIO_SLP_PREV);
  
  	wake_lock_init(&jack_sendend_wake_lock, WAKE_LOCK_SUSPEND, "sec_jack");
  
  	schedule_work(&jack_detect_work);
--- 688,731 ----
  		printk(KERN_ERR "SEC HEADSET: Failed to register detect interrupt.\n");
  		goto err_request_detect_irq;
  	}
  
! 	// EAR_SEL
! 	if(gpio_is_valid(GPIO_EARPATH_SEL))
! 	{
! 		if(gpio_request(GPIO_EARPATH_SEL,   "GPJ2"))
! 			printk(KERN_ERR "Failed to request GPIO_EAR_SEL!\n");
! 		gpio_direction_output(GPIO_EARPATH_SEL,1);
! 	}
! 	s3c_gpio_slp_cfgpin(GPIO_EARPATH_SEL, S3C_GPIO_SLP_PREV);
! #if !defined(CONFIG_ARIES_NTT)
! 	if(gpio_is_valid(GPIO_MICBIAS_EN))
! 		{
! 			if(gpio_request(GPIO_MICBIAS_EN, "GPJ4[2]"))
! 				printk(KERN_ERR "Failed to request GPIO_MICBIAS_EN!\n");
! 			gpio_direction_output(GPIO_MICBIAS_EN,0);
! 		}
! 
! 	s3c_gpio_slp_cfgpin(GPIO_MICBIAS_EN, S3C_GPIO_SLP_PREV); 
! 
! #elif defined(CONFIG_ARIES_NTT)// Modify NTTS1
! 	if(gpio_is_valid(GPIO_MICBIAS_EN))
! 	{
! 		if(gpio_request(GPIO_MICBIAS_EN, "GPJ4[2]"))
! 			printk(KERN_ERR "Failed to request GPIO_MICBIAS_EN!\n");
  
! 		gpio_direction_output(GPIO_MICBIAS_EN,0);
! 	}
  	s3c_gpio_slp_cfgpin(GPIO_MICBIAS_EN, S3C_GPIO_SLP_PREV); 
  
! 	if(gpio_is_valid(GPIO_SUB_MICBIAS_EN))
! 	{
! 		if(gpio_request(GPIO_SUB_MICBIAS_EN, "GPJ2[5]"))
! 			printk(KERN_ERR "Failed to request GPIO_SUB_MICBIAS_EN!\n");
  
+ 		gpio_direction_output(GPIO_SUB_MICBIAS_EN,0);
+ 	}
+ 	s3c_gpio_slp_cfgpin(GPIO_SUB_MICBIAS_EN, S3C_GPIO_SLP_PREV); 
+ #endif
  	wake_lock_init(&jack_sendend_wake_lock, WAKE_LOCK_SUSPEND, "sec_jack");
  
  	schedule_work(&jack_detect_work);
*************** err_request_send_end_irq:
*** 781,786 ****
--- 736,742 ----
  	free_irq(det_jack->eint, 0);
  err_request_detect_irq:
  	switch_dev_unregister(&switch_jack_detection);
+ 	switch_dev_unregister(&switch_dock_detection);	
  	switch_dev_unregister(&switch_sendend);
  err_switch_dev_register:
  	input_unregister_device(input);
*************** static int sec_jack_remove(struct platfo
*** 798,804 ****
  	input_unregister_device(hi->input);
  	free_irq(hi->port.det_jack.eint, 0);
  	free_irq(hi->port.send_end.eint, 0);
- 	free_irq(hi->port.send_end_open.eint, 0);
  	switch_dev_unregister(&switch_jack_detection);
  	switch_dev_unregister(&switch_sendend);
  	return 0;
--- 754,759 ----
*************** static int sec_jack_remove(struct platfo
*** 807,813 ****
  #ifdef CONFIG_PM
  static int sec_jack_suspend(struct platform_device *pdev, pm_message_t state)
  {
- 	#if 0 // froyo_merge_check
  	if(current_jack_type_status == SEC_JACK_NO_DEVICE || current_jack_type_status == SEC_HEADSET_3_POLE_DEVICE)
  	{
          if(!get_recording_status())
--- 762,767 ----
*************** static int sec_jack_suspend(struct platf
*** 820,826 ****
          }
  
  	}
- 	#endif
  	return 0;
  }
  static int sec_jack_resume(struct platform_device *pdev)
--- 774,779 ----
diff -wrp Epic-Froyo/arch/arm/mach-s5pv210/setup-fimc0.c froyo-i9000/arch/arm/mach-s5pv210/setup-fimc0.c
*** Epic-Froyo/arch/arm/mach-s5pv210/setup-fimc0.c	Sat Nov 20 06:52:06 2010
--- froyo-i9000/arch/arm/mach-s5pv210/setup-fimc0.c	Tue Oct  5 05:13:33 2010
*************** void s3c_fimc0_cfg_gpio(struct platform_
*** 38,49 ****
  	}
  	/* CAM A port(b0010) : DATA[5-7], CLKOUT(MIPI CAM also), FIELD */
  	for (i=0; i < 4; i++) {
- 		if(i != 3)		//Block not to set MCLK out at this point
- 		{
  			s3c_gpio_cfgpin(S5PV210_GPE1(i), S3C_GPIO_SFN(2));
  			s3c_gpio_setpull(S5PV210_GPE1(i), S3C_GPIO_PULL_NONE);
  		}
- 	}
  
  #if defined(CONFIG_MACH_SMDKC110) || defined(CONFIG_MACH_SMDKV210)
  	s3c_gpio_cfgpin(S5PV210_GPE1(4), S5PV210_GPE1_4_CAM_A_FIELD);
diff -wrp Epic-Froyo/arch/arm/mach-s5pv210/setup-sdhci.c froyo-i9000/arch/arm/mach-s5pv210/setup-sdhci.c
*** Epic-Froyo/arch/arm/mach-s5pv210/setup-sdhci.c	Sat Oct  2 02:12:00 2010
--- froyo-i9000/arch/arm/mach-s5pv210/setup-sdhci.c	Tue Oct  5 05:13:33 2010
***************
*** 27,33 ****
  #include <mach/gpio-bank.h>
  #include <mach/regs-gpio.h>
  #include <mach/gpio.h>
- extern unsigned int HWREV;
  
  /* clock sources for the mmc bus clock, order as for the ctrl2[5..4] */
  char *s5pv210_hsmmc_clksrcs[4] = {
--- 27,32 ----
*************** void s5pv210_setup_sdhci0_cfg_gpio(struc
*** 76,87 ****
  	}
  
  #if defined (CONFIG_MACH_S5PC110_ARIES)
- #if 0 //FROYO merge
  	s3c_gpio_cfgpin(S5PV210_GPJ2(7), S3C_GPIO_OUTPUT);
  	s3c_gpio_setpull(S5PV210_GPJ2(7), S3C_GPIO_PULL_NONE);
  	gpio_set_value(S5PV210_GPJ2(7), 1);
  #endif
- #endif
  }
  
  void s5pv210_setup_sdhci1_cfg_gpio(struct platform_device *dev, int width)
--- 75,84 ----
*************** void s5pv210_setup_sdhci2_cfg_gpio(struc
*** 131,140 ****
  	case 0:
  	case 1:
  	case 4:
- 	     s3c_gpio_cfgpin(S5PV210_GPG2(0), S3C_GPIO_SFN(2));
- 	     s3c_gpio_setpull(S5PV210_GPG2(0), S3C_GPIO_PULL_UP);
  		/* Set all the necessary GPIO function and pull up/down */
! 		for (gpio = S5PV210_GPG2(1); gpio <= S5PV210_GPG2(6); gpio++) {
  			if(gpio != S5PV210_GPG2(2)) {
  				s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
  				s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
--- 128,135 ----
  	case 0:
  	case 1:
  	case 4:
  		/* Set all the necessary GPIO function and pull up/down */
! 		for (gpio = S5PV210_GPG2(0); gpio <= S5PV210_GPG2(6); gpio++) {
  			if(gpio != S5PV210_GPG2(2)) {
  				s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
  				s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
*************** void s5pv210_setup_sdhci2_cfg_gpio(struc
*** 144,150 ****
  		writel(0x2aaa, S5PV210_GPG2DRV);
  
  		/* Chip detect pin Pull up -> none*/
! 		//s3c_gpio_setpull(S5PV210_GPG2(2), S3C_GPIO_PULL_NONE);
  
  		break;
  	default:
--- 139,145 ----
  		writel(0x2aaa, S5PV210_GPG2DRV);
  
  		/* Chip detect pin Pull up -> none*/
! 		s3c_gpio_setpull(S5PV210_GPG2(2), S3C_GPIO_PULL_NONE);
  
  		break;
  	default:
*************** unsigned int universal_sdhci2_detect_ext
*** 294,301 ****
  	printk(" Universal :SD Detect function \n");
  	printk("eint conf %x  eint filter conf %x",readl(S5PV210_EINT3CON),
  			readl(S5PV210_EINT3FLTCON1));
! 	printk("eint pend %x  eint mask %x",readl(S5PV210_EINT3PEND),
! 			readl(S5PV210_EINT3MASK));
  #endif
  #if defined(CONFIG_MACH_S5PC110_P1)
  	card_status = (readl(S5PV210_GPH3DAT)) & (1 << 4);
--- 289,296 ----
  	printk(" Universal :SD Detect function \n");
  	printk("eint conf %x  eint filter conf %x",readl(S5PV210_EINT3CON),
  			readl(S5PV210_EINT3FLTCON1));
! 	printk("eint pend %x  eint mask %x",readl(S5PC11X_EINT3PEND),
! 			readl(S5PC11X_EINT3MASK));
  #endif
  #if defined(CONFIG_MACH_S5PC110_P1)
  	card_status = (readl(S5PV210_GPH3DAT)) & (1 << 4);
*************** unsigned int universal_sdhci2_detect_ext
*** 303,330 ****
  	return card_status ? 0 : 1;
  
  #else
! //	card_status = (readl(S5PV210_GPH3DAT)) & (1 << 4);
! //	printk(KERN_DEBUG " Universal : Card status  %d\n",card_status?1:0);
! //	return card_status ? 0 : 1;
!        if(system_rev >= 0x08)
!        {
!               card_status = (readl(S5PV210_GPH1DAT)) & (1 << 0); //victory.boot
!         	printk(KERN_DEBUG " Universal : Card status  %d\n",card_status?1:0);
!       		return card_status ? 0 : 1;  // FROYO_MERGE_CHANGE
!        }
!        else
!        {
! 	card_status = (readl(S5PV210_GPH0DAT)) & (1 << 2); //victory.boot
  	printk(KERN_DEBUG " Universal : Card status  %d\n",card_status?1:0);
! 	if(((HWREV >= 7) || (HWREV == 0x3)) && (HWREV !=8))
! 	{
! 		return card_status ? 0 : 1;
! 	}
! 	else
! 	{
  		return card_status ? 0 : 1;
- 	}
-         }
  #endif
  }
  
--- 298,307 ----
  	return card_status ? 0 : 1;
  
  #else
! 	card_status = (readl(S5PV210_GPH3DAT)) & (1 << 4);
  	printk(KERN_DEBUG " Universal : Card status  %d\n",card_status?1:0);
! 
  		return card_status ? 0 : 1;
  #endif
  }
  
*************** void universal_sdhci2_cfg_ext_cd(void)
*** 335,350 ****
  #if defined(CONFIG_MACH_S5PC110_P1)
  	s3c_gpio_setpull(S5PV210_GPH3(4), S3C_GPIO_PULL_NONE);
  #else
! 	//	s3c_gpio_setpull(S5PV210_GPH3(4), S3C_GPIO_PULL_NONE);
  #endif
!  if(system_rev >= 0x08)
!  {
! 	set_irq_type(IRQ_EINT8, IRQ_TYPE_EDGE_BOTH);
!  }
!  else
!  {
! 	set_irq_type(IRQ_EINT2, IRQ_TYPE_EDGE_BOTH);
!  }
  }
  #endif // CONFIG_MACH_S5PC110_ARIES
  
--- 312,320 ----
  #if defined(CONFIG_MACH_S5PC110_P1)
  	s3c_gpio_setpull(S5PV210_GPH3(4), S3C_GPIO_PULL_NONE);
  #else
! 		s3c_gpio_setpull(S5PV210_GPH3(4), S3C_GPIO_PULL_NONE);
  #endif
! 	set_irq_type(IRQ_EINT(28), IRQ_TYPE_EDGE_BOTH);
  }
  #endif // CONFIG_MACH_S5PC110_ARIES
  
*************** static struct s3c_sdhci_platdata hsmmc2_
*** 365,375 ****
  	.host_caps	= MMC_CAP_8_BIT_DATA,
  #endif
  #if defined (CONFIG_MACH_S5PC110_ARIES) || defined(CONFIG_MACH_S5PC110_P1)
! #if defined (CONFIG_DDR_RAM_3G)	
! 	.ext_cd = IRQ_EINT8,
! #elif defined (CONFIG_DDR_RAM_2G)
!         .ext_cd = IRQ_EINT2,
! #endif
  	.cfg_ext_cd =universal_sdhci2_cfg_ext_cd,
  	.detect_ext_cd = universal_sdhci2_detect_ext_cd,
  #endif
--- 335,341 ----
  	.host_caps	= MMC_CAP_8_BIT_DATA,
  #endif
  #if defined (CONFIG_MACH_S5PC110_ARIES) || defined(CONFIG_MACH_S5PC110_P1)
! 	.ext_cd = IRQ_EINT(28),
  	.cfg_ext_cd =universal_sdhci2_cfg_ext_cd,
  	.detect_ext_cd = universal_sdhci2_detect_ext_cd,
  #endif
diff -wrp Epic-Froyo/arch/arm/plat-s5p/bootmem.c froyo-i9000/arch/arm/plat-s5p/bootmem.c
*** Epic-Froyo/arch/arm/plat-s5p/bootmem.c	Wed Dec  8 22:51:44 2010
--- froyo-i9000/arch/arm/plat-s5p/bootmem.c	Tue Oct  5 05:13:33 2010
*************** static struct s3c_media_device media_dev
*** 134,140 ****
  		.name = "fimd",
  		.bank = 1,
  		.memsize = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMD * SZ_1K,
! 		.paddr = CONFIG_VIDEO_FB_PHY_ADDR,
  	},
  #endif
  
--- 134,140 ----
  		.name = "fimd",
  		.bank = 1,
  		.memsize = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMD * SZ_1K,
! 		.paddr = 0,
  	},
  #endif
  
*************** void s5pv210_reserve_bootmem(void)
*** 216,232 ****
  		if (mdev->memsize <= 0)
  			continue;
  
- 		if(mdev->paddr){
- 			/* FIXME:
-                  	 * requesting the frame buffer base address used by bootloader
- 		 	 */
- 			mdev->paddr = virt_to_phys(__alloc_bootmem(mdev->memsize,
-                                 			PAGE_SIZE, mdev->paddr));
- 		} else
                  	mdev->paddr = virt_to_phys(__alloc_bootmem(mdev->memsize,
                                  	PAGE_SIZE, meminfo.bank[mdev->bank].start));
- 
- 
  		printk(KERN_INFO "s5pv210: %lu bytes system memory reserved "
  			"for %s at 0x%08x\n", (unsigned long) mdev->memsize,
  			mdev->name, mdev->paddr);
--- 216,223 ----
diff -wrp Epic-Froyo/arch/arm/plat-s5p/devs.c froyo-i9000/arch/arm/plat-s5p/devs.c
*** Epic-Froyo/arch/arm/plat-s5p/devs.c	Fri Oct  1 03:22:36 2010
--- froyo-i9000/arch/arm/plat-s5p/devs.c	Tue Oct  5 05:13:33 2010
*************** struct platform_device s5p_device_rtc = 
*** 209,239 ****
          .resource         = s5p_rtc_resource,
  };
  
- 
- #ifdef CONFIG_MACH_S5PC110_ARIES
- static struct resource s5p_trs_detect_resource[] = {
- 
-         [0] = {
-         .start = IRQ_EINT6,
-         .end   = IRQ_EINT6,
-         .flags = IORESOURCE_IRQ,
-         }
- 
- };
- 
- 
- struct platform_device s5p_trs_detect = {
- 
-         .name = "s5p_trs",
-         .id   = -1,
-         .num_resources = ARRAY_SIZE(s5p_trs_detect_resource),
-         .resource = s5p_trs_detect_resource,
- };
- 
- EXPORT_SYMBOL(s5p_trs_detect);
- #endif
- 
- 
  /* WATCHDOG TIMER*/
  static struct resource s3c_wdt_resource[] = {
  	[0] = {
--- 209,214 ----
*************** static struct resource s5p_tvout_resourc
*** 563,574 ****
                  .flags  = IORESOURCE_IRQ,
          },
          [8] = {
!                 .start  = IRQ_EINT13,
!                 .end    = IRQ_EINT13,
                  .flags  = IORESOURCE_IRQ,
          }
  };
- //chk: [8] = IRQ_INT5 before
  
  struct platform_device s5p_device_tvout = {
  	.name           = "s5p-tvout",
--- 538,548 ----
                  .flags  = IORESOURCE_IRQ,
          },
          [8] = {
!                 .start  = IRQ_EINT5,
!                 .end    = IRQ_EINT5,
                  .flags  = IORESOURCE_IRQ,
          }
  };
  
  struct platform_device s5p_device_tvout = {
  	.name           = "s5p-tvout",
*************** struct platform_device s3c_device_fb = {
*** 680,694 ****
  };
  
  static struct s3c_platform_fb default_fb_data __initdata = {
- 	.hw_ver	= 0x50,
- 	.clk_name = "sclk_fimd", 
- 	.nr_wins = 5,
- 	.default_win = CONFIG_FB_S3C_DEFAULT_WINDOW,
- 	.swap = FB_SWAP_WORD | FB_SWAP_HWORD,
- };
- //chk : vict froyo upmg
- #if 0
- static struct s3c_platform_fb default_fb_data __initdata = {
  #if defined(CONFIG_CPU_S5PV210_EVT0)
  	.hw_ver	= 0x60,
  #else
--- 654,659 ----
*************** static struct s3c_platform_fb default_fb
*** 698,704 ****
  	.default_win = CONFIG_FB_S3C_DEFAULT_WINDOW,
  	.swap = FB_SWAP_WORD | FB_SWAP_HWORD,
  };
- #endif
  
  void __init s3cfb_set_platdata(struct s3c_platform_fb *pd)
  {
--- 663,668 ----
*************** static struct resource s3c_csis_resource
*** 945,972 ****
  };
  #endif
  
- /* CFCON */
- static struct resource s3c_cfcon_resource[] = {
-         [0] = {
-                 .start = S5PV210_PA_CFCON,
-                 .end   = S5PV210_PA_CFCON + SZ_1M - 1,
-                 .flags = IORESOURCE_MEM,
-         },
-         [1] = {
-                 .start = IRQ_CFC,
-                 .end   = IRQ_CFC,
-                 .flags = IORESOURCE_IRQ,
-         },
- };
- 
- struct platform_device s3c_device_cfcon = {
-         .name             = "s3c-ide",
-         .id               = 0,
-         .num_resources    = ARRAY_SIZE(s3c_cfcon_resource),
-         .resource         = s3c_cfcon_resource,
- };
- EXPORT_SYMBOL(s3c_device_cfcon);
- 
  #if defined(CONFIG_S5P_DEV_CSIS)
  struct platform_device s3c_device_csis = {
  	.name		= "s3c-csis",
--- 909,914 ----
Only in Epic-Froyo/arch/arm/plat-s5p/include/plat: regs-dsim.h
diff -wrp Epic-Froyo/arch/arm/plat-s5p/include/plat/regs-keypad.h froyo-i9000/arch/arm/plat-s5p/include/plat/regs-keypad.h
*** Epic-Froyo/arch/arm/plat-s5p/include/plat/regs-keypad.h	Mon Dec  6 02:56:00 2010
--- froyo-i9000/arch/arm/plat-s5p/include/plat/regs-keypad.h	Tue Oct  5 05:13:33 2010
***************
*** 23,35 ****
  #define S3C_KEYIFCOL		S3C_KEYPADREG(0x08)
  #define S3C_KEYIFROW		S3C_KEYPADREG(0x0C)
  #define S3C_KEYIFFC		S3C_KEYPADREG(0x10)
! #if defined CONFIG_S5PV210_VICTORY
! #define KEYCOL_DMASK            (0xffff)
! #elif defined CONFIG_S5PV210_ATLAS
  #define KEYCOL_DMASK            (0xff)
- #elif defined CONFIG_S5PV210_GARNETT_DELTA
- #define KEYCOL_DMASK            (0xffff)
- #endif
  #if defined(CONFIG_KEYPAD_S3C_MSM)
  #define KEYROW_DMASK		(0x3fff) /*msm interface for s5pv210 */
  #else
--- 23,30 ----
  #define S3C_KEYIFCOL		S3C_KEYPADREG(0x08)
  #define S3C_KEYIFROW		S3C_KEYPADREG(0x0C)
  #define S3C_KEYIFFC		S3C_KEYPADREG(0x10)
! 
  #define KEYCOL_DMASK            (0xff)
  #if defined(CONFIG_KEYPAD_S3C_MSM)
  #define KEYROW_DMASK		(0x3fff) /*msm interface for s5pv210 */
  #else
Only in Epic-Froyo/arch/arm/plat-samsung: dev-dsim.c
diff -wrp Epic-Froyo/arch/arm/plat-samsung/dev-hsmmc.c froyo-i9000/arch/arm/plat-samsung/dev-hsmmc.c
*** Epic-Froyo/arch/arm/plat-samsung/dev-hsmmc.c	Fri Oct  1 03:22:37 2010
--- froyo-i9000/arch/arm/plat-samsung/dev-hsmmc.c	Tue Oct  5 05:13:33 2010
*************** struct platform_device s3c_device_hsmmc0
*** 54,62 ****
  		.platform_data		= &s3c_hsmmc0_def_platdata,
  	},
  };
! #if defined CONFIG_S5PV210_VICTORY
! EXPORT_SYMBOL(s3c_device_hsmmc0);	// Yongha for Victory WiMAX 20100208
! #endif
  void s3c_sdhci0_set_platdata(struct s3c_sdhci_platdata *pd)
  {
  	struct s3c_sdhci_platdata *set = &s3c_hsmmc0_def_platdata;
--- 54,60 ----
  		.platform_data		= &s3c_hsmmc0_def_platdata,
  	},
  };
! 
  void s3c_sdhci0_set_platdata(struct s3c_sdhci_platdata *pd)
  {
  	struct s3c_sdhci_platdata *set = &s3c_hsmmc0_def_platdata;
diff -wrp Epic-Froyo/arch/arm/plat-samsung/dev-hsmmc3.c froyo-i9000/arch/arm/plat-samsung/dev-hsmmc3.c
*** Epic-Froyo/arch/arm/plat-samsung/dev-hsmmc3.c	Mon Nov  1 02:40:55 2010
--- froyo-i9000/arch/arm/plat-samsung/dev-hsmmc3.c	Tue Oct  5 05:13:33 2010
*************** struct platform_device s3c_device_hsmmc3
*** 53,61 ****
  		.platform_data		= &s3c_hsmmc3_def_platdata,
  	},
  };
- #if defined CONFIG_S5PV210_VICTORY
- EXPORT_SYMBOL(s3c_device_hsmmc3);
- #endif
  
  void s3c_sdhci3_set_platdata(struct s3c_sdhci_platdata *pd)
  {
--- 53,58 ----
diff -wrp Epic-Froyo/arch/arm/plat-samsung/dev-i2c0.c froyo-i9000/arch/arm/plat-samsung/dev-i2c0.c
*** Epic-Froyo/arch/arm/plat-samsung/dev-i2c0.c	Fri Oct  1 03:22:37 2010
--- froyo-i9000/arch/arm/plat-samsung/dev-i2c0.c	Tue Oct  5 05:13:33 2010
***************
*** 16,26 ****
  #include <linux/platform_device.h>
  #include <linux/clk.h>
  #include <linux/err.h>
! #if defined CONFIG_S5PV210_VICTORY
! #include <mach/victory/irqs.h>
! #elif defined CONFIG_S5PV210_ATLAS
! #include <mach/atlas/irqs.h>
! #endif
  #include <mach/map.h>
  
  #include <plat/regs-iic.h>
--- 16,23 ----
  #include <linux/platform_device.h>
  #include <linux/clk.h>
  #include <linux/err.h>
! 
! #include <mach/irqs.h>
  #include <mach/map.h>
  
  #include <plat/regs-iic.h>
diff -wrp Epic-Froyo/arch/arm/plat-samsung/gpio-config.c froyo-i9000/arch/arm/plat-samsung/gpio-config.c
*** Epic-Froyo/arch/arm/plat-samsung/gpio-config.c	Sun Nov 21 20:25:43 2010
--- froyo-i9000/arch/arm/plat-samsung/gpio-config.c	Tue Oct  5 05:13:33 2010
*************** int s3c_gpio_setpin(unsigned int pin, s3
*** 121,149 ****
  
  EXPORT_SYMBOL(s3c_gpio_setpin);
  
- 
- s3c_gpio_pull_t s3c_gpio_getpin(unsigned int pin)
- {
- 	struct s3c_gpio_chip *chip = s3c_gpiolib_getchip(pin);
- 	unsigned long flags;
- 	int offset;
- 	s3c_gpio_pull_t ret;
- 
- 	if (!chip)
- 		return -EINVAL;
- 
- 	offset = pin - chip->chip.base;
- 
- 	local_irq_save(flags);
- 	//ret = s3c_gpio_do_getpin(chip, offset, level);
- 	ret = (chip->config->get_pin) (chip, offset);
- 	local_irq_restore(flags);
- 
- 	return ret;
- }
- 
- EXPORT_SYMBOL(s3c_gpio_getpin);
- 
  #ifdef CONFIG_S3C_GPIO_CFG_S3C24XX
  int s3c_gpio_setcfg_s3c24xx_banka(struct s3c_gpio_chip *chip,
  				  unsigned int off, unsigned int cfg)
--- 81,86 ----
*************** int s3c_gpio_setcfg_s3c24xx_banka(struct
*** 163,174 ****
  		cfg <<= shift;
  	}
  
- #if defined CONFIG_S5PV210_VICTORY //UART_CHANGE
-     if((cfg&0xfffffff0) == 0) {
- 		cfg &= 0xf;
- 		cfg <<= shift;
-     }
- #endif
  	con = __raw_readl(reg);
  	con &= ~(0x1 << shift);
  	con |= cfg;
--- 100,105 ----
*************** int s3c_gpio_setcfg_s3c24xx(struct s3c_g
*** 192,204 ****
  		cfg <<= shift;
  	}
  
- #if defined CONFIG_S5PV210_VICTORY //UART_CHANGE
- 	    if((cfg&0xfffffff0) == 0) {
- 			cfg &= 0xf;
- 			cfg <<= shift;
- 	    }
- #endif
- 
  	con = __raw_readl(reg);
  	con &= ~(0x3 << shift);
  	con |= cfg;
--- 123,128 ----
*************** int s3c_gpio_setcfg_s3c64xx_4bit(struct 
*** 224,236 ****
  		cfg <<= shift;
  	}
  
- #if defined CONFIG_S5PV210_VICTORY //UART_CHANGE
- 	    if((cfg&0xfffffff0) == 0) {
- 			cfg &= 0xf;
- 			cfg <<= shift;
- 	    }
- #endif
- 
  	con = __raw_readl(reg);
  	con &= ~(0xf << shift);
  	con |= cfg;
--- 148,153 ----
*************** int s3c_gpio_setpin_updown(struct s3c_gp
*** 281,295 ****
  	return 0;
  }
  
- s3c_gpio_pull_t s3c_gpio_getpin_updown(struct s3c_gpio_chip *chip,
- 				       unsigned int off)
- {
- 	void __iomem *reg = chip->base + 0x04;
- 	u32 lvl;
- 
- 	lvl = __raw_readl(reg);
- 	lvl &= (1 << off);
- 	return lvl ? 1 : 0;
- }
- 
- 
--- 198,200 ----
diff -wrp Epic-Froyo/arch/arm/plat-samsung/gpiolib.c froyo-i9000/arch/arm/plat-samsung/gpiolib.c
*** Epic-Froyo/arch/arm/plat-samsung/gpiolib.c	Fri Oct  1 03:22:37 2010
--- froyo-i9000/arch/arm/plat-samsung/gpiolib.c	Tue Oct  5 05:13:33 2010
*************** int s3c_gpio_slp_cfgpin(unsigned int pin
*** 204,212 ****
          local_irq_restore(flags);
          return 0;
  }
! #if defined CONFIG_S5PV210_VICTORY
! EXPORT_SYMBOL(s3c_gpio_slp_cfgpin);
! #endif
  s3c_gpio_pull_t s3c_gpio_get_slp_cfgpin(unsigned int pin)
  {
          struct s3c_gpio_chip *chip = s3c_gpiolib_getchip(pin);
--- 204,211 ----
          local_irq_restore(flags);
          return 0;
  }
! 
! 
  s3c_gpio_pull_t s3c_gpio_get_slp_cfgpin(unsigned int pin)
  {
          struct s3c_gpio_chip *chip = s3c_gpiolib_getchip(pin);
diff -wrp Epic-Froyo/arch/arm/plat-samsung/include/plat/devs.h froyo-i9000/arch/arm/plat-samsung/include/plat/devs.h
*** Epic-Froyo/arch/arm/plat-samsung/include/plat/devs.h	Fri Oct  1 03:22:37 2010
--- froyo-i9000/arch/arm/plat-samsung/include/plat/devs.h	Tue Oct  5 05:13:33 2010
*************** extern struct platform_device s3c_device
*** 97,105 ****
  #endif
  
  extern struct platform_device s5p_device_rtc;
- #if defined CONFIG_S5PV210_VICTORY
- extern struct platform_device s5p_trs_detect;
- #endif
  extern struct platform_device s5p_device_dm9000;
  extern struct platform_device s5p_device_tvout;
  extern struct platform_device s5p_device_cec;
--- 97,102 ----
diff -wrp Epic-Froyo/arch/arm/plat-samsung/include/plat/gpio-cfg-helpers.h froyo-i9000/arch/arm/plat-samsung/include/plat/gpio-cfg-helpers.h
*** Epic-Froyo/arch/arm/plat-samsung/include/plat/gpio-cfg-helpers.h	Thu Oct 28 02:29:13 2010
--- froyo-i9000/arch/arm/plat-samsung/include/plat/gpio-cfg-helpers.h	Tue Oct  5 05:13:33 2010
*************** static inline int s3c_gpio_do_setpin(str
*** 41,51 ****
  {
  	return (chip->config->set_pin)(chip, off, level);
  }
- static inline s3c_gpio_pull_t s3c_gpio_do_getpin(struct s3c_gpio_chip *chip,
- 				     unsigned int off)
- {
- 	return (chip->config->get_pin)(chip, off);
- }
  
  
  /**
--- 41,46 ----
*************** extern s3c_gpio_pull_t s3c_gpio_getpull_
*** 186,194 ****
  
  extern int s3c_gpio_setpin_updown(struct s3c_gpio_chip *chip,
  				unsigned int off, s3c_gpio_pull_t level);
- extern s3c_gpio_pull_t s3c_gpio_getpin_updown(struct s3c_gpio_chip *chip,
- 					      unsigned int off);
- 
  
  #endif /* __PLAT_GPIO_CFG_HELPERS_H */
  
--- 181,186 ----
diff -wrp Epic-Froyo/arch/arm/plat-samsung/include/plat/gpio-cfg.h froyo-i9000/arch/arm/plat-samsung/include/plat/gpio-cfg.h
*** Epic-Froyo/arch/arm/plat-samsung/include/plat/gpio-cfg.h	Sun Nov 21 20:25:44 2010
--- froyo-i9000/arch/arm/plat-samsung/include/plat/gpio-cfg.h	Tue Oct  5 05:13:33 2010
*************** typedef unsigned int __bitwise__ s3c_gpi
*** 28,36 ****
  
  /* forward declaration if gpio-core.h hasn't been included */
  struct s3c_gpio_chip;
! #if defined CONFIG_S5PV210_GARNETT_DELTA
! extern int s3c_gpio_int_flt(unsigned int pin, unsigned int config);
! #endif
  /**
   * struct s3c_gpio_cfg GPIO configuration
   * @cfg_eint: Configuration setting when used for external interrupt source
--- 28,34 ----
  
  /* forward declaration if gpio-core.h hasn't been included */
  struct s3c_gpio_chip;
! 
  /**
   * struct s3c_gpio_cfg GPIO configuration
   * @cfg_eint: Configuration setting when used for external interrupt source
*************** struct s3c_gpio_cfg {
*** 54,60 ****
  
  	int		(*set_pin)(struct s3c_gpio_chip *chip, unsigned offs,
  				    s3c_gpio_pull_t level);
! s3c_gpio_pull_t (*get_pin)(struct s3c_gpio_chip *chip, unsigned offs);
  	unsigned (*get_config)(struct s3c_gpio_chip *chip, unsigned offs);
  	int	 (*set_config)(struct s3c_gpio_chip *chip, unsigned offs,
  			       unsigned config);
--- 52,58 ----
  
  	int		(*set_pin)(struct s3c_gpio_chip *chip, unsigned offs,
  				    s3c_gpio_pull_t level);
! 
  	unsigned (*get_config)(struct s3c_gpio_chip *chip, unsigned offs);
  	int	 (*set_config)(struct s3c_gpio_chip *chip, unsigned offs,
  			       unsigned config);
*************** extern int s3c_gpio_setpin(unsigned int 
*** 74,87 ****
  extern int s3c_gpio_set_drvstrength(unsigned int pin, unsigned int config);
  extern int s3c_gpio_set_slewrate(unsigned int pin, unsigned int config);
  
- /**
-  *  * s3c_gpio_getpin() - get the level of a gpio pin.
-  *   * @pin: The pin number.
-  *    *
-  *     * This function gets the level for the
-  *      * specified pin. It will return either 0 or 1
-  *       */
- extern s3c_gpio_pull_t s3c_gpio_getpin(unsigned int pin);
  
  #define S3C_GPIO_SPECIAL_MARK	(0xfffffff0)
  #define S3C_GPIO_SPECIAL(x)	(S3C_GPIO_SPECIAL_MARK | (x))
--- 72,77 ----
diff -wrp Epic-Froyo/arch/arm/plat-samsung/pm.c froyo-i9000/arch/arm/plat-samsung/pm.c
*** Epic-Froyo/arch/arm/plat-samsung/pm.c	Wed Oct 27 20:55:01 2010
--- froyo-i9000/arch/arm/plat-samsung/pm.c	Tue Oct  5 05:13:33 2010
***************
*** 25,31 ****
  #include <mach/map.h>
  
  #include <plat/regs-serial.h>
- #include <mach/regs-power.h>
  #include <mach/regs-clock.h>
  #include <mach/regs-irq.h>
  #include <asm/irq.h>
--- 25,30 ----
***************
*** 42,48 ****
  int g_pm_wakeup_stat=PM_WAKEUP_NONE;
  #endif // CONFIG_MACH_S5PC110_P1
  
- #define __DEBUG_PRINT_EINT_WAKEUP_STATUS
  
  #define USE_DMA_ALLOC
  
--- 41,46 ----
*************** static int s3c_pm_enter(suspend_state_t 
*** 418,424 ****
  #ifndef USE_DMA_ALLOC
  	static unsigned long regs_save[16];
  #endif /* !USE_DMA_ALLOC */
! 	unsigned int tmp,audiodomain_On;
  
  	/* ensure the debug is initialised (if enabled) */
  
--- 416,422 ----
  #ifndef USE_DMA_ALLOC
  	static unsigned long regs_save[16];
  #endif /* !USE_DMA_ALLOC */
! 	unsigned int tmp;
  
  	/* ensure the debug is initialised (if enabled) */
  
*************** static int s3c_pm_enter(suspend_state_t 
*** 445,450 ****
--- 443,449 ----
  	}
  
  	/* store the physical address of the register recovery block */
+ 
  #ifndef USE_DMA_ALLOC
  	s3c_sleep_save_phys = virt_to_phys(regs_save);
  #else
*************** static int s3c_pm_enter(suspend_state_t 
*** 457,462 ****
--- 456,462 ----
  	S3C_PMDBG("s3c_sleep_save_phys=0x%08lx\n", s3c_sleep_save_phys);
  
  	/* save all necessary core registers not covered by the drivers */
+ 
  	s3c_pm_save_gpios();
  	s3c_pm_save_uarts();
  	s3c_pm_save_core();
*************** static int s3c_pm_enter(suspend_state_t 
*** 464,515 ****
  	s3c_config_sleep_gpio();
  
  	/* set the irq configuration for wake */
  	s3c_pm_configure_extint();
  	S3C_PMDBG("sleep: irq wakeup masks: %08lx,%08lx\n",
  			s3c_irqwake_intmask, s3c_irqwake_eintmask);
  
  	/*Set EINT as wake up source*/
  	if(gp2a_get_proximity_enable())	
  	{
! 		if(system_rev >= 0x0A)
! 			s3c_pm_set_eint(1, 0x4);
  	}
! 	if(system_rev >= 0x08)
! 		s3c_pm_set_eint(2, 0x4); // Open SEND / END Pin
!     	s3c_pm_set_eint(3, 0x3); // WLAN host wake
!     	s3c_pm_set_eint(4, 0x4); // bt host wake
! 	if(system_rev >= 0x08)
!     		s3c_pm_set_eint(5, 0x4); // For HALL SW
  	s3c_pm_set_eint( 6, 0x4); // det_3.5
  	s3c_pm_set_eint( 7, 0x2); // pmic
  	s3c_pm_set_eint(11, 0x2); // onedram
! //SecFeature.Victory	s3c_pm_set_eint(20, 0x3); // wifi
  	s3c_pm_set_eint(22, 0x2); // power key
  	s3c_pm_set_eint(23, 0x2); // microusb	
-     	s3c_pm_set_eint(24, 0x4);
  	s3c_pm_set_eint(25, 0x4); // volume down
  	s3c_pm_set_eint(26, 0x4); // volume up
      	s3c_pm_set_eint(30, 0x4); //sendend
! 
! #if 1	//cky 20100416 WiMAX ext-interrupt
! 	if (gpio_get_value(GPIO_WIMAX_EN))
  	{
! 		DBG("WIMAX POWER ON!! Set WIMAX_INT as Ext-Int.\n");
! 		s3c_pm_set_eint(14, 0x0);	// WIMAX_INT: GPH1(6); LOW LEVEL DETECT
  	}
- #endif
  
  	//s3c_pm_arch_prepare_irqs();
  
  	/* call cpu specific preparation */
  	pm_cpu_prep();
  
  	/* flush cache back to ram */
  	flush_cache_all();
  
  	s3c_pm_check_store();
  	__raw_writel(s3c_irqwake_intmask, S5P_WAKEUP_MASK); //0xFFDD:key, RTC_ALARM
  
  	/*clear for next wakeup*/
  	tmp = __raw_readl(S5P_WAKEUP_STAT);
  	__raw_writel(tmp, S5P_WAKEUP_STAT);
--- 464,518 ----
  	s3c_config_sleep_gpio();
  
  	/* set the irq configuration for wake */
+ 
  	s3c_pm_configure_extint();
+ 
  	S3C_PMDBG("sleep: irq wakeup masks: %08lx,%08lx\n",
  			s3c_irqwake_intmask, s3c_irqwake_eintmask);
  
  	/*Set EINT as wake up source*/
+ #if defined(CONFIG_OPTICAL_GP2A)
  	if(gp2a_get_proximity_enable())
  	{
! 		s3c_pm_set_eint(2, 0x4); // Proximity
  	}
! #endif
  	s3c_pm_set_eint( 6, 0x4); // det_3.5
  	s3c_pm_set_eint( 7, 0x2); // pmic
  	s3c_pm_set_eint(11, 0x2); // onedram
! 	s3c_pm_set_eint(20, 0x3); // wifi
! 	s3c_pm_set_eint(21, 0x4); // bt
  	s3c_pm_set_eint(22, 0x2); // power key
  	s3c_pm_set_eint(23, 0x2);   // microusb
  	s3c_pm_set_eint(25, 0x4); // volume down
  	s3c_pm_set_eint(26, 0x4); // volume up
+ 	s3c_pm_set_eint(28, 0x4);   // T_FLASH_DETECT
+ 	s3c_pm_set_eint(29, 0x4);   // ok key
+    	if(get_headset_status() & SEC_HEADSET_4_POLE_DEVICE)
+ 	{
  	    s3c_pm_set_eint(30, 0x4); //sendend
! 	}
!     else
      {
!         s3c_pm_clear_eint(30);
      }
  
  	//s3c_pm_arch_prepare_irqs();
  	
+ 
  	/* call cpu specific preparation */
+ 
  	pm_cpu_prep();
  
  	/* flush cache back to ram */
+ 
  	flush_cache_all();
  
  	s3c_pm_check_store();
+ 
  	__raw_writel(s3c_irqwake_intmask, S5P_WAKEUP_MASK); //0xFFDD:key, RTC_ALARM	
  	
+ 
  	/*clear for next wakeup*/
  	tmp = __raw_readl(S5P_WAKEUP_STAT);
  	__raw_writel(tmp, S5P_WAKEUP_STAT);
*************** static int s3c_pm_enter(suspend_state_t 
*** 519,549 ****
  	// Enable PS_HOLD pin to avoid reset failure */
          __raw_writel((0x5 << 12 | 0x1<<9 | 0x1<<8 | 0x1<<0),S5P_PSHOLD_CONTROL);
  
  	/* send the cpu to sleep... */
  	s3c_pm_arch_stop_clocks();
  
  	/* s3c_cpu_save will also act as our return point from when
  	 * we resume as it saves its own register state and restores it
  	 * during the resume.  */
  	s3c_cpu_save(regs_save);
  
  	/* restore the cpu state using the kernel's cpu init code. */
- 	cpu_init();
  
! #ifdef __DEBUG_PRINT_EINT_WAKEUP_STATUS
! 	int eintcon[4],eintmask[4],eintpend[4];
! 	int eint_wakeup_mask;
! 	int i;
  
- 	for(i=0;i<4;i++) {
- 		eint_wakeup_mask = readl(S5P_EINT_WAKEUP_MASK);
- 		eintcon[i] = __raw_readl(S5PV210_EINTCON(i));
- 		eintmask[i] = __raw_readl(S5PV210_EINTMASK(i));
- 		eintpend[i] = __raw_readl(S5PV210_EINTPEND(i));
- 	}
- #endif
  
  	/* restore the system state */
  	s3c_pm_restore_core();
  
  	/*Reset the uart registers*/
--- 522,545 ----
  	// Enable PS_HOLD pin to avoid reset failure */
          __raw_writel((0x5 << 12 | 0x1<<9 | 0x1<<8 | 0x1<<0),S5P_PSHOLD_CONTROL);
  
+ 
  	/* send the cpu to sleep... */
+ 
  	s3c_pm_arch_stop_clocks();
  
  	/* s3c_cpu_save will also act as our return point from when
  	 * we resume as it saves its own register state and restores it
  	 * during the resume.  */
+ 
  	s3c_cpu_save(regs_save);
  
  	/* restore the cpu state using the kernel's cpu init code. */
  
! 	cpu_init();
  	
  
  	/* restore the system state */
+ 
  	s3c_pm_restore_core();
  
  	/*Reset the uart registers*/
*************** static int s3c_pm_enter(suspend_state_t 
*** 567,592 ****
  	s3c_pm_restore_uarts();
  	s3c_pm_restore_gpios();
  
- 	tmp = readl(S5P_NORMAL_CFG);
- 	if(!(tmp & S5PC110_POWER_DOMAIN_AUDIO)) {
- 		tmp = tmp | S5PC110_POWER_DOMAIN_AUDIO;
- 		writel(tmp , S5P_NORMAL_CFG);
- 		audiodomain_On = 1;
- 	} else {
- 		audiodomain_On = 0;
- 	}
- 
  	/* enable gpio, uart, mmc */
  	tmp = __raw_readl(S5P_OTHERS);
  	tmp |= (1<<31) | (1<<30) | (1<<28) | (1<<29);
  	__raw_writel(tmp, S5P_OTHERS);
  
- 	tmp = readl(S5P_NORMAL_CFG);
- 	if (audiodomain_On) {
- 		tmp = tmp & ~S5PC110_POWER_DOMAIN_AUDIO;
- 		writel(tmp , S5P_NORMAL_CFG);
- 	}
- 
  	/*clear for next wakeup*/
  	tmp = __raw_readl(S5P_WAKEUP_STAT);
  	//printk("\nS5P_WAKEUP_STAT=%x\n",tmp);
--- 563,573 ----
*************** static int s3c_pm_enter(suspend_state_t 
*** 623,638 ****
  	/* LEDs should now be 1110 */
  	//s3c_pm_debug_smdkled(1 << 1, 0);
  
- #if 1	//cky 20100513 ext-int for wimax
- 	if (gpio_get_value(GPIO_WIMAX_EN))
- 	{
- 		DBG("WIMAX POWER ON!! Set WIMAX_INT: INPUT.\n");
- 		s3c_pm_clear_eint(14);
- 
- 		s3c_gpio_cfgpin(GPIO_WIMAX_INT, S3C_GPIO_INPUT);
- 		s3c_gpio_setpull(GPIO_WIMAX_INT, S3C_GPIO_PULL_NONE);
- 	}
- #endif
  
  	s3c_pm_check_restore();
  
--- 604,609 ----
diff -wrp Epic-Froyo/arch/arm/plat-samsung/pwm.c froyo-i9000/arch/arm/plat-samsung/pwm.c
*** Epic-Froyo/arch/arm/plat-samsung/pwm.c	Sat Oct 30 14:02:28 2010
--- froyo-i9000/arch/arm/plat-samsung/pwm.c	Tue Oct  5 05:13:33 2010
***************
*** 18,28 ****
  #include <linux/clk.h>
  #include <linux/io.h>
  #include <linux/pwm.h>
! #if defined CONFIG_S5PV210_VICTORY
! #include <mach/victory/irqs.h>
! #elif defined CONFIG_S5PV210_ATLAS
! #include <mach/atlas/irqs.h>
! #endif
  #include <mach/map.h>
  #include <mach/gpio.h>
  #include <mach/gpio-bank.h>
--- 18,25 ----
  #include <linux/clk.h>
  #include <linux/io.h>
  #include <linux/pwm.h>
! 
! #include <mach/irqs.h>
  #include <mach/map.h>
  #include <mach/gpio.h>
  #include <mach/gpio-bank.h>
*************** struct s3c_pwm_pdata pwm_data[] = {
*** 91,105 ****
  		.gpio_name  = "GPD",
  		.gpio_set_value = S5PV210_GPD_0_0_TOUT_0,
  	}, {
- #if defined CONFIG_S5PV210_VICTORY
- 		.gpio_no    = 0,
- 		.gpio_name  = NULL,
- 		.gpio_set_value = 0,
- #elif defined CONFIG_S5PV210_ATLAS
  		.gpio_no    = S5PV210_GPD0(1),
                  .gpio_name      = "GPD",
                  .gpio_set_value = S5PV210_GPD_0_1_TOUT_1,
- #endif
  	}, {
  		.gpio_no    = S5PV210_GPD0(2),
  		.gpio_name      = "GPD",
--- 88,96 ----
